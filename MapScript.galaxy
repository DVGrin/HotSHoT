//==================================================================================================
// 
// Map Script for HotSHoT (Hero Battle) 2.0
// 
// Original map version by MaxStorm (KR server)
// Code mostly rewritten by Dgrin (EU server)
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Type definitions
//--------------------------------------------------------------------------------------------------
void fn_prototype();

struct ShopItem {
    text name;
    int minerals_cost;
    int minerals_increase;
    int gas_cost;
    bool alive_only;
    int max_upgrades;
    funcref<fn_prototype> increase_function;
};

struct HeroInfo {
    int number;
    string unitname;
    text name;
    string image;
    int ability_resource;
    string levelup_upgrade;
};

struct PlayerStatistics {
    int damage_dealt;
    int damage_absorbed;
    int healing_done;
    int self_healing;
};

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------

const int c_abilityResourceMana = 0;
const int c_abilityResourceEnergy = 1;
const int c_abilityResourceNone = 2;
const int c_abilityResourceHeat = 3;

const int c_skillQ = 0;
const int c_skillW = 1;
const int c_skillE = 2;
const int c_skillR = 3;

const int c_primaryObjectiveDestroyNexus = 0;
const int c_secondaryObjectiveMinions = 1;
const int c_secondaryObjectiveShop = 2;
const int c_secondaryObjectiveLevels = 3;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int[11] gv_PlayerBayul;
playergroup[2] gv_TeamPlayerGroup;
int gv_TotalHeroNum;
int[11] gv_SelectedCharNum;
int[4] gv_Team1CharNum;
int[4] gv_Team2CharNum;
string[11] gv_CharSelectedImage;
text[11] gv_CharSelectedName;
bool[2] gv_CharSelectedDelay;
bool[11] gv_CharRandomBoolean;
int[11] gv_SelectedSpellNum1;
int[11] gv_SelectedSpellNum2;
bool[11] gv_SpellToggle;
text[11] gv_SelectedSpellName1;
text[11] gv_SelectedSpellName2;
string[11] gv_SelectedSpellImage1;
string[11] gv_SelectedSpellImage2;
text[11][2] gv_SpellToolTip;
string[11] gv_PlayerReadyUnit;
unit[11] gv_PlayerHero;
bool[11] gv_ReadyRandomBoolean;
bool[11] gv_ReadyClickBoolean;
int gv_ReadyBoolean;
bool[11] gv_HeroSelectionLockEnabled;
string[11] gv_PlayerHandlerNumber;
int gv_StrongUnitCount;
int[4] gv_MinionMonsterStronger;
int[11][4] gv_PlayerLevel;
int gv_SkillLearnWindow;
int gv_SkillLearnWindowLabel;
int[4] gv_SkillLearnWindowButton;
int[11] gv_AvailableSkillPoints;

int gv_StatShopDialog;
int[5] gv_StatShopPage;
int[30] gv_StatShopButton;
int[30] gv_StatShopItemLabel;
int gv_StatShopNextPageDummyButton;
int[5] gv_StatShopPageButton;
int[11] gv_ActiveShopPage;
int[11][30] gv_StatIncreasesBought;

int gv_StatusWindow;
int[2] gv_StatusWindowImage;
int[5] gv_StatusWindowPageBtn;
int[30] gv_StatusWindowBtn;
int[30] gv_StatusWindowBtnImage;
int[11] gv_StatusWindowPageSwitch;
bool[11] gv_StatusWindowAddDelay;

int gv_SelectionLockButton;
int[30][12] gv_StatHowMoney;
unitgroup[11] gv_WardGroup;
int[11] gv_SkillDPSave;
int[11] gv_SkillRPSave;
int gv_Hero39Skill4Save;
int gv_Hero62Skill3Save;
unitgroup[2] gv_MonsterGalicGroup;
unitgroup[2] gv_MonsterDogGroup;
unitgroup[2] gv_MonsterScorpionGroup;
unitgroup[2] gv_MonsterBirdGroup;
unitgroup[2] gv_MonsterCowGroup;
unitgroup[4] gv_MonsterIceBugGroup;
unitgroup[2] gv_MonsterBossGroup;
bool[2] gv_MonsterKillOnlyOne;
bool[2] gv_MonsterBirdSwitch;
unit[2] gv_MonsterBirdPing1;
bool[2] gv_MonsterDogSwitch;
unit[2] gv_MonsterDogPing1;
bool[2] gv_MonsterCowSwitch;
unit[2] gv_MonsterCowPing1;
bool[2] gv_MonsterGalicSwitch;
unit[2] gv_MonsterGalicPing1;
bool[2] gv_MonsterScorpionSwitch;
unit[2] gv_MonsterScorpionPing1;
bool[4] gv_MonsterIceBugSwitch;
unit[4] gv_MonsterIceBugPing1;
bool[2] gv_MonsterIceBossSwitch;
unit[2] gv_MonsterIceBossPing1;
bool[2] gv_RegenNewTimerBirdBoolean;
int[2] gv_RegenNewTimerBirdStrong;
bool[2] gv_RegenNewTimerDogBoolean;
int[2] gv_RegenNewTimerDogStrong;
bool[2] gv_RegenNewTimerCowBoolean;
int[2] gv_RegenNewTimerCowStrong;
bool[2] gv_RegenNewTimerGalicBoolean;
int[2] gv_RegenNewTimerGalicStrong;
bool[2] gv_RegenNewTimerScorpionBoolean;
int[2] gv_RegenNewTimerScorpionStrong;
bool[4] gv_RegenNewTimerIceBugBoolean;
int[4] gv_RegenNewTimerIceBugStrong;
bool[4] gv_RegenNewTimerIceBossBoolean;
int[2] gv_RegenNewTimerIceBossStrong;
bool[11] gv_HeroDeathBoolean;
bool gv_HeroFirstKill;
bool[2] gv_HeroAllKill;
int[11][2] gv_HeroBuffIng;
int[11] gv_HeroKillPlayer;
int[11][3] gv_HeroKillMoney;
int[11][2] gv_HeroReviveCountNum;
int[11] gv_HeroNonStopKill;
int gv_HeroReviveWindow;
int[12] gv_HeroReviveWindowTime;
int[2] gv_BeforeStartCounterDialog;
int[2] gv_BeforeStartCounterDialogLabel;
int gv_BeforeStartCounterDialogImage;
int gv_BeforeStartCounterDialogNum;
int gv_BeforeStartCounterWindow;
int gv_BeforeStartCounterWindowNum;
int gv_BeforeStartCounterWindowVar;
bool gv_GameStartBoolean;
int gv_CharChooseFullDialog;
int gv_CharChooseFullDialogLabel;
int[2] gv_CharChooseFullDialogImage;
int gv_CharChooseDialogReadyBtn;
int[7] gv_CharChooseDialogLabel;
int[15] gv_CharChooseDialogImage;
int[8] gv_CharChooseDialog;
int[2] gv_CharChooseDialogNextBtn;
int[2] gv_CharChooseDialogNextImage;
int[85] gv_CharChooseWindowBtn;
int[85] gv_CharChooseWindowImage;
int[5] gv_CharChooseWindowRandomBtn;
int[5] gv_CharChooseWindowRandomImage;
int[12] gv_CharChooseWindowSpellBtn;
int[12] gv_CharChooseWindowSpellImage;
int[2] gv_GameModeBtn;
int[2] gv_GameModeLabel;
int[2] gv_GameModeVoteInt;
bool gv_GameModeVoteValue;
bool[11] gv_GameModeMyTurn;
int[11] gv_CharSelectWindowSpellImage1;
int[11] gv_CharSelectWindowSpellImage2;
int[2] gv_TeamSelectDialog;
int[14] gv_TeamSelectDialogImage;
int[4] gv_TeamSelectDialogLabel;
int[24] gv_TeamSelectDialogNemoImage;
int[12] gv_TeamSelectBtn;
int[11] gv_TeamSelectDialogPlayerHeroImage;
int[11] gv_TeamSelectDialogPlayerBorder;
int[11] gv_TeamSelectDialogPlayerSpellImage1;
int[11] gv_TeamSelectDialogPlayerSpellImage2;
int[11] gv_TeamSelectDialogPlayerName;
bool[8] gv_TeamSelectHeroNothing;
int[8] gv_TeamSelectChangeNum;
bool[2] gv_TeamSelectChangeDelay;
int[2] gv_ScoreDialog;
int gv_ScoreWindowToggleButton;
int[8] gv_ScoreDialogImage;
int[4] gv_ScoreDialogImageB;
int[20] gv_ScoreDialogText;
int[6] gv_ScoreDialogTextB;
int[11] gv_ScoreDialogHeroImage;
int[11] gv_ScoreDialogName;
int[11] gv_ScoreDialogLevel;
int[11][2] gv_ScoreDialogSpell;
int[11] gv_ScoreDialogTotalScore;
int[11] gv_ScoreDialogFarming;
int[11] gv_ScoreDialogReviveTime;
int[2] gv_PlayerProfileTeamKillNum;
bool gv_GameEndBoolean;
int gv_SurrenderDialog;
int[11] gv_SurrenderDialogLabel;
int[2] gv_SurrenderDialogBar;
int[2] gv_SurrenderDialogBtn;
int[4] gv_SurrenderSystemYorN;
int gv_SurrenderPlayerNum1;
int gv_SurrenderPlayerNum2;
bool[2] gv_SurrenderPossibleBoolean;
bool gv_SurrenderPassBoolean;
bool[12] gv_SurrenderBtnDelay;
bool[3] gv_PlayerOutSurrenderPossible;
int[11] gv_AllyGiveMoney;
ShopItem[30] gv_ShopItemParameters;
int[8] gv_DraftChoiceOrder;
bool[11] gv_SealBought;
int[6] gv_BannedCharNum;
HeroInfo[100] gv_HeroInformation;
int[11][4] gv_SkillLevels;
int[19][4] gv_MaxSkillLevel;
string[100][4][5] gv_SkillLevelUpgrades;
bool[11] gv_TestModeVotes;
bool[11][11] gv_VotedToKick;
int[11][5] gv_PlayerObjectives;
PlayerStatistics[11] gv_PlayerStatistics;
int gv_RemoveObjectivesButton;
int gv_CenterCameraOnHeroDummyButton;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_TotalHeroNum = 73;

    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_TeamPlayerGroup[init_i] = PlayerGroupEmpty();
    }

    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_CharSelectedImage[init_i] = "Assets\\InviButton.dds";
        gv_CharSelectedName[init_i] = StringToText("");
        gv_SelectedSpellName1[init_i] = StringToText("");
        gv_SelectedSpellName2[init_i] = StringToText("");
        gv_SelectedSpellImage1[init_i] = "Assets\\InviButton.dds";
        gv_SelectedSpellImage2[init_i] = "Assets\\InviButton.dds";
        for (init_j = 0; init_j <= 1; init_j += 1) {
            gv_SpellToolTip[init_i][init_j] = StringToText("");
        }
        gv_PlayerHandlerNumber[init_i] = "";
        gv_AvailableSkillPoints[init_i] = 1;
        gv_WardGroup[init_i] = UnitGroupEmpty();
        gv_HeroDeathBoolean[init_i] = true;
        gv_CharSelectWindowSpellImage1[init_i] = c_invalidDialogControlId;
        gv_CharSelectWindowSpellImage2[init_i] = c_invalidDialogControlId;
    }

    gv_SkillLearnWindow = c_invalidDialogId;
    gv_SkillLearnWindowLabel = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_SkillLearnWindowButton[init_i] = c_invalidDialogControlId;
    }

    gv_StatShopDialog = c_invalidDialogId;
    gv_StatShopNextPageDummyButton = c_invalidDialogId;
    for (init_i = 0; init_i < 5; init_i += 1) {
        gv_StatShopPage[init_i] = c_invalidDialogControlId;
        gv_StatShopPageButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i < 30; init_i += 1) {
        gv_StatShopButton[init_i] = c_invalidDialogControlId;
        gv_StatShopItemLabel[init_i] = c_invalidDialogControlId;
    }

    gv_StatusWindow = c_invalidDialogId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_StatusWindowImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_StatusWindowPageBtn[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 29; init_i += 1) {
        gv_StatusWindowBtn[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 29; init_i += 1) {
        gv_StatusWindowBtnImage[init_i] = c_invalidDialogControlId;
    }

    gv_SelectionLockButton = c_invalidDialogId;
    gv_RemoveObjectivesButton = c_invalidDialogId;
    gv_CenterCameraOnHeroDummyButton = c_invalidDialogId;

    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_MonsterGalicGroup[init_i] = UnitGroupEmpty();
        gv_MonsterDogGroup[init_i] = UnitGroupEmpty();
        gv_MonsterScorpionGroup[init_i] = UnitGroupEmpty();
        gv_MonsterBirdGroup[init_i] = UnitGroupEmpty();
        gv_MonsterCowGroup[init_i] = UnitGroupEmpty();
        gv_MonsterBossGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_MonsterIceBugGroup[init_i] = UnitGroupEmpty();
    }

    gv_HeroReviveWindow = c_invalidDialogId;
    for (init_i = 0; init_i <= 11; init_i += 1) {
        gv_HeroReviveWindowTime[init_i] = c_invalidDialogControlId;
    }

    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_BeforeStartCounterDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_BeforeStartCounterDialogLabel[init_i] = c_invalidDialogControlId;
    }
    gv_BeforeStartCounterDialogImage = c_invalidDialogControlId;
    gv_BeforeStartCounterDialogNum = 15;
    gv_BeforeStartCounterWindow = c_invalidDialogId;
    gv_BeforeStartCounterWindowNum = c_invalidDialogControlId;
    gv_BeforeStartCounterWindowVar = 35;

    gv_CharChooseFullDialog = c_invalidDialogId;
    gv_CharChooseFullDialogLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_CharChooseFullDialogImage[init_i] = c_invalidDialogControlId;
    }
    gv_CharChooseDialogReadyBtn = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_CharChooseDialogLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 14; init_i += 1) {
        gv_CharChooseDialogImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_CharChooseDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_CharChooseDialogNextBtn[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_CharChooseDialogNextImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 84; init_i += 1) {
        gv_CharChooseWindowBtn[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 84; init_i += 1) {
        gv_CharChooseWindowImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_CharChooseWindowRandomBtn[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_CharChooseWindowRandomImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 11; init_i += 1) {
        gv_CharChooseWindowSpellBtn[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 11; init_i += 1) {
        gv_CharChooseWindowSpellImage[init_i] = c_invalidDialogControlId;
    }

    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_GameModeBtn[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_GameModeLabel[init_i] = c_invalidDialogControlId;
    }

    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_TeamSelectDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_TeamSelectDialogImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_TeamSelectDialogLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 23; init_i += 1) {
        gv_TeamSelectDialogNemoImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 11; init_i += 1) {
        gv_TeamSelectBtn[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_TeamSelectDialogPlayerHeroImage[init_i] = c_invalidDialogControlId;
        gv_TeamSelectDialogPlayerBorder[init_i] = c_invalidDialogControlId;
        gv_TeamSelectDialogPlayerSpellImage1[init_i] = c_invalidDialogControlId;
        gv_TeamSelectDialogPlayerSpellImage2[init_i] = c_invalidDialogControlId;
        gv_TeamSelectDialogPlayerName[init_i] = c_invalidDialogControlId;
    }

    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_ScoreDialog[init_i] = c_invalidDialogId;
    }

    gv_ScoreWindowToggleButton = c_invalidDialogControlId;

    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_ScoreDialogImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_ScoreDialogImageB[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 19; init_i += 1) {
        gv_ScoreDialogText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_ScoreDialogTextB[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_ScoreDialogHeroImage[init_i] = c_invalidDialogControlId;
        gv_ScoreDialogName[init_i] = c_invalidDialogControlId;
        gv_ScoreDialogLevel[init_i] = c_invalidDialogControlId;
        for (init_j = 0; init_j <= 1; init_j += 1) {
            gv_ScoreDialogSpell[init_i][init_j] = c_invalidDialogControlId;
        }
        gv_ScoreDialogTotalScore[init_i] = c_invalidDialogControlId;
        gv_ScoreDialogFarming[init_i] = c_invalidDialogControlId;
        gv_ScoreDialogReviveTime[init_i] = c_invalidDialogControlId;
    }

    gv_SurrenderDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_SurrenderDialogLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_SurrenderDialogBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_SurrenderDialogBtn[init_i] = c_invalidDialogControlId;
    }

    for (init_i = 0; init_i < gv_TotalHeroNum; init_i += 1) {
        gv_HeroInformation[init_i].number = init_i + 1;
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_HrHeroSelect ();
void gf_HrHeroTeamSelectSave ();
void gf_HrHeroTeamSelectSave2 ();
void gf_HrDraftSelectRandomRefresh ();
void gf_HrSpellMake1 ();
void gf_HrSpellMake2 ();
void gf_HrCharMake ();
void gf_HrCleanUpHeroSelectDialogs ();
void gf_HrHeroLevelUpLink ();
void gf_HrSkillLearnDialogMake ();
void gf_HrSkillLearnWindowOpen ();
void gf_HrSkillLearnWindowClose ();
void gf_HrStatDialogMake1a ();
void gf_HrStatDialogMake2a ();
void gf_HrStatDialogMake3a2 ();
void gf_HrStatDialogMake3a ();
void gf_HrStatDialogMake4a ();
void gf_HrStatMoneySet ();
void gf_HrStat1 ();
void gf_HrStat2 ();
void gf_HrStat3 ();
void gf_HrStat4 ();
void gf_HrStat5 ();
void gf_HrStat6 ();
void gf_HrStat7 ();
void gf_HrStat8 ();
void gf_HrStat9 ();
void gf_HrStat10 ();
void gf_HrStat11 ();
void gf_HrStat12 ();
void gf_HrStat25 ();
void gf_HrStat26 ();
void gf_HrStat27 ();
void gf_HrStat28 ();
void gf_HrStat29 ();
void gf_HrStat30 ();
void gf_HrStat13 ();
void gf_HrStat14 ();
void gf_HrStat15 ();
void gf_HrStat16 ();
void gf_HrStat17 ();
void gf_HrStat18 ();
void gf_HrStat19 ();
void gf_HrStat20 ();
void gf_HrStat21 ();
void gf_HrStat22 ();
void gf_HrStat23 ();
void gf_HrStat24 ();
void gf_HrAttackSpeedLevelIncrease ();
void gf_HrEvasionLevelIncrease ();
void gf_HrCriticalChanceLevelIncrease ();
void gf_HrCooldownReductionLevelIncrease ();
// Updates the particular player's stats in the stat window
//
// Uses `gv_StatIncreasesBought` and `gv_ShopItemParameters`
// Changes the tooltip for player's `gv_ScoreDialogName`
void gf_StatWindowUpdatePlayer (int player);
void gf_HrItemUseComplete ();
void gf_HrAssistSystemAdd2 ();
void gf_HrHeroBSpawnH1 ();
void gf_HrHeroBSpawnH2 ();
void gf_HrMonsterBuffPickUp1 ();
void gf_HrMonsterBuffPickUp2 ();
void gf_HrMonsterBuffPickUp4 ();
void gf_HrMonsterBuffPickUp3 ();
void gf_HrMonsterBirdRegenTimerStart ();
void gf_HrMonsterDogRegenTimerStart ();
void gf_HrMonsterCowRegenTimerStart ();
void gf_HrMonsterGarlicRegenTimerStart ();
void gf_HrMonsterScorpionRegenTimerStart ();
void gf_HrMonsterIceBugRegenTimerStart ();
void gf_HrMonsterBossRegenTimerStart ();
void gf_HrHeroReviveWindowMake ();
void gf_HrHeroSkillIncreaseEffect ();
void gf_HrHeroSkillIncreaseEffect2 ();
void gf_HrHeroAllKillMessage ();
void gf_HrHeroAddKillMessage ();
void gf_HrAssistantBonusTeam1 ();
void gf_HrAssistantBonusTeam2 ();
void gf_HrHeroBuffPut ();
void gf_HrHeroPassiveRepair ();
void gf_HrStartBeforeCounterMake ();
void gf_HrStartBeforeCounterMake2 ();
void gf_HrStartBeforeCounterMake3 ();
void gf_HrCharSelectDialogHeroBtnMake1 ();
void gf_HrCharSelectDialogHeroBtnMake2 ();
void gf_HrCharSelectDialogHeroBtnMake3 ();
void gf_HrCharSelectDialogHeroBtnMake4 ();
void gf_HrCharSelectDialogHeroBtnMake5 ();
void gf_HrCharSelectDialogSpellBtnMake1 ();
void gf_HrCharSelectDialogSpellBtnMake2 ();
void gf_HrTeamSelectDialogMake ();
void gf_HrTeamSelectDialogTeam1Make ();
void gf_HrTeamSelectDialogTeam1Make2 ();
void gf_HrScoreDialogMake ();
void gf_HrSurrenderDialogMake ();
void gf_HrDrawGame ();
void gf_LearnSkill(int player_number, int skill);
void gf_SpawnHero(int player_number, int hero_number);
void gf_CreateObjectives();
void gf_RemoveCompletedSecondaryObjectives();
void gf_ShowPlayerStatistics(int player);
// Utility functions
int gf_ShopWindowByIndex(int shop_index);
bool gf_EligibleForBuyingHotkey(int shop_index);
bool gf_HotkeyStatIncreaseTestConditions();
void gf_ChangeStatShopPage(int player, int page);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_TrStartGame;
trigger gt_Tr1FullscreenSetting;
trigger gt_Tr2GameSetting;
trigger gt_Tr3PlayerSetting;
trigger gt_Tr5AllDialogInit;
trigger gt_Tr6PlayerDialogAddorView;
trigger gt_Tr8VoteScreenView;
trigger gt_TrCharSelectDraft;
trigger gt_TrCharSelectBlind;
trigger gt_TrCharSelectPageNext;
trigger gt_TrCharSelect;
trigger gt_TrCharSelectRandom;
trigger gt_TrDraftSelectRandomRefreash1;
trigger gt_TrTeamSelectDialogHeroSwap1;
trigger gt_TrTeamSelectDialogHeroSwap2;
trigger gt_TrTeamSelectDialogHeroSwap3;
trigger gt_TrTeamSelectDialogHeroSwap4;
trigger gt_TrTeamSelectDialogHeroSwap5;
trigger gt_TrTeamSelectDialogHeroSwap6;
trigger gt_TrTeamSelectDialogHeroSwap7;
trigger gt_TrTeamSelectDialogHeroSwap8;
trigger gt_TrTeamSelectDialogHeroSwapSuggestOkTeam1;
trigger gt_TrTeamSelectDialogHeroSwapSuggestNoTeam1;
trigger gt_TrTeamSelectDialogHeroSwapSuggestOkTeam2;
trigger gt_TrTeamSelectDialogHeroSwapSuggestNoTeam2;
trigger gt_TrSpellSelect1;
trigger gt_TrSpellSelect2;
trigger gt_TrGameModeSelect;
trigger gt_TrReadyOkSelect;
trigger gt_TrBeforeSpellRandomSelect;
trigger gt_TrPlayersAllCreate;
trigger gt_TrRankDialogView;
trigger gt_TrGameStartCounter;
trigger gt_CenterCameraOnHero;
trigger gt_HeroSelectionLockToggle;
trigger gt_HeroSelectionLockAction;
trigger gt_TrChatCommandHandler;
trigger gt_Trgametipbtn;
trigger gt_TrMinionMake;
trigger gt_TrHeroLevelUp;
trigger gt_SkillPointAllocation;
trigger gt_ChangeShopPage;
trigger gt_TrStatDialogStatIncrease;
trigger gt_TrHealingPosionUseComplete;
trigger gt_TrManaPosionUseComplete;
trigger gt_TrWardUseComplete;
trigger gt_TrWardUseComplete2;
trigger gt_TrUnitBoodeSet;
trigger gt_TrTextTailUseCritical;
trigger gt_TrTextTailUseHyepi;
trigger gt_TrSpellTeleportUse;
trigger gt_TrPortalUse;
trigger gt_TrMissileOutDestroy;
trigger gt_TrTextTailUseHero5Skill4;
trigger gt_TrTextTailUseHero9AttackImpact;
trigger gt_TrHero10Skill4On;
trigger gt_TrHero10Skill4Off;
trigger gt_TrHero15Skill4Use;
trigger gt_TrHero19Death;
trigger gt_TrHero36Skill4RPDown;
trigger gt_TrHero32Skill2Up;
trigger gt_TrHero32Skill4On;
trigger gt_TrHero32Skill4Off;
trigger gt_TrHero39Skill4On;
trigger gt_TrHero59Skill1Use;
trigger gt_TrHero62Skill3Start;
trigger gt_TrHero62Skill3On;
trigger gt_TrHero62Skill3End;
trigger gt_TrHero66PassiveOn;
trigger gt_TrHero66PassiveOn2;
trigger gt_ScoreWindowToggle;
trigger gt_TrMinionNotStop;
trigger gt_TrMonsterMake1;
trigger gt_TrMonsterMake2;
trigger gt_TrMonsterMake3;
trigger gt_TrMonsterMake4;
trigger gt_TrMonsterMake5;
trigger gt_TrMonsterBuffPickUp;
trigger gt_TrMonsterBuffEnd1;
trigger gt_TrMonsterBuffEnd2;
trigger gt_TrMonsterBuffEnd3;
trigger gt_TrMonsterAttackBird1;
trigger gt_TrMonsterAttackBird2;
trigger gt_TrMonsterBackBird1;
trigger gt_TrMonsterBackBird2;
trigger gt_TrMonsterAttackDog1;
trigger gt_TrMonsterAttackDog2;
trigger gt_TrMonsterBackDog1;
trigger gt_TrMonsterBackDog2;
trigger gt_TrMonsterAttackCow1;
trigger gt_TrMonsterAttackCow2;
trigger gt_TrMonsterBackCow1;
trigger gt_TrMonsterBackCow2;
trigger gt_TrMonsterAttackGalic1;
trigger gt_TrMonsterAttackGalic2;
trigger gt_TrMonsterBackGalic1;
trigger gt_TrMonsterBackGalic2;
trigger gt_TrMonsterAttackScorpion1;
trigger gt_TrMonsterAttackScorpion2;
trigger gt_TrMonsterBackScorpion1;
trigger gt_TrMonsterBackScorpion2;
trigger gt_TrMonsterAttackIceBug1;
trigger gt_TrMonsterAttackIceBug2;
trigger gt_TrMonsterAttackIceBug3;
trigger gt_TrMonsterAttackIceBug4;
trigger gt_TrMonsterBackIceBug1;
trigger gt_TrMonsterBackIceBug2;
trigger gt_TrMonsterBackIceBug3;
trigger gt_TrMonsterBackIceBug4;
trigger gt_TrMonsterAttackBoss1;
trigger gt_TrMonsterAttackBoss2;
trigger gt_TrMonsterBackBoss1;
trigger gt_TrMonsterBackBoss2;
trigger gt_TrMonsterRegenTimerStart;
trigger gt_TrMonsterBirdRegen;
trigger gt_TrMonsterDogRegen;
trigger gt_TrMonsterCowRegen;
trigger gt_TrMonsterGalicRegen;
trigger gt_TrMonsterScorpionRegen;
trigger gt_TrMonsterIceBugRegen;
trigger gt_TrMonsterIceBossRegen;
trigger gt_TrBuildingDestroyMoojuck;
trigger gt_TrSinhoBuildingReviveTimerStart;
trigger gt_TrSinhoBuildingRevive;
trigger gt_TrHeroDeath;
trigger gt_TrHeroReviveStand;
trigger gt_TrNexusDestroyTeam1;
trigger gt_TrNexusDestroyTeam2;
trigger gt_TrSurrenderSignOk;
trigger gt_TrSurrenderReTimer;
trigger gt_TrSurrenderSystemStart;
trigger gt_TrSurrenderSystemStartBtn;
trigger gt_TrSurrenderOkTeam1;
trigger gt_TrSurrenderOkTeam2;
trigger gt_TrSurrenderNoTeam1;
trigger gt_TrSurrenderNoTeam2;
trigger gt_TrSurrenderOkTeam1Win;
trigger gt_TrSurrenderOkTeam2Win;
trigger gt_TrPlayerOut;
trigger gt_MinionObjectiveCompleted;
trigger gt_TrackHeroDamage;
trigger gt_TrackHeroHealing;
trigger gt_RemoveObjectivesButton;

//--------------------------------------------------------------------------------------------------
// Game Parameters
//--------------------------------------------------------------------------------------------------
void SetDraftChoiceOrder() {
    gv_DraftChoiceOrder[0] = 1;
    gv_DraftChoiceOrder[1] = 5;
    gv_DraftChoiceOrder[2] = 6;
    gv_DraftChoiceOrder[3] = 2;
    gv_DraftChoiceOrder[4] = 7;
    gv_DraftChoiceOrder[5] = 3;
    gv_DraftChoiceOrder[6] = 4;
    gv_DraftChoiceOrder[7] = 8;
}

void ShopInit() {
    gv_ShopItemParameters[0].name = StringToText("Attack Damage"); // TODO: Move all names to external strings
    gv_ShopItemParameters[0].minerals_cost = 225;
    gv_ShopItemParameters[0].minerals_increase = 25;
    gv_ShopItemParameters[0].gas_cost = 1;
    gv_ShopItemParameters[0].alive_only = false;
    gv_ShopItemParameters[0].max_upgrades = 25;
    gv_ShopItemParameters[0].increase_function = gf_HrStat1;

    gv_ShopItemParameters[1].name = StringToText("Ability Power");
    gv_ShopItemParameters[1].minerals_cost = 200;
    gv_ShopItemParameters[1].minerals_increase = 10;
    gv_ShopItemParameters[1].gas_cost = 1;
    gv_ShopItemParameters[1].alive_only = false;
    gv_ShopItemParameters[1].max_upgrades = 30;
    gv_ShopItemParameters[1].increase_function = gf_HrStat2;

    gv_ShopItemParameters[2].name = StringToText("Physical Defense");
    gv_ShopItemParameters[2].minerals_cost = 100;
    gv_ShopItemParameters[2].minerals_increase = 35;
    gv_ShopItemParameters[2].gas_cost = 1;
    gv_ShopItemParameters[2].alive_only = false;
    gv_ShopItemParameters[2].max_upgrades = 20;
    gv_ShopItemParameters[2].increase_function = gf_HrStat3;

    gv_ShopItemParameters[3].name = StringToText("Magical Defense");
    gv_ShopItemParameters[3].minerals_cost = 100;
    gv_ShopItemParameters[3].minerals_increase = 35;
    gv_ShopItemParameters[3].gas_cost = 1;
    gv_ShopItemParameters[3].alive_only = false;
    gv_ShopItemParameters[3].max_upgrades = 20;
    gv_ShopItemParameters[3].increase_function = gf_HrStat4;

    gv_ShopItemParameters[4].name = StringToText("Maximum Health");
    gv_ShopItemParameters[4].minerals_cost = 230;
    gv_ShopItemParameters[4].minerals_increase = 20;
    gv_ShopItemParameters[4].gas_cost = 1;
    gv_ShopItemParameters[4].alive_only = false;
    gv_ShopItemParameters[4].max_upgrades = 25;
    gv_ShopItemParameters[4].increase_function = gf_HrStat5;

    gv_ShopItemParameters[5].name = StringToText("Maximum Mana");
    gv_ShopItemParameters[5].minerals_cost = 85;
    gv_ShopItemParameters[5].minerals_increase = 15;
    gv_ShopItemParameters[5].gas_cost = 0;
    gv_ShopItemParameters[5].alive_only = false;
    gv_ShopItemParameters[5].max_upgrades = 25;
    gv_ShopItemParameters[5].increase_function = gf_HrStat6;

    gv_ShopItemParameters[6].name = StringToText("Health Regeneration");
    gv_ShopItemParameters[6].minerals_cost = 60;
    gv_ShopItemParameters[6].minerals_increase = 10;
    gv_ShopItemParameters[6].gas_cost = 0;
    gv_ShopItemParameters[6].alive_only = false;
    gv_ShopItemParameters[6].max_upgrades = 20;
    gv_ShopItemParameters[6].increase_function = gf_HrStat7;

    gv_ShopItemParameters[7].name = StringToText("Mana Regeneration");
    gv_ShopItemParameters[7].minerals_cost = 50;
    gv_ShopItemParameters[7].minerals_increase = 5;
    gv_ShopItemParameters[7].gas_cost = 0;
    gv_ShopItemParameters[7].alive_only = false;
    gv_ShopItemParameters[7].max_upgrades = 20;
    gv_ShopItemParameters[7].increase_function = gf_HrStat8;

    gv_ShopItemParameters[8].name = StringToText("Attack Speed");
    gv_ShopItemParameters[8].minerals_cost = 180;
    gv_ShopItemParameters[8].minerals_increase = 40;
    gv_ShopItemParameters[8].gas_cost = 1;
    gv_ShopItemParameters[8].alive_only = false;
    gv_ShopItemParameters[8].max_upgrades = 10;
    gv_ShopItemParameters[8].increase_function = gf_HrStat9;

    gv_ShopItemParameters[9].name = StringToText("Penetration");
    gv_ShopItemParameters[9].minerals_cost = 150;
    gv_ShopItemParameters[9].minerals_increase = 50;
    gv_ShopItemParameters[9].gas_cost = 1;
    gv_ShopItemParameters[9].alive_only = false;
    gv_ShopItemParameters[9].max_upgrades = 3;
    gv_ShopItemParameters[9].increase_function = gf_HrStat10;

    gv_ShopItemParameters[10].name = StringToText("Evasion Chance");
    gv_ShopItemParameters[10].minerals_cost = 225;
    gv_ShopItemParameters[10].minerals_increase = 100;
    gv_ShopItemParameters[10].gas_cost = 1;
    gv_ShopItemParameters[10].alive_only = false;
    gv_ShopItemParameters[10].max_upgrades = 3;
    gv_ShopItemParameters[10].increase_function = gf_HrStat11;

    gv_ShopItemParameters[11].name = StringToText("Critical Hit Chance");
    gv_ShopItemParameters[11].minerals_cost = 300;
    gv_ShopItemParameters[11].minerals_increase = 100;
    gv_ShopItemParameters[11].gas_cost = 1;
    gv_ShopItemParameters[11].alive_only = false;
    gv_ShopItemParameters[11].max_upgrades = 5;
    gv_ShopItemParameters[11].increase_function = gf_HrStat12;

    gv_ShopItemParameters[12].name = StringToText("Seal of Execution");
    gv_ShopItemParameters[12].minerals_cost = 400;
    gv_ShopItemParameters[12].minerals_increase = 0;
    gv_ShopItemParameters[12].gas_cost = 1;
    gv_ShopItemParameters[12].alive_only = false;
    gv_ShopItemParameters[12].max_upgrades = 1;
    gv_ShopItemParameters[12].increase_function = gf_HrStat25;

    gv_ShopItemParameters[13].name = StringToText("Seal of Curse");
    gv_ShopItemParameters[13].minerals_cost = 450;
    gv_ShopItemParameters[13].minerals_increase = 0;
    gv_ShopItemParameters[13].gas_cost = 1;
    gv_ShopItemParameters[13].alive_only = false;
    gv_ShopItemParameters[13].max_upgrades = 1;
    gv_ShopItemParameters[13].increase_function = gf_HrStat26;

    gv_ShopItemParameters[14].name = StringToText("Seal of Destruction");
    gv_ShopItemParameters[14].minerals_cost = 350;
    gv_ShopItemParameters[14].minerals_increase = 0;
    gv_ShopItemParameters[14].gas_cost = 1;
    gv_ShopItemParameters[14].alive_only = false;
    gv_ShopItemParameters[14].max_upgrades = 1;
    gv_ShopItemParameters[14].increase_function = gf_HrStat27;

    gv_ShopItemParameters[15].name = StringToText("Demon Seal");
    gv_ShopItemParameters[15].minerals_cost = 400;
    gv_ShopItemParameters[15].minerals_increase = 0;
    gv_ShopItemParameters[15].gas_cost = 1;
    gv_ShopItemParameters[15].alive_only = false;
    gv_ShopItemParameters[15].max_upgrades = 1;
    gv_ShopItemParameters[15].increase_function = gf_HrStat28;

    gv_ShopItemParameters[16].name = StringToText("Seal of Iron");
    gv_ShopItemParameters[16].minerals_cost = 350;
    gv_ShopItemParameters[16].minerals_increase = 0;
    gv_ShopItemParameters[16].gas_cost = 1;
    gv_ShopItemParameters[16].alive_only = false;
    gv_ShopItemParameters[16].max_upgrades = 1;
    gv_ShopItemParameters[16].increase_function = gf_HrStat29;

    gv_ShopItemParameters[17].name = StringToText("Seal of Resistance");
    gv_ShopItemParameters[17].minerals_cost = 325;
    gv_ShopItemParameters[17].minerals_increase = 0;
    gv_ShopItemParameters[17].gas_cost = 1;
    gv_ShopItemParameters[17].alive_only = false;
    gv_ShopItemParameters[17].max_upgrades = 1;
    gv_ShopItemParameters[17].increase_function = gf_HrStat30;

    gv_ShopItemParameters[18].name = StringToText("Lifesteal");
    gv_ShopItemParameters[18].minerals_cost = 275;
    gv_ShopItemParameters[18].minerals_increase = 85;
    gv_ShopItemParameters[18].gas_cost = 1;
    gv_ShopItemParameters[18].alive_only = false;
    gv_ShopItemParameters[18].max_upgrades = 3;
    gv_ShopItemParameters[18].increase_function = gf_HrStat13;

    gv_ShopItemParameters[19].name = StringToText("Spell Vampirism");
    gv_ShopItemParameters[19].minerals_cost = 325;
    gv_ShopItemParameters[19].minerals_increase = 100;
    gv_ShopItemParameters[19].gas_cost = 1;
    gv_ShopItemParameters[19].alive_only = false;
    gv_ShopItemParameters[19].max_upgrades = 3;
    gv_ShopItemParameters[19].increase_function = gf_HrStat14;

    gv_ShopItemParameters[20].name = StringToText("Cooldown Reduction");
    gv_ShopItemParameters[20].minerals_cost = 200;
    gv_ShopItemParameters[20].minerals_increase = 60;
    gv_ShopItemParameters[20].gas_cost = 1;
    gv_ShopItemParameters[20].alive_only = false;
    gv_ShopItemParameters[20].max_upgrades = 3;
    gv_ShopItemParameters[20].increase_function = gf_HrStat15;

    gv_ShopItemParameters[21].name = StringToText("Booster");
    gv_ShopItemParameters[21].minerals_cost = 200;
    gv_ShopItemParameters[21].minerals_increase = 0;
    gv_ShopItemParameters[21].gas_cost = 1;
    gv_ShopItemParameters[21].alive_only = false;
    gv_ShopItemParameters[21].max_upgrades = 1;
    gv_ShopItemParameters[21].increase_function = gf_HrStat16;

    gv_ShopItemParameters[22].name = StringToText("Spell Shield");
    gv_ShopItemParameters[22].minerals_cost = 375;
    gv_ShopItemParameters[22].minerals_increase = 0;
    gv_ShopItemParameters[22].gas_cost = 1;
    gv_ShopItemParameters[22].alive_only = false;
    gv_ShopItemParameters[22].max_upgrades = 1;
    gv_ShopItemParameters[22].increase_function = gf_HrStat17;

    gv_ShopItemParameters[23].name = StringToText("Body of Lava");
    gv_ShopItemParameters[23].minerals_cost = 285;
    gv_ShopItemParameters[23].minerals_increase = 0;
    gv_ShopItemParameters[23].gas_cost = 1;
    gv_ShopItemParameters[23].alive_only = false;
    gv_ShopItemParameters[23].max_upgrades = 1;
    gv_ShopItemParameters[23].increase_function = gf_HrStat18;

    gv_ShopItemParameters[24].name = StringToText("Health Potion");
    gv_ShopItemParameters[24].minerals_cost = 35;
    gv_ShopItemParameters[24].minerals_increase = 0;
    gv_ShopItemParameters[24].gas_cost = 0;
    gv_ShopItemParameters[24].alive_only = true;
    gv_ShopItemParameters[24].max_upgrades = 1;
    gv_ShopItemParameters[24].increase_function = gf_HrStat19;

    gv_ShopItemParameters[25].name = StringToText("Mana Potion");
    gv_ShopItemParameters[25].minerals_cost = 30;
    gv_ShopItemParameters[25].minerals_increase = 0;
    gv_ShopItemParameters[25].gas_cost = 0;
    gv_ShopItemParameters[25].alive_only = true;
    gv_ShopItemParameters[25].max_upgrades = 1;
    gv_ShopItemParameters[25].increase_function = gf_HrStat20;

    gv_ShopItemParameters[26].name = StringToText("Ward");
    gv_ShopItemParameters[26].minerals_cost = 70;
    gv_ShopItemParameters[26].minerals_increase = 0;
    gv_ShopItemParameters[26].gas_cost = 0;
    gv_ShopItemParameters[26].alive_only = true;
    gv_ShopItemParameters[26].max_upgrades = 1;
    gv_ShopItemParameters[26].increase_function = gf_HrStat21;

    gv_ShopItemParameters[27].name = StringToText("Hawk Eye");
    gv_ShopItemParameters[27].minerals_cost = 225;
    gv_ShopItemParameters[27].minerals_increase = 0;
    gv_ShopItemParameters[27].gas_cost = 0;
    gv_ShopItemParameters[27].alive_only = true;
    gv_ShopItemParameters[27].max_upgrades = 1;
    gv_ShopItemParameters[27].increase_function = gf_HrStat22;

    gv_ShopItemParameters[28].name = StringToText("Fiery Flask");
    gv_ShopItemParameters[28].minerals_cost = 350;
    gv_ShopItemParameters[28].minerals_increase = 0;
    gv_ShopItemParameters[28].gas_cost = 0;
    gv_ShopItemParameters[28].alive_only = true;
    gv_ShopItemParameters[28].max_upgrades = 1;
    gv_ShopItemParameters[28].increase_function = gf_HrStat23;

    gv_ShopItemParameters[29].name = StringToText("Devil Elixir");
    gv_ShopItemParameters[29].minerals_cost = 400;
    gv_ShopItemParameters[29].minerals_increase = 0;
    gv_ShopItemParameters[29].gas_cost = 0;
    gv_ShopItemParameters[29].alive_only = true;
    gv_ShopItemParameters[29].max_upgrades = 1;
    gv_ShopItemParameters[29].increase_function = gf_HrStat24;
}

void HeroInfoInit() {
    // Benderzone
    gv_HeroInformation[0].image = "Assets\\Textures\\btn-unit-terran-tosh.dds";
    gv_HeroInformation[0].unitname = "Tosh";
    gv_HeroInformation[0].levelup_upgrade = "HeroLvUp";
    gv_HeroInformation[0].name = StringExternal("Unit/Name/Tosh");
    gv_HeroInformation[0].ability_resource = c_abilityResourceMana;

    // Blane
    gv_HeroInformation[1].image = "Assets\\Textures\\btn-unit-protoss-zeratul.dds";
    gv_HeroInformation[1].unitname = "Zeratul";
    gv_HeroInformation[1].levelup_upgrade = "HeroLvUp2";
    gv_HeroInformation[1].name = StringExternal("Unit/Name/Zeratul");
    gv_HeroInformation[1].ability_resource = c_abilityResourceNone;

    // Gianter
    gv_HeroInformation[2].image = "Assets\\Textures\\btn-unit-zerg-ultralisk.dds";
    gv_HeroInformation[2].unitname = "Ultralisk";
    gv_HeroInformation[2].levelup_upgrade = "HeroLvUp3";
    gv_HeroInformation[2].name = StringExternal("Unit/Name/Ultralisk");
    gv_HeroInformation[2].ability_resource = c_abilityResourceMana;

    // Obos
    gv_HeroInformation[3].image = "Assets\\Textures\\btn-unit-protoss-archon.dds";
    gv_HeroInformation[3].unitname = "Archon";
    gv_HeroInformation[3].levelup_upgrade = "HeroLvUp4";
    gv_HeroInformation[3].name = StringExternal("Unit/Name/Archon");
    gv_HeroInformation[3].ability_resource = c_abilityResourceMana;

    // Xolus
    gv_HeroInformation[4].image = "Assets\\Textures\\btn-unit-protoss-tassadar.dds";
    gv_HeroInformation[4].unitname = "Hero5";
    gv_HeroInformation[4].levelup_upgrade = "HeroLvUp22";
    gv_HeroInformation[4].name = StringExternal("Unit/Name/Hero5");
    gv_HeroInformation[4].ability_resource = c_abilityResourceNone;

    // Edburn
    gv_HeroInformation[5].image = "Assets\\AddIcon\\btn-hero6.dds";
    gv_HeroInformation[5].unitname = "Hero6";
    gv_HeroInformation[5].levelup_upgrade = "HeroLvUp5";
    gv_HeroInformation[5].name = StringExternal("Unit/Name/Hero6");
    gv_HeroInformation[5].ability_resource = c_abilityResourceMana;

    // Metel
    gv_HeroInformation[6].image = "Assets\\Textures\\btn-unit-terran-medic.dds";
    gv_HeroInformation[6].unitname = "Hero7";
    gv_HeroInformation[6].levelup_upgrade = "HeroLvUp43";
    gv_HeroInformation[6].name = StringExternal("Unit/Name/Hero7");
    gv_HeroInformation[6].ability_resource = c_abilityResourceMana;

    // Jade
    gv_HeroInformation[7].image = "Assets\\Textures\\btn-unit-terran-reaper.dds";
    gv_HeroInformation[7].unitname = "Hero8";
    gv_HeroInformation[7].levelup_upgrade = "HeroLvUp52";
    gv_HeroInformation[7].name = StringExternal("Unit/Name/Hero8");
    gv_HeroInformation[7].ability_resource = c_abilityResourceMana;

    // Leinard
    gv_HeroInformation[8].image = "Assets\\Textures\\btn-unit-terran-nova.dds";
    gv_HeroInformation[8].unitname = "Hero9";
    gv_HeroInformation[8].levelup_upgrade = "HeroLvUp9";
    gv_HeroInformation[8].name = StringExternal("Unit/Name/Hero9");
    gv_HeroInformation[8].ability_resource = c_abilityResourceMana;

    // Venom Bug
    gv_HeroInformation[9].image = "Assets\\Textures\\btn-unit-zerg-baneling.dds";
    gv_HeroInformation[9].unitname = "Hero10";
    gv_HeroInformation[9].levelup_upgrade = "HeroLvUp522";
    gv_HeroInformation[9].name = StringExternal("Unit/Name/Hero10");
    gv_HeroInformation[9].ability_resource = c_abilityResourceMana;

    // Galaxia
    gv_HeroInformation[10].image = "Assets\\Textures\\btn-unit-zerg-kerrigan.dds";
    gv_HeroInformation[10].unitname = "Hero11";
    gv_HeroInformation[10].levelup_upgrade = "HeroLvUp5222";
    gv_HeroInformation[10].name = StringExternal("Unit/Name/Hero11");
    gv_HeroInformation[10].ability_resource = c_abilityResourceMana;

    // Tangky
    gv_HeroInformation[11].image = "Assets\\AddIcon\\btn-hero12.dds";
    gv_HeroInformation[11].unitname = "Hero12";
    gv_HeroInformation[11].levelup_upgrade = "HeroLvUp32";
    gv_HeroInformation[11].name = StringExternal("Unit/Name/Hero12");
    gv_HeroInformation[11].ability_resource = c_abilityResourceEnergy;

    // Pyron
    gv_HeroInformation[12].image = "Assets\\AddIcon\\btn-hero13.dds";
    gv_HeroInformation[12].unitname = "Hero13";
    gv_HeroInformation[12].levelup_upgrade = "HeroLvUp33";
    gv_HeroInformation[12].name = StringExternal("Unit/Name/Hero13");
    gv_HeroInformation[12].ability_resource = c_abilityResourceMana;

    // Magner
    gv_HeroInformation[13].image = "Assets\\Textures\\btn-unit-terran-marauderswann.dds";
    gv_HeroInformation[13].unitname = "Hero14";
    gv_HeroInformation[13].levelup_upgrade = "HeroLvUp92";
    gv_HeroInformation[13].name = StringExternal("Unit/Name/Hero14");
    gv_HeroInformation[13].ability_resource = c_abilityResourceMana;

    // Moria
    gv_HeroInformation[14].image = "Assets\\AddIcon\\btn-hero15.dds";
    gv_HeroInformation[14].unitname = "Hero15";
    gv_HeroInformation[14].levelup_upgrade = "HeroLvUp52222";
    gv_HeroInformation[14].name = StringExternal("Unit/Name/Hero15");
    gv_HeroInformation[14].ability_resource = c_abilityResourceMana;

    // Niglos
    gv_HeroInformation[15].image = "Assets\\Textures\\btn-unit-zerg-roach.dds";
    gv_HeroInformation[15].unitname = "Hero16";
    gv_HeroInformation[15].levelup_upgrade = "HeroLvUp52223";
    gv_HeroInformation[15].name = StringExternal("Unit/Name/Hero16");
    gv_HeroInformation[15].ability_resource = c_abilityResourceMana;

    // Kelro
    gv_HeroInformation[16].image = "Assets\\Textures\\btn-unit-zerg-aberration.dds";
    gv_HeroInformation[16].unitname = "Hero17";
    gv_HeroInformation[16].levelup_upgrade = "HeroLvUp52224";
    gv_HeroInformation[16].name = StringExternal("Unit/Name/Hero17");
    gv_HeroInformation[16].ability_resource = c_abilityResourceMana;

    // Devola
    gv_HeroInformation[17].image = "Assets\\Textures\\btn-unit-xelnaga-viper.dds";
    gv_HeroInformation[17].unitname = "Hero18";
    gv_HeroInformation[17].levelup_upgrade = "HeroLvUp52225";
    gv_HeroInformation[17].name = StringExternal("Unit/Name/Hero18");
    gv_HeroInformation[17].ability_resource = c_abilityResourceNone;

    // Proward
    gv_HeroInformation[18].image = "Assets\\AddIcon\\btn-hero19.dds";
    gv_HeroInformation[18].unitname = "Hero19";
    gv_HeroInformation[18].levelup_upgrade = "HeroLvUp52226";
    gv_HeroInformation[18].name = StringExternal("Unit/Name/Hero19");
    gv_HeroInformation[18].ability_resource = c_abilityResourceMana;

    // Netero
    gv_HeroInformation[19].image = "Assets\\Textures\\btn-unit-protoss-darktemplar.dds";
    gv_HeroInformation[19].unitname = "Hero20";
    gv_HeroInformation[19].levelup_upgrade = "HeroLvUp52227";
    gv_HeroInformation[19].name = StringExternal("Unit/Name/Hero20");
    gv_HeroInformation[19].ability_resource = c_abilityResourceMana;

    // Celin
    gv_HeroInformation[20].image = "Assets\\AddIcon\\btn-hero21.dds";
    gv_HeroInformation[20].unitname = "Hero21";
    gv_HeroInformation[20].levelup_upgrade = "HeroLvUp332";
    gv_HeroInformation[20].name = StringExternal("Unit/Name/Hero21");
    gv_HeroInformation[20].ability_resource = c_abilityResourceMana;

    // Land Baron
    gv_HeroInformation[21].image = "Assets\\Textures\\btn-unit-terran-thor.dds";
    gv_HeroInformation[21].unitname = "Hero22";
    gv_HeroInformation[21].levelup_upgrade = "HeroLvUp52228";
    gv_HeroInformation[21].name = StringExternal("Unit/Name/Hero22");
    gv_HeroInformation[21].ability_resource = c_abilityResourceMana;

    // Garp
    gv_HeroInformation[22].image = "Assets\\AddIcon\\btn-hero23.dds";
    gv_HeroInformation[22].unitname = "Hero23";
    gv_HeroInformation[22].levelup_upgrade = "HeroLvUp522232";
    gv_HeroInformation[22].name = StringExternal("Unit/Name/Hero23");
    gv_HeroInformation[22].ability_resource = c_abilityResourceMana;

    // Kaion
    gv_HeroInformation[23].image = "Assets\\AddIcon\\btn-hero24.dds";
    gv_HeroInformation[23].unitname = "Hero24";
    gv_HeroInformation[23].levelup_upgrade = "HeroLvUp523";
    gv_HeroInformation[23].name = StringExternal("Unit/Name/Hero24");
    gv_HeroInformation[23].ability_resource = c_abilityResourceMana;

    // Basilisk
    gv_HeroInformation[24].image = "Assets\\Textures\\btn-unit-zerg-hydralisk.dds";
    gv_HeroInformation[24].unitname = "Hero25";
    gv_HeroInformation[24].levelup_upgrade = "HeroLvUp5223";
    gv_HeroInformation[24].name = StringExternal("Unit/Name/Hero25");
    gv_HeroInformation[24].ability_resource = c_abilityResourceMana;

    // Michael
    gv_HeroInformation[25].image = "Assets\\Textures\\btn-unit-terran-medicstetmann.dds";
    gv_HeroInformation[25].unitname = "Hero26";
    gv_HeroInformation[25].levelup_upgrade = "HeroLvUp432";
    gv_HeroInformation[25].name = StringExternal("Unit/Name/Hero26");
    gv_HeroInformation[25].ability_resource = c_abilityResourceMana;

    // Kerberos
    gv_HeroInformation[26].image = "Assets\\Textures\\btn-unit-terran-predator.dds";
    gv_HeroInformation[26].unitname = "Hero27";
    gv_HeroInformation[26].levelup_upgrade = "HeroLvUp322";
    gv_HeroInformation[26].name = StringExternal("Unit/Name/Hero27");
    gv_HeroInformation[26].ability_resource = c_abilityResourceEnergy;

    // Duke
    gv_HeroInformation[27].image = "Assets\\Textures\\btn-unit-terran-firebatmercenary.dds";
    gv_HeroInformation[27].unitname = "Hero28";
    gv_HeroInformation[27].levelup_upgrade = "HeroLvUp522233";
    gv_HeroInformation[27].name = StringExternal("Unit/Name/Hero28");
    gv_HeroInformation[27].ability_resource = c_abilityResourceMana;

    // Neherenia
    gv_HeroInformation[28].image = "Assets\\Textures\\btn-unit-zerg-queen.dds";
    gv_HeroInformation[28].unitname = "Hero29";
    gv_HeroInformation[28].levelup_upgrade = "HeroLvUp522272";
    gv_HeroInformation[28].name = StringExternal("Unit/Name/Hero29");
    gv_HeroInformation[28].ability_resource = c_abilityResourceMana;

    // Xion
    gv_HeroInformation[29].image = "Assets\\AddIcon\\btn-hero30.dds";
    gv_HeroInformation[29].unitname = "Hero30";
    gv_HeroInformation[29].levelup_upgrade = "HeroLvUp3322";
    gv_HeroInformation[29].name = StringExternal("Unit/Name/Hero30");
    gv_HeroInformation[29].ability_resource = c_abilityResourceMana;

    // Bloodius
    gv_HeroInformation[30].image = "Assets\\AddIcon\\btn-hero31.dds";
    gv_HeroInformation[30].unitname = "Hero31";
    gv_HeroInformation[30].levelup_upgrade = "HeroLvUp5224";
    gv_HeroInformation[30].name = StringExternal("Unit/Name/Hero31");
    gv_HeroInformation[30].ability_resource = c_abilityResourceMana;

    // Galvaron
    gv_HeroInformation[31].image = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    gv_HeroInformation[31].unitname = "Hero32";
    gv_HeroInformation[31].levelup_upgrade = "HeroLvUp52229";
    gv_HeroInformation[31].name = StringExternal("Unit/Name/Hero32");
    gv_HeroInformation[31].ability_resource = c_abilityResourceMana;

    // Jernigan
    gv_HeroInformation[32].image = "Assets\\Textures\\btn-unit-rifleman.dds";
    gv_HeroInformation[32].unitname = "Hero33";
    gv_HeroInformation[32].levelup_upgrade = "HeroLvUp34";
    gv_HeroInformation[32].name = StringExternal("Unit/Name/Hero33");
    gv_HeroInformation[32].ability_resource = c_abilityResourceMana;

    // Chorus
    gv_HeroInformation[33].image = "Assets\\Textures\\btn-unit-zerg-infestor.dds";
    gv_HeroInformation[33].unitname = "Hero34";
    gv_HeroInformation[33].levelup_upgrade = "HeroLvUp5232";
    gv_HeroInformation[33].name = StringExternal("Unit/Name/Hero34");
    gv_HeroInformation[33].ability_resource = c_abilityResourceMana;

    // Soul Kaiser
    gv_HeroInformation[34].image = "Assets\\Textures\\btn-unit-protos-soulhunter.dds";
    gv_HeroInformation[34].unitname = "Hero35";
    gv_HeroInformation[34].levelup_upgrade = "HeroLvUp3323";
    gv_HeroInformation[34].name = StringExternal("Unit/Name/Hero35");
    gv_HeroInformation[34].ability_resource = c_abilityResourceMana;

    // Valkyria
    gv_HeroInformation[35].image = "Assets\\AddIcon\\LadyAlexstrasa_Btn.dds";
    gv_HeroInformation[35].unitname = "Hero36";
    gv_HeroInformation[35].levelup_upgrade = "HeroLvUp52232";
    gv_HeroInformation[35].name = StringExternal("Unit/Name/Hero36");
    gv_HeroInformation[35].ability_resource = c_abilityResourceMana;

    // Elzard
    gv_HeroInformation[36].image = "Assets\\AddIcon\\btn-hero37.dds";
    gv_HeroInformation[36].unitname = "Hero37";
    gv_HeroInformation[36].levelup_upgrade = "HeroLvUp222";
    gv_HeroInformation[36].name = StringExternal("Unit/Name/Hero37");
    gv_HeroInformation[36].ability_resource = c_abilityResourceMana;

    // Warcorn
    gv_HeroInformation[37].image = "Assets\\AddIcon\\btn-hero38.dds";
    gv_HeroInformation[37].unitname = "Hero38";
    gv_HeroInformation[37].levelup_upgrade = "HeroLvUp44";
    gv_HeroInformation[37].name = StringExternal("Unit/Name/Hero38");
    gv_HeroInformation[37].ability_resource = c_abilityResourceMana;

    // Dark Ray
    gv_HeroInformation[38].image = "Assets\\Textures\\btn-unit-zerg-broodlord.dds";
    gv_HeroInformation[38].unitname = "Hero39";
    gv_HeroInformation[38].levelup_upgrade = "HeroLvUp522234";
    gv_HeroInformation[38].name = StringExternal("Unit/Name/Hero39");
    gv_HeroInformation[38].ability_resource = c_abilityResourceMana;

    // Lecthor
    gv_HeroInformation[39].image = "Assets\\AddIcon\\btn-hero40.dds";
    gv_HeroInformation[39].unitname = "Hero40";
    gv_HeroInformation[39].levelup_upgrade = "HeroLvUp93";
    gv_HeroInformation[39].name = StringExternal("Unit/Name/Hero40");
    gv_HeroInformation[39].ability_resource = c_abilityResourceMana;

    // Haemosu
    gv_HeroInformation[40].image = "Assets\\Textures\\btn-unit-terran-siegetank.dds";
    gv_HeroInformation[40].unitname = "Hero41";
    gv_HeroInformation[40].levelup_upgrade = "HeroLvUp522262";
    gv_HeroInformation[40].name = StringExternal("Unit/Name/Hero41");
    gv_HeroInformation[40].ability_resource = c_abilityResourceMana;

    // Hera
    gv_HeroInformation[41].image = "Assets\\AddIcon\\btn-hero42.dds";
    gv_HeroInformation[41].unitname = "Hero42";
    gv_HeroInformation[41].levelup_upgrade = "HeroLvUp5222622";
    gv_HeroInformation[41].name = StringExternal("Unit/Name/Hero42");
    gv_HeroInformation[41].ability_resource = c_abilityResourceNone;

    // Zonda
    gv_HeroInformation[42].image = "Assets\\AddIcon\\btn-hero43.dds";
    gv_HeroInformation[42].unitname = "Hero43";
    gv_HeroInformation[42].levelup_upgrade = "HeroLvUp342";
    gv_HeroInformation[42].name = StringExternal("Unit/Name/Hero43");
    gv_HeroInformation[42].ability_resource = c_abilityResourceMana;

    // Liria
    gv_HeroInformation[43].image = "Assets\\AddIcon\\btn-hero44.dds";
    gv_HeroInformation[43].unitname = "Hero44";
    gv_HeroInformation[43].levelup_upgrade = "HeroLvUp932";
    gv_HeroInformation[43].name = StringExternal("Unit/Name/Hero44");
    gv_HeroInformation[43].ability_resource = c_abilityResourceMana;

    // Jelquus
    gv_HeroInformation[44].image = "Assets\\Textures\\btn-unit-protoss-zealot-nerazim.dds";
    gv_HeroInformation[44].unitname = "Hero45";
    gv_HeroInformation[44].levelup_upgrade = "HeroLvUp524";
    gv_HeroInformation[44].name = StringExternal("Unit/Name/Hero45");
    gv_HeroInformation[44].ability_resource = c_abilityResourceMana;

    // Shuirin
    gv_HeroInformation[45].image = "Assets\\AddIcon\\btn-hero46.dds";
    gv_HeroInformation[45].unitname = "Hero46";
    gv_HeroInformation[45].levelup_upgrade = "HeroLvUp3324";
    gv_HeroInformation[45].name = StringExternal("Unit/Name/Hero46");
    gv_HeroInformation[45].ability_resource = c_abilityResourceMana;

    // Govan
    gv_HeroInformation[46].image = "Assets\\AddIcon\\btn-hero47.dds";
    gv_HeroInformation[46].unitname = "Hero47";
    gv_HeroInformation[46].levelup_upgrade = "HeroLvUp5222322";
    gv_HeroInformation[46].name = StringExternal("Unit/Name/Hero47");
    gv_HeroInformation[46].ability_resource = c_abilityResourceMana;

    // Bay Arc
    gv_HeroInformation[47].image = "Assets\\Textures\\btn-unit-protoss-colossus.dds";
    gv_HeroInformation[47].unitname = "Hero48";
    gv_HeroInformation[47].levelup_upgrade = "HeroLvUp5225";
    gv_HeroInformation[47].name = StringExternal("Unit/Name/Hero48");
    gv_HeroInformation[47].ability_resource = c_abilityResourceMana;

    // Deken
    gv_HeroInformation[48].image = "Assets\\AddIcon\\btn-hero49.dds";
    gv_HeroInformation[48].unitname = "Hero49";
    gv_HeroInformation[48].levelup_upgrade = "HeroLvUp5222342";
    gv_HeroInformation[48].name = StringExternal("Unit/Name/Hero49");
    gv_HeroInformation[48].ability_resource = c_abilityResourceEnergy;

    // Zero
    gv_HeroInformation[49].image = "Assets\\AddIcon\\btn-hero50.dds";
    gv_HeroInformation[49].unitname = "Hero50";
    gv_HeroInformation[49].levelup_upgrade = "HeroLvUp5242";
    gv_HeroInformation[49].name = StringExternal("Unit/Name/Hero50");
    gv_HeroInformation[49].ability_resource = c_abilityResourceMana;

    // Sibarun
    gv_HeroInformation[50].image = "Assets\\AddIcon\\btn-hero51.dds";
    gv_HeroInformation[50].unitname = "Hero51";
    gv_HeroInformation[50].levelup_upgrade = "HeroLvUp33222";
    gv_HeroInformation[50].name = StringExternal("Unit/Name/Hero51");
    gv_HeroInformation[50].ability_resource = c_abilityResourceMana;

    // Daisy
    gv_HeroInformation[51].image = "Assets\\AddIcon\\btn-hero52.dds";
    gv_HeroInformation[51].unitname = "Hero52";
    gv_HeroInformation[51].levelup_upgrade = "HeroLvUp52223422";
    gv_HeroInformation[51].name = StringExternal("Unit/Name/Hero52");
    gv_HeroInformation[51].ability_resource = c_abilityResourceMana;

    // Glan
    gv_HeroInformation[52].image = "Assets\\Textures\\btn-unit-zerg-infestedcolonist.dds";
    gv_HeroInformation[52].unitname = "Hero53";
    gv_HeroInformation[52].levelup_upgrade = "HeroLvUp52223222";
    gv_HeroInformation[52].name = StringExternal("Unit/Name/Hero53");
    gv_HeroInformation[52].ability_resource = c_abilityResourceMana;

    // Voltma
    gv_HeroInformation[53].image = "Assets\\AddIcon\\btn-hero54.dds";
    gv_HeroInformation[53].unitname = "Hero54";
    gv_HeroInformation[53].levelup_upgrade = "HeroLvUp6";
    gv_HeroInformation[53].name = StringExternal("Unit/Name/Hero54");
    gv_HeroInformation[53].ability_resource = c_abilityResourceMana;

    // Bax
    gv_HeroInformation[54].image = "Assets\\AddIcon\\btn-hero55.dds";
    gv_HeroInformation[54].unitname = "Hero55";
    gv_HeroInformation[54].levelup_upgrade = "HeroLvUp522322";
    gv_HeroInformation[54].name = StringExternal("Unit/Name/Hero55");
    gv_HeroInformation[54].ability_resource = c_abilityResourceMana;

    // Grunt
    gv_HeroInformation[55].image = "Assets\\AddIcon\\btn-hero56.dds";
    gv_HeroInformation[55].unitname = "Hero56";
    gv_HeroInformation[55].levelup_upgrade = "HeroLvUp522232222";
    gv_HeroInformation[55].name = StringExternal("Unit/Name/Hero56");
    gv_HeroInformation[55].ability_resource = c_abilityResourceMana;

    // Lene
    gv_HeroInformation[56].image = "Assets\\AddIcon\\btn-hero57.dds";
    gv_HeroInformation[56].unitname = "Hero57";
    gv_HeroInformation[56].levelup_upgrade = "HeroLvUp33242";
    gv_HeroInformation[56].name = StringExternal("Unit/Name/Hero57");
    gv_HeroInformation[56].ability_resource = c_abilityResourceMana;

    // Jango
    gv_HeroInformation[57].image = "Assets\\AddIcon\\btn-hero58.dds";
    gv_HeroInformation[57].unitname = "Hero58";
    gv_HeroInformation[57].levelup_upgrade = "HeroLvUp35";
    gv_HeroInformation[57].name = StringExternal("Unit/Name/Hero58");
    gv_HeroInformation[57].ability_resource = c_abilityResourceMana;

    // Burndress
    gv_HeroInformation[58].image = "Assets\\AddIcon\\btn-hero59.dds";
    gv_HeroInformation[58].unitname = "Hero59";
    gv_HeroInformation[58].levelup_upgrade = "HeroLvUp5223222";
    gv_HeroInformation[58].name = StringExternal("Unit/Name/Hero59");
    gv_HeroInformation[58].ability_resource = c_abilityResourceMana;

    // Bison
    gv_HeroInformation[59].image = "Assets\\AddIcon\\btn-hero60.dds";
    gv_HeroInformation[59].unitname = "Hero60";
    gv_HeroInformation[59].levelup_upgrade = "HeroLvUp52233";
    gv_HeroInformation[59].name = StringExternal("Unit/Name/Hero60");
    gv_HeroInformation[59].ability_resource = c_abilityResourceHeat;

    // Musashi
    gv_HeroInformation[60].image = "Assets\\AddIcon\\btn-hero61.dds";
    gv_HeroInformation[60].unitname = "Hero61";
    gv_HeroInformation[60].levelup_upgrade = "HeroLvUp433";
    gv_HeroInformation[60].name = StringExternal("Unit/Name/Hero61");
    gv_HeroInformation[60].ability_resource = c_abilityResourceMana;

    // Daboto
    gv_HeroInformation[61].image = "Assets\\AddIcon\\btn-hero62.dds";
    gv_HeroInformation[61].unitname = "Hero62";
    gv_HeroInformation[61].levelup_upgrade = "HeroLvUp2222";
    gv_HeroInformation[61].name = StringExternal("Unit/Name/Hero62");
    gv_HeroInformation[61].ability_resource = c_abilityResourceMana;

    // Galleon
    gv_HeroInformation[62].image = "Assets\\AddIcon\\btn-hero63.dds";
    gv_HeroInformation[62].unitname = "Hero63";
    gv_HeroInformation[62].levelup_upgrade = "HeroLvUp522292";
    gv_HeroInformation[62].name = StringExternal("Unit/Name/Hero63");
    gv_HeroInformation[62].ability_resource = c_abilityResourceMana;

    // Wiz
    gv_HeroInformation[63].image = "Assets\\AddIcon\\btn-hero64.dds";
    gv_HeroInformation[63].unitname = "Hero64";
    gv_HeroInformation[63].levelup_upgrade = "HeroLvUp442";
    gv_HeroInformation[63].name = StringExternal("Unit/Name/Hero64");
    gv_HeroInformation[63].ability_resource = c_abilityResourceMana;

    // Mordin
    gv_HeroInformation[64].image = "Assets\\AddIcon\\btn-hero65.dds";
    gv_HeroInformation[64].unitname = "Hero65";
    gv_HeroInformation[64].levelup_upgrade = "HeroLvUp434";
    gv_HeroInformation[64].name = StringExternal("Unit/Name/Hero65");
    gv_HeroInformation[64].ability_resource = c_abilityResourceMana;

    // Demol
    gv_HeroInformation[65].image = "Assets\\AddIcon\\btn-hero66.dds";
    gv_HeroInformation[65].unitname = "Hero66";
    gv_HeroInformation[65].levelup_upgrade = "HeroLvUp5222332";
    gv_HeroInformation[65].name = StringExternal("Unit/Name/Hero66");
    gv_HeroInformation[65].ability_resource = c_abilityResourceMana;

    // Desilba
    gv_HeroInformation[66].image = "Assets\\AddIcon\\btn-hero67.dds";
    gv_HeroInformation[66].unitname = "Hero67";
    gv_HeroInformation[66].levelup_upgrade = "HeroLvUp5222333";
    gv_HeroInformation[66].name = StringExternal("Unit/Name/Hero67");
    gv_HeroInformation[66].ability_resource = c_abilityResourceMana;

    // Sieger
    gv_HeroInformation[67].image = "Assets\\AddIcon\\btn-hero68.dds";
    gv_HeroInformation[67].unitname = "Hero68";
    gv_HeroInformation[67].levelup_upgrade = "HeroLvUp33223";
    gv_HeroInformation[67].name = StringExternal("Unit/Name/Hero68");
    gv_HeroInformation[67].ability_resource = c_abilityResourceMana;

    // Margon
    gv_HeroInformation[68].image = "Assets\\AddIcon\\btn-hero69.dds";
    gv_HeroInformation[68].unitname = "Hero69";
    gv_HeroInformation[68].levelup_upgrade = "HeroLvUp4322";
    gv_HeroInformation[68].name = StringExternal("Unit/Name/Hero69");
    gv_HeroInformation[68].ability_resource = c_abilityResourceMana;

    // Drager
    gv_HeroInformation[69].image = "Assets\\AddIcon\\btn-hero70.dds";
    gv_HeroInformation[69].unitname = "Hero70";
    gv_HeroInformation[69].levelup_upgrade = "HeroLvUp933";
    gv_HeroInformation[69].name = StringExternal("Unit/Name/Hero70");
    gv_HeroInformation[69].ability_resource = c_abilityResourceMana;

    // Lucifer
    gv_HeroInformation[70].image = "Assets\\AddIcon\\btn-hero71.dds";
    gv_HeroInformation[70].unitname = "Hero71";
    gv_HeroInformation[70].levelup_upgrade = "HeroLvUp5222334";
    gv_HeroInformation[70].name = StringExternal("Unit/Name/Hero71");
    gv_HeroInformation[70].ability_resource = c_abilityResourceMana;

    // Eren
    gv_HeroInformation[71].image = "Assets\\AddIcon\\btn-hero72.dds";
    gv_HeroInformation[71].unitname = "Hero72";
    gv_HeroInformation[71].levelup_upgrade = "Hero72Levelup";
    gv_HeroInformation[71].name = StringExternal("Unit/Name/Hero72");
    gv_HeroInformation[71].ability_resource = c_abilityResourceNone;

    // Luna
    gv_HeroInformation[72].image = "Assets\\AddIcon\\btn-hero73.dds";
    gv_HeroInformation[72].unitname = "Hero73";
    gv_HeroInformation[72].levelup_upgrade = "HeroLvUp4422";
    gv_HeroInformation[72].name = StringExternal("Unit/Name/Hero73");
    gv_HeroInformation[72].ability_resource = c_abilityResourceMana;
}

void SkillsInit() {
    int i;
    int j;

    for (i = 0; i <= 18; i += 1) {
        for (j = 0; j < 3; j += 1) {
            gv_MaxSkillLevel[i][j] = libNtve_gf_ArithmeticIntClamp(((i + 1) / 2), 1, 5);
        }
        gv_MaxSkillLevel[i][c_skillR] = libNtve_gf_ArithmeticIntClamp(((i - 1) / 5), 0, 3);
    }

    i = 0;
    // Benderzone
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223334";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223334";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223334";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223334";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223332";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233323";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223332322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233323222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233322";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333222";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223332222";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233322222";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333222222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223333";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233332";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233332";

    i += 1;
    // Blane
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223335";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233353";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333532";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223335322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp222233353222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233352";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333523";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333523";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333523";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333523";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333522";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223335223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223335223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp22223335223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223335223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223335222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233352222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233352222";

    i += 1;
    // Gianter
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233354";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333545";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223335452";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp222233354522";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333545222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333542";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223335422";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233354222";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333542222";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223335422222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333543";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223335432";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233354323";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333543232";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223335432322";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333544";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233354322";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233354322";

    i += 1;
    // Obos
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223335233";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233352333";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333523332";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223335233322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp222233352333222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233352332";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333523323";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223335233232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233352332322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333523323222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333523322";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223335233223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223335233223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp22223335233223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223335233223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223335233222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233352332222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233352332222";

    i += 1;
    // Xolus
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333524";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223335243";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233352432";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333524322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223335243222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223335242";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233352423";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333524232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223335242322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233352423222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233352422";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333524223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333524223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333524223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333524223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333524222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223335242222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223335242222";

    i += 1;
    // Edburn
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223336";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233362";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233362";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp222233362";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp222233362";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233362";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333633";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333633";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333633";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333633";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333632";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223336322";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223336322";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp22223336322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223336322";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223336323";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233363232";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233363232";

    i += 1;
    // Metel
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233364";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333643";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333643";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333643";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333643";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333642";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223336422";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223336422";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336422";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223336422";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223336423";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233364232";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp3";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp32";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp322";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp23";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp232";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp232";

    i += 1;
    // Jade
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp8";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp83";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp83";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp83";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp83";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp82";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp823";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp8232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp82322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp823222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp822";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp8223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp8223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp8223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp8223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp8222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp82222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp822222";

    i += 1;
    // Leinard
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223337";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233373";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333732";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223337322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp28";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233372";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333723";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333723";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333723";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333723";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333722";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223337223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233372232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333722322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223337223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223337222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233372222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233372222";

    i += 1;
    // Venom Bug
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333622";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336222";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233362222";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp10";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp102";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336223";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233362232";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233362232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233362232";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233362232";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233362233";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333622332";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333622332";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333622332";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333622332";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333622333";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336223332";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233362233322";

    i += 1;
    // Galaxia
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233365";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333653";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333653";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333653";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333653";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333652";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223336522";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223336522";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336522";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223336522";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333654";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223336543";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233365432";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333654322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223336543222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223336542";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233365422";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233365422";

    i += 1;
    // Tangky
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223338";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233384";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233384";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp222233384";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp222233384";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233382";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333822";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333822";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333822";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333822";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233383";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333833";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223338332";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233383322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333833222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333832";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223338322";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223338322";

    i += 1;
    // Pyron
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233374";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333742";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223337422";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp13";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp132";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333743";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223337433";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223337433";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223337433";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223337433";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223337432";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233374322";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233374322";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233374322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233374322";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223337434";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233374342";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233374342";

    i += 1;
    // Magner
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333744";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223337443";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223337443";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223337443";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223337443";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223337442";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233374422";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333744222";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223337442222";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233374422222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223337444";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233374443";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233374443";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233374443";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233374443";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233374442";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333744422";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333744422";

    i += 1;
    // Moria
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233366";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333663";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333663";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333663";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333663";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333664";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223336643";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223336643";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336643";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223336643";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223336642";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233366423";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233366423";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233366423";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233366423";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233366422";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333664222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333664222";

    i += 1;
    // Niglos
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233367";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333672";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333672";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333672";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333672";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333634";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223336342";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp34";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp342";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp3422";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223336343";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233363433";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233363433";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233363433";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233363433";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233363432";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333634322";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333634322";

    i += 1;
    // Kelro
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233368";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333683";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333683";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333683";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333683";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333682";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223336823";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223336823";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336823";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223336823";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223336822";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233368223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333682232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp22223336822322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233368223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233368222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333682222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333682222";

    i += 1;
    // Devola
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233369";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333693";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336932";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp222233369322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333693222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333692";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223336923";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223336923";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336923";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223336923";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223336922";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233369223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333692232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp22223336922322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233369223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233369222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333692222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333692222";

    i += 1;
    // Proward
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333610";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336103";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336103";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336103";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336103";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336102";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233361023";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333610232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336102322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233361023222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233361022";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333610223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333610223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333610223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333610223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333610222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336102222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223336102222";

    i += 1;
    // Netero
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233355";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333553";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333553";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333553";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333553";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333552";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233355232";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223335523";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233355233";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333552332";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223335522";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233355223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233355223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233355223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233355223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233355222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333552222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223335522222";

    i += 1;
    // Celin
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223336104";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233361043";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333610432";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336104322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp222233361043222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233361042";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333610423";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223336104232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233361042322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333610423222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333610422";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223336104223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223336104223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp22223336104223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223336104223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223336104222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233361042222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233361042222";

    i += 1;
    // Land Baron
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223336105";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233361053";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233361053";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp222233361053";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp222233361053";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233361052";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333610523";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223336105232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233361052322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333610523222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333610522";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223336105223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233361052232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333610522322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223336105223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223336105222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233361052222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233361052222";

    i += 1;
    // Garp
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223339";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233393";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233393";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp222233393";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp222233393";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233392";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333923";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223339232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233392322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333923222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333922";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223339223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233392232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333922322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223339223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223339222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233392222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333922222";

    i += 1;
    // Kaion
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333611";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336113";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336113";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336113";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336113";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336112";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233361123";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233361123";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233361123";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233361123";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233361122";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333611223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223336112232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233361122322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333611223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333611222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336112222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233361122222";

    i += 1;
    // Basilisk
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233310";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333103";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333103";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333103";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333103";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333102";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223331023";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223331023";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223331023";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223331023";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223331022";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233310223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333102232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp22223331022322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233310223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233310222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333102222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333102222";

    i += 1;
    // Michael
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233375";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333753";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223337532";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp222233375322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333753222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333752";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223337523";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223337523";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223337523";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223337523";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223337522";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233375223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333752232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp22223337522322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233375223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233375222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333752222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223337522222";

    i += 1;
    // Kerberos
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233356";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333563";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223335632";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp222233356322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333563222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333562";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223335623";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233356232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333562322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223335623222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223335622";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233356223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233356223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233356223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233356223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233356222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333562222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223335622222";

    i += 1;
    // Duke
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333612";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336123";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336123";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336123";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336123";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336122";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233361223";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233361223";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233361223";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233361223";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233361222";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333612223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333612223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333612223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333612223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333612222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336122222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233361222222";

    i += 1;
    // Neherenia
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333613";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336133";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336133";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336133";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336133";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336132";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233361323";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233361323";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233361323";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233361323";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233361322";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333613223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223336132232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233361322322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333613223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333613222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336132222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223336132222";

    i += 1;
    // Xion
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333745";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223337453";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233374532";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333745322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223337453222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223337452";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233374523";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233374523";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233374523";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233374523";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233374522";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333745223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333745223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333745223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333745223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333745222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223337452222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223337452222";

    i += 1;
    // Bloodius
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333554";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223335543";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233355432";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333554322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223335543222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223335542";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233355423";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233355423";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233355423";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233355423";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233355422";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333554223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333554223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333554223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333554223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333554222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223335542222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223335542222";

    i += 1;
    // Galvaron
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223339224";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233392243";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333922432";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223339224322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp222233392243222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233392242";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333922424";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333922424";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333922424";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333922424";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333922423";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223339224233";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233392242332";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333922423322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223339224233222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223339224232";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233392242322";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333922423222";

    i += 1;
    // Jernigan
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233311";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333113";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333113";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333113";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333113";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333112";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223331123";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233311232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333112322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223331123222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223331122";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233311223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333112232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp22223331122322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233311223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233311222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333112222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333112222";

    i += 1;
    // Chorus
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333546";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223335463";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233354632";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333546322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223335463222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223335462";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233354623";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233354623";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233354623";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233354623";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233354622";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333546223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223335462232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233354622322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333546223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333546222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223335462222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223335462222";

    i += 1;
    // Soul Kaiser
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333614";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336143";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336143";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336143";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336143";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336142";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233361423";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333614232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336142322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233361423222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233361422";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333614223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223336142232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233361422322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333614223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333614222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336142222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223336142222";

    i += 1;
    // Valkyria
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333615";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336153";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336153";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336153";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336153";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336152";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233361523";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333615232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336152322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233361523222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233361522";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333615223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333615223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333615223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333615223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333615222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336152222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223336152222";

    i += 1;
    // Elzard
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333922425";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223339224253";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223339224253";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223339224253";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223339224253";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223339224252";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233392242523";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233392242523";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233392242523";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233392242523";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233392242522";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333922425223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333922425223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333922425223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333922425223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333922425222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223339224252222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223339224252222";

    i += 1;
    // Warcorn
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333555";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223335553";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223335553";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223335553";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223335553";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223335552";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233355523";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333555232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223335552322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233355523222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233355522";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333555223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223335552232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233355522322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333555223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333555222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223335552222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223335552222";

    i += 1;
    // Dark Ray
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233312";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333123";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333123";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333123";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333123";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333122";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223331223";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223331223";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223331223";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223331223";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223331222";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233312223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333122232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp22223331222322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233312223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233312222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333122222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333122222";

    i += 1;
    // Lecthor
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333556";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223335563";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223335563";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223335563";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223335563";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223335562";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233355623";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333556232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223335562322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233355623222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233355622";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333556223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223335562232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233355622322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333556223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333556222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223335562222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223335562222";

    i += 1;
    // Haemosu
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333616";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336164";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336164";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336164";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336164";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336162";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233361622";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333616222";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336162222";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233361622222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223336163";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233361633";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233361633";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233361633";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233361633";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233361632";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333616322";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223336163222";

    i += 1;
    // Hera
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333617";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336173";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336173";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336173";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336173";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336172";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233361723";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233361723";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233361723";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233361723";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233361722";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333617223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333617223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333617223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333617223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333617222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336172222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233361722222";

    i += 1;
    // Zonda
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333618";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336183";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233361832";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333618322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336183222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336182";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233361823";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333618232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336182322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233361823222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233361822";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333618223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333618223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333618223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333618223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333618222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336182222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233361822222";

    i += 1;
    // Liria
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333619";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336193";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336193";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336193";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336193";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336192";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233361923";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233361923";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233361923";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233361923";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233361922";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333619223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333619223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333619223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333619223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333619222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336192222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233361922222";

    i += 1;
    // Jelquus
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333223";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223332233";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223332233";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223332233";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223332233";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223332232";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233322323";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233322323";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233322323";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233322323";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233322322";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333223223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223332232232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233322322322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333223223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333223222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223332232222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233322322222";

    i += 1;
    // Shuirin
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223332234";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233322344";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233322344";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp222233322344";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp222233322344";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233322342";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333223423";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp22223332234232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233322342322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333223423222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333223422";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223332234223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223332234223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp22223332234223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223332234223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223332234222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233322342222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233322342222";

    i += 1;
    // Govan
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223335544";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233355443";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333554432";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223335544322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp222233355443222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233355442";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333554423";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333554423";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333554423";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333554423";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333554422";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223335544223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233355442232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333554422322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223335544223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223335544222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233355442222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333554422222";

    i += 1;
    // Bay Arc
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333224";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223332243";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233322432";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333224322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223332243222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223332242";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233322423";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333224232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223332242322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233322423222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233322422";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333224223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333224223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333224223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333224223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333224222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223332242222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233322422222";

    i += 1;
    // Deken
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233376";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333763";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333763";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333763";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333763";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333762";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223337624";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233376242";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333762422";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223337624222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223337622";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233376222";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333762222";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp22223337622222";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233376222222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223337623";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233376232";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233376232";

    i += 1;
    // Zero
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223336184";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233361843";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233361843";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp222233361843";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp222233361843";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233361842";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333618423";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333618423";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333618423";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333618423";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333618422";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223336184223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233361842232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333618422322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223336184223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223336184222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233361842222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233361842222";

    i += 1;
    // Sibarun
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233313";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333133";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333133";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333133";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333133";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333132";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223331323";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233313232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333132322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223331323222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223331322";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233313223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333132232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp22223331322322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233313223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233313222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333132222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333132222";

    i += 1;
    // Daisy
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333655";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336553";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233365532";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333655322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336553222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336552";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233365523";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333655232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336552322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233365523222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233365522";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333655223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333655223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333655223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333655223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333655222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336552222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233365522222";

    i += 1;
    // Glan
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333620";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336203";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336203";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336203";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336203";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336202";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233362023";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333620232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336202322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233362023222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233362022";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333620223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223336202232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233362022322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333620223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333620222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336202222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233362022222";

    i += 1;
    // Voltma
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333557";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223335573";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233355732";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333557322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223335573222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223335572";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233355722";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233355722";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233355722";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233355722";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333621";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223336213";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233362132";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333621322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223336213222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp22223336212";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp222233362122";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333621222";

    i += 1;
    // Bax
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233352334";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333523344";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333523344";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333523344";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333523344";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333523342";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223335233423";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233352334232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333523342322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223335233423222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223335233422";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233352334222";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233352334222";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233352334222";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233352334222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333523343";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223335233432";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223335233432";

    i += 1;
    // Grunt
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333623";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336233";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336233";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336233";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336233";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336232";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233362323";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333623232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336232322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233362323222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233362322";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333623223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223336232232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233362322322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333623223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333623222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336232222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223336232222";

    i += 1;
    // Lene
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333624";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336243";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336243";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336243";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336243";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336242";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233362423";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233362423";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233362423";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233362423";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233362422";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333624223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333624223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333624223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333624223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333624222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336242222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223336242222";

    i += 1;
    // Jango
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333225";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223332253";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233322532";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333225322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223332253222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223332252";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233322523";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233322523";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233322523";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233322523";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233322522";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333225223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333225223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333225223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333225223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333225222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223332252222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223332252222";

    i += 1;
    // Burndress
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333625";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336253";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336253";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336253";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336253";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336252";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233362523";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333625232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336252322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233362523222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233362522";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333625223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223336252232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233362522322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333625223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333625222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336252222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223336252222";

    i += 1;
    // Bison
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223336124";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233361244";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233361244";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp222233361244";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp222233361244";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233361242";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333612422";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333612422";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333612422";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333612422";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233361243";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333612432";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333612432";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333612432";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333612432";

    i += 1;
    // Musashi
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333626";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336263";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233362632";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333626322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336263222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336262";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233362623";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233362623";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233362623";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233362623";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233362622";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333626223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333626223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333626223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333626223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333626222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336262222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223336262222";

    i += 1;
    // Daboto
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333627";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336273";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223336273";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223336273";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336273";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336272";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233362723";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233362723";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233362723";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233362723";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233362722";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333627223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333627223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333627223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333627223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333627222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336272222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223336272222";

    i += 1;
    // Galleon
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333558";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223335582";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233355824";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333558242";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223335582422";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233355824222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233355822";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333558222";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223335582222";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233355822222";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333558222222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233355823";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333558232";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223335582322";

    i += 1;
    // Wiz
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333226";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223332262";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223332262";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223332262";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223332262";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333628";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223336283";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233362832";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333628322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223336283222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223336282";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233362823";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233362823";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233362823";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233362823";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233362822";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333628222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333628222";

    i += 1;
    // Mordin
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp222233357";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp2222333573";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp22223335732";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp222233357322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp2222333573222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp2222333572";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp22223335723";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233357232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333572322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp22223335723222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp22223335722";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp222233357223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233357223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233357223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp222233357223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233357222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333572222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333572222";

    i += 1;
    // Demol
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333227";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223332273";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233322732";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333227322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223332273222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223332272";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233322723";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp222233322723";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp222233322723";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233322723";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233322722";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333227222";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333227222";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333227222";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333227222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333227223";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223332272232";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223332272232";

    i += 1;
    // Desilba
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333559";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223335593";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233355932";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333559322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223335593222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223335592";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233355923";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333559232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223335592322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233355923222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233355922";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333559223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223335592232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233355922322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333559223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333559222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223335592222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223335592222";

    i += 1;
    // Sieger
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333114";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223331143";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233311432";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333114322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223331143222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223331142";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233311423";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333114232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223331142322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233311423222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233311422";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333114223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp22223331142232";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp222233311422322";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333114223222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333114222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223331142222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp222233311422222";

    i += 1;
    // Margon
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp2222333629";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp22223336293";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp222233362932";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp2222333629322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp22223336293222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp22223336292";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp222233362923";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333629232";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp22223336292322";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp222233362923222";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp222233362922";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp2222333629223";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp2222333629223";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333629223";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp2222333629223";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333629222";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223336292222";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223336292222";

    i += 1;
    // Drager
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223335510";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233355103";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333551032";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223335510322";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp222233355103222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233355102";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333551024";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333551024";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333551024";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333551024";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333551022";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223335510222";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233355102222";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333551022222";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223335510222222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp2222333551023";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp22223335510232";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp22223335510232";

    i += 1;
    // Lucifer
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "SpellUp22223335511";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "SpellUp222233355112";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "SpellUp2222333551122";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "SpellUp22223335511222";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "SpellUp222233355112222";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "SpellUp222233355113";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "SpellUp2222333551132";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "SpellUp2222333551132";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "SpellUp2222333551132";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "SpellUp2222333551132";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "SpellUp2222333551133";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "SpellUp22223335511332";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "SpellUp222233355113322";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "SpellUp2222333551133222";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "SpellUp22223335511332222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "SpellUp222233355114";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "SpellUp2222333551142";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "SpellUp2222333551142";

    i += 1;
    // Eren
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "Hero72Skill1Learn";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "Hero72Skill1Up";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "Hero72Skill1Up";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "Hero72Skill1Up";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "Hero72Skill1Up";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "Hero72Skill2Learn";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "Hero72Skill2Up";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "Hero72Skill2Up";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "Hero72Skill2Up";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "Hero72Skill2Up";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "Hero72Skill3Learn";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "Hero72Skill3Up";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "Hero72Skill3Up";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "Hero72Skill3Up";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "Hero72Skill3Up";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "Hero72Skill4Learn";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "Hero72Skill4Up";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "Hero72Skill4Up";

    i += 1;
    // Luna
    gv_SkillLevelUpgrades[i][c_skillQ][0] = "Hero73SkillLearn";
    gv_SkillLevelUpgrades[i][c_skillQ][1] = "Hero73SkillLearn2";
    gv_SkillLevelUpgrades[i][c_skillQ][2] = "Hero73SkillLearn2";
    gv_SkillLevelUpgrades[i][c_skillQ][3] = "Hero73SkillLearn2";
    gv_SkillLevelUpgrades[i][c_skillQ][4] = "Hero73SkillLearn2";

    gv_SkillLevelUpgrades[i][c_skillW][0] = "Hero73SkillLearn3";
    gv_SkillLevelUpgrades[i][c_skillW][1] = "Hero73SkillLearn22";
    gv_SkillLevelUpgrades[i][c_skillW][2] = "Hero73SkillLearn22";
    gv_SkillLevelUpgrades[i][c_skillW][3] = "Hero73SkillLearn22";
    gv_SkillLevelUpgrades[i][c_skillW][4] = "Hero73SkillLearn22";

    gv_SkillLevelUpgrades[i][c_skillE][0] = "Hero73SkillLearn32";
    gv_SkillLevelUpgrades[i][c_skillE][1] = "Hero73SkillLearn222";
    gv_SkillLevelUpgrades[i][c_skillE][2] = "Hero73SkillLearn222";
    gv_SkillLevelUpgrades[i][c_skillE][3] = "Hero73SkillLearn222";
    gv_SkillLevelUpgrades[i][c_skillE][4] = "Hero73SkillLearn222";

    gv_SkillLevelUpgrades[i][c_skillR][0] = "Hero73SkillLearn4";
    gv_SkillLevelUpgrades[i][c_skillR][1] = "Hero73SkillLearn223";
    gv_SkillLevelUpgrades[i][c_skillR][2] = "Hero73SkillLearn223";
}

void InitGameParameters() {
    SetDraftChoiceOrder();
    ShopInit();
    HeroInfoInit();
    SkillsInit();
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_HrHeroSelect() {
    int i;
    for (i = 0; i < gv_TotalHeroNum; i += 1) {
        if ((EventDialogControl() == gv_CharChooseWindowBtn[i])) {
            DialogControlSetEnabled(gv_CharChooseWindowBtn[i], PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), false);
            DialogControlSetEnabled(gv_CharChooseWindowBtn[i], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetEnabled(gv_CharChooseWindowImage[i], PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), false);
            DialogControlSetEnabled(gv_CharChooseWindowImage[i], PlayerGroupSingle(EventPlayer()), false);
            gv_CharSelectedImage[EventPlayer()] = gv_HeroInformation[i].image;
            gv_CharSelectedName[EventPlayer()] = gv_HeroInformation[i].name;
            gv_SelectedCharNum[EventPlayer()] = gv_HeroInformation[i].number;
        }
    }
}

void gf_HrHeroTeamSelectSave () {
    int i;
    int j;

    const int total_players = 8;
    const int players_in_team = 4;

    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
        for (i = 1 ; i <= players_in_team ; i += 1 ) {
            if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && 
                (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive) && 
                (gv_PlayerBayul[i] != EventPlayer()) && 
                (gv_SelectedCharNum[EventPlayer()] == gv_SelectedCharNum[gv_PlayerBayul[i]])
                ) {
                    gv_CharSelectedImage[EventPlayer()] = "Assets\\InviButton.dds";
                    gv_CharSelectedName[EventPlayer()] = StringToText("");
                    gv_SelectedCharNum[EventPlayer()] = 0;
            }
        }
    } else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true)) {
            for (j = 5 ; j <= total_players ; j += 1 ) {
                if ((PlayerType(gv_PlayerBayul[j]) == c_playerTypeUser) && 
                    (PlayerStatus(gv_PlayerBayul[j]) == c_playerStatusActive) &&
                    (gv_PlayerBayul[j] != EventPlayer()) && 
                    (gv_SelectedCharNum[EventPlayer()] == gv_SelectedCharNum[gv_PlayerBayul[j]])
                    ) {
                        gv_CharSelectedImage[EventPlayer()] = "Assets\\InviButton.dds";
                        gv_CharSelectedName[EventPlayer()] = StringToText("");
                        gv_SelectedCharNum[EventPlayer()] = 0;
                }
            }
    }
    if ((gv_SelectedCharNum[EventPlayer()] > 0)) {
        if ((EventPlayer() == gv_PlayerBayul[1])) {
            gv_Team1CharNum[0] = gv_SelectedCharNum[EventPlayer()];
        }
        else if ((EventPlayer() == gv_PlayerBayul[2])) {
            gv_Team1CharNum[1] = gv_SelectedCharNum[EventPlayer()];
        }
        else if ((EventPlayer() == gv_PlayerBayul[3])) {
            gv_Team1CharNum[2] = gv_SelectedCharNum[EventPlayer()];
        }
        else if ((EventPlayer() == gv_PlayerBayul[4])) {
            gv_Team1CharNum[3] = gv_SelectedCharNum[EventPlayer()];
        }
        else if ((EventPlayer() == gv_PlayerBayul[5])) {
            gv_Team2CharNum[0] = gv_SelectedCharNum[EventPlayer()];
        }
        else if ((EventPlayer() == gv_PlayerBayul[6])) {
            gv_Team2CharNum[1] = gv_SelectedCharNum[EventPlayer()];
        }
        else if ((EventPlayer() == gv_PlayerBayul[7])) {
            gv_Team2CharNum[2] = gv_SelectedCharNum[EventPlayer()];
        }
        else if ((EventPlayer() == gv_PlayerBayul[8])) {
            gv_Team2CharNum[3] = gv_SelectedCharNum[EventPlayer()];
        }
    }
}

void gf_HrHeroTeamSelectSave2 () {
    int i;
    int j;
    bool banned;

    if ((gv_GameModeVoteValue == true)) {
        DialogControlSetEnabled(gv_CharChooseWindowBtn[(gv_SelectedCharNum[EventPlayer()] - 1)], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_CharChooseWindowImage[(gv_SelectedCharNum[EventPlayer()] - 1)], PlayerGroupAll(), false);
    }

    for (i = 0 ; i < gv_TotalHeroNum ; i += 1 ) {
        banned = false;
        for (j = 0; j < 6; j += 1) {
            if ((i + 1) == gv_BannedCharNum[j]) {
                banned = true;
                break;
            }
        }
        if (banned == true) {
            continue;
        }
        if ((gv_GameModeVoteValue == false) && (PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_SelectedCharNum[gv_PlayerBayul[1]] != (i + 1)) && (gv_SelectedCharNum[gv_PlayerBayul[2]] != (i + 1)) && (gv_SelectedCharNum[gv_PlayerBayul[3]] != (i + 1)) && (gv_SelectedCharNum[gv_PlayerBayul[4]] != (i + 1))) {
            DialogControlSetEnabled(gv_CharChooseWindowBtn[i], GameAttributePlayersForTeam(1), true);
            DialogControlSetEnabled(gv_CharChooseWindowImage[i], GameAttributePlayersForTeam(1), true);
        }
        else if ((gv_GameModeVoteValue == false) && (PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_SelectedCharNum[gv_PlayerBayul[5]] != (i + 1)) && (gv_SelectedCharNum[gv_PlayerBayul[6]] != (i + 1)) && (gv_SelectedCharNum[gv_PlayerBayul[7]] != (i + 1)) && (gv_SelectedCharNum[gv_PlayerBayul[8]] != (i + 1))) {
            DialogControlSetEnabled(gv_CharChooseWindowBtn[i], GameAttributePlayersForTeam(2), true);
            DialogControlSetEnabled(gv_CharChooseWindowImage[i], GameAttributePlayersForTeam(2), true);
        }
        else if ((gv_GameModeVoteValue == true) && (gv_SelectedCharNum[gv_PlayerBayul[1]] != (i + 1)) && (gv_SelectedCharNum[gv_PlayerBayul[2]] != (i + 1)) && (gv_SelectedCharNum[gv_PlayerBayul[3]] != (i + 1)) && (gv_SelectedCharNum[gv_PlayerBayul[4]] != (i + 1)) && (gv_SelectedCharNum[gv_PlayerBayul[5]] != (i + 1)) && (gv_SelectedCharNum[gv_PlayerBayul[6]] != (i + 1)) && (gv_SelectedCharNum[gv_PlayerBayul[7]] != (i + 1)) && (gv_SelectedCharNum[gv_PlayerBayul[8]] != (i + 1))) {
            DialogControlSetEnabled(gv_CharChooseWindowBtn[i], PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_CharChooseWindowImage[i], PlayerGroupAll(), true);
        }
    }
}

void gf_HrDraftSelectRandomRefresh() {
    int i;
    for (i = 0; i < gv_TotalHeroNum; i += 1) {
        if ((gv_SelectedCharNum[EventPlayer()] == gv_HeroInformation[i].number)) {
            gv_CharSelectedImage[EventPlayer()] = gv_HeroInformation[i].image;
            gv_CharSelectedName[EventPlayer()] = gv_HeroInformation[i].name;
        }
    }
}

void gf_HrSpellMake1 () {
    int i;

    for (i = 1 ; i <= 8 ; i += 1 ) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 1)) {
                UnitBehaviorAddPlayer(gv_PlayerHero[gv_PlayerBayul[i]], "SpellDong", gv_PlayerBayul[i], 1);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp", 1);
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp4", 1);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[0], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp2", 1);
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp24", 1);
                UnitSetPropertyFixed(gv_PlayerHero[gv_PlayerBayul[i]], c_unitPropLifeMax, (UnitGetPropertyFixed(gv_PlayerHero[gv_PlayerBayul[i]], c_unitPropLifeMax, c_unitPropCurrent) * 1.3));
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[1], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 3)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp22", 1);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[2], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 4)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp222", 1);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[3], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 5)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp2222", 1);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[4], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 6)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp22222", 1);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[5], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 7)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp22223", 1);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[6], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 8)) {
                if (gv_HeroInformation[gv_SelectedCharNum[gv_PlayerBayul[i]] - 1].ability_resource == c_abilityResourceMana) {
                    UnitBehaviorAddPlayer(gv_PlayerHero[gv_PlayerBayul[i]], "SpellDong5", gv_PlayerBayul[i], 1);
                }
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp223", 1);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[7], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 9)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp222232", 1);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[8], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 10)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp222233", 1);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[9], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 11)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp2222332", 1);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[10], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 12)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp22223322", 1);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[11], gv_PlayerBayul[i]);
                }
            }
        }
    }
}

void gf_HrSpellMake2 () {
    int i;

    for (i = 1 ; i <= 8 ; i += 1 ) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            if ((gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 1)) {
                UnitBehaviorAddPlayer(gv_PlayerHero[gv_PlayerBayul[i]], "SpellDong", gv_PlayerBayul[i], 1);
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp", 2);
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp4", 1);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[0], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 2)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp2", 2);
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp24", 1);
                UnitSetPropertyFixed(gv_PlayerHero[gv_PlayerBayul[i]], c_unitPropLifeMax, (UnitGetPropertyFixed(gv_PlayerHero[gv_PlayerBayul[i]], c_unitPropLifeMax, c_unitPropCurrent) * 1.3));
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[1], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 3)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp22", 2);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[2], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 4)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp222", 2);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[3], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 5)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp2222", 2);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[4], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 6)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp22222", 2);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[5], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 7)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp22223", 2);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[6], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 8)) {
                if (gv_HeroInformation[gv_SelectedCharNum[gv_PlayerBayul[i]] - 1].ability_resource == c_abilityResourceMana) {
                    UnitBehaviorAddPlayer(gv_PlayerHero[gv_PlayerBayul[i]], "SpellDong5", gv_PlayerBayul[i], 1);
                }
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp223", 2);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[7], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 9)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp222232", 2);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[8], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 10)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp222233", 2);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[9], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 11)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp2222332", 2);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[10], gv_PlayerBayul[i]);
                }
            }
            else if ((gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 12)) {
                libNtve_gf_SetUpgradeLevelForPlayer(gv_PlayerBayul[i], "SpellUp22223322", 2);
                if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                    gv_SpellToolTip[gv_PlayerBayul[i]][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[11], gv_PlayerBayul[i]);
                }
            }
        }
    }
}

void gf_HrCharMake() {
    int i;
    int j;

    for (i = 1; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            for (j = 0; j < gv_TotalHeroNum; j += 1) {
                if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == gv_HeroInformation[j].number)) {
                    gv_PlayerReadyUnit[gv_PlayerBayul[i]] = gv_HeroInformation[j].unitname;
                    if ((gv_ReadyClickBoolean[gv_PlayerBayul[i]] == false)) {
                        gv_CharSelectedName[gv_PlayerBayul[i]] = gv_HeroInformation[j].name;
                        gv_CharSelectedImage[gv_PlayerBayul[i]] = gv_HeroInformation[j].image;
                    }
                    break;
                }
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 5)) {
                TriggerEnable(gt_TrTextTailUseHero5Skill4, true);
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 6)) {
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp222233322234", 1);
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 9)) {
                TriggerEnable(gt_TrTextTailUseHero9AttackImpact, true);
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 10)) {
                TriggerEnable(gt_TrHero10Skill4On, true);
                TriggerEnable(gt_TrHero10Skill4Off, true);
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 14)) {
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp2222333222342", 1);
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 15)) {
                TriggerEnable(gt_TrHero15Skill4Use, true);
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 19)) {
                TriggerEnable(gt_TrHero19Death, true);
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 32)) {
                TriggerEnable(gt_TrHero32Skill2Up, true);
                TriggerEnable(gt_TrHero32Skill4On, true);
                TriggerEnable(gt_TrHero32Skill4Off, true);
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 36)) {
                TriggerEnable(gt_TrHero36Skill4RPDown, true);
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 39)) {
                TriggerEnable(gt_TrHero39Skill4On, true);
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 59)) {
                TriggerEnable(gt_TrHero59Skill1Use, true);
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 62)) {
                TriggerEnable(gt_TrHero62Skill3Start, true);
                TriggerEnable(gt_TrHero62Skill3End, true);
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 66)) {
                TriggerEnable(gt_TrHero66PassiveOn, true);
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 72)) {
                TriggerEnable(gt_TrHero66PassiveOn2, true);
            }
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 73)) {
                PlayerCreateEffectPoint(gv_PlayerBayul[i], "Hero73Skill1G", PointFromId(578));
            }
        }
    }
}

void gf_HrCleanUpHeroSelectDialogs () {
    int i;

    DialogDestroy(gv_BeforeStartCounterDialog[0]);
    DialogDestroy(gv_BeforeStartCounterDialog[1]);
    DialogDestroy(gv_CharChooseFullDialog);
    for (i = 0; i <= 7; i += 1) {
        DialogDestroy(gv_CharChooseDialog[i]);
    }
    DialogDestroy(gv_TeamSelectDialog[0]);
    DialogDestroy(gv_TeamSelectDialog[1]);

    gv_BeforeStartCounterDialog[0] = c_invalidDialogId;
    gv_BeforeStartCounterDialog[1] = c_invalidDialogId;
    gv_BeforeStartCounterDialogLabel[0] = c_invalidDialogControlId;
    gv_BeforeStartCounterDialogLabel[1] = c_invalidDialogControlId;
    gv_BeforeStartCounterDialogImage = c_invalidDialogControlId;
    gv_BeforeStartCounterDialogNum = 0;

    gv_CharChooseFullDialog = c_invalidDialogId;
    gv_CharChooseFullDialogImage[0] = c_invalidDialogControlId;
    gv_CharChooseFullDialogImage[1] = c_invalidDialogControlId;
    gv_CharChooseFullDialogLabel = c_invalidDialogControlId;
    for (i = 0; i <= 7; i += 1) {
        gv_CharChooseDialog[i] = c_invalidDialogId;
    }
    gv_CharChooseDialogReadyBtn = c_invalidDialogControlId;
    for (i = 0; i <= 6; i += 1) {
        gv_CharChooseDialogLabel[0] = c_invalidDialogControlId;
    }
    for (i = 0; i <= 14; i += 1) {
        gv_CharChooseDialogImage[i] = c_invalidDialogControlId;
    }
    gv_CharChooseDialogNextBtn[0] = c_invalidDialogControlId;
    gv_CharChooseDialogNextBtn[1] = c_invalidDialogControlId;
    gv_CharChooseDialogNextImage[0] = c_invalidDialogControlId;
    gv_CharChooseDialogNextImage[1] = c_invalidDialogControlId;
    for (i = 0; i <= 84; i += 1) {
        gv_CharChooseWindowBtn[i] = c_invalidDialogControlId;
        gv_CharChooseWindowImage[i] = c_invalidDialogControlId;
    }
    for (i = 0; i <= 4; i += 1) {
        gv_CharChooseWindowRandomBtn[i] = c_invalidDialogControlId;
        gv_CharChooseWindowRandomImage[i] = c_invalidDialogControlId;
    }
    for (i = 0; i <= 11; i += 1) {
        gv_CharChooseWindowSpellBtn[i] = c_invalidDialogControlId;
        gv_CharChooseWindowSpellImage[i] = c_invalidDialogControlId;
    }

    gv_GameModeBtn[0] = c_invalidDialogControlId;
    gv_GameModeBtn[1] = c_invalidDialogControlId;
    gv_GameModeLabel[0] = c_invalidDialogControlId;
    gv_GameModeLabel[1] = c_invalidDialogControlId;
    
    gv_TeamSelectDialog[0] = c_invalidDialogId;
    gv_TeamSelectDialog[1] = c_invalidDialogId;
    for (i = 0; i <= 13; i += 1) {
        gv_TeamSelectDialogImage[i] = c_invalidDialogControlId;
    }
    for (i = 0; i <= 3; i += 1) {
        gv_TeamSelectDialogLabel[i] = c_invalidDialogControlId;
    }
    for (i = 0; i <= 23; i += 1) {
        gv_TeamSelectDialogNemoImage[i] = c_invalidDialogControlId;
    }
    for (i = 0; i <= 11 ; i += 1) {
        gv_TeamSelectBtn[i] = c_invalidDialogControlId;
    }
    for (i = 0; i <= 10; i += 1) {
        gv_TeamSelectDialogPlayerHeroImage[i] = c_invalidDialogControlId;
        gv_TeamSelectDialogPlayerName[i] = c_invalidDialogControlId;
        gv_TeamSelectDialogPlayerBorder[i] = c_invalidDialogControlId;
        gv_TeamSelectDialogPlayerSpellImage1[i] = c_invalidDialogControlId;
        gv_TeamSelectDialogPlayerSpellImage2[i] = c_invalidDialogControlId;
    }
}

void gf_CreateObjectives() {
    int i;
    int j;
    bool primary = true;

    text[4] objectives;
    text[4] descriptions;

    objectives[c_primaryObjectiveDestroyNexus] = StringToText("Destroy the enemy Nexus"); // TODO: Move to external string

    objectives[c_secondaryObjectiveMinions] = StringToText("Kill minions to receive minerals"); // TODO: Move to external string
    objectives[c_secondaryObjectiveShop] = StringToText("Use minerals and gas to buy stats in the shop"); // TODO: Move to external string
    objectives[c_secondaryObjectiveLevels] = StringToText("Level up to upgrade your skills"); // TODO: Move to external string

    descriptions[c_primaryObjectiveDestroyNexus] = StringToText("The Nexus is immune until all the structures in a lane are destroyed"); // TODO: Move to external string

    descriptions[c_secondaryObjectiveMinions] = StringToText("Your hero also receives experience if you stay close to the minion dying"); // TODO: Move to external string
    descriptions[c_secondaryObjectiveShop] = StringToText("The shop is located at the bottom right of your screen, next to the ability card"); // TODO: Move to external string
    descriptions[c_secondaryObjectiveLevels] = StringToText("You also get vespene gas for every level"); // TODO: Move to external string

    for (i = 0; i < 11; i += 1) {
        if (!((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive))) {
            continue;
        }
        if (PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), gv_PlayerBayul[i])) {
            continue;
        }
        for (j = 0; j < 4; j += 1) {
            if (j >= 1) {
                primary = false;
            }
            gv_PlayerObjectives[gv_PlayerBayul[i]][j] = ObjectiveCreateForPlayers(
                objectives[j],
                descriptions[j],
                c_objectiveStateActive,
                primary,
                PlayerGroupSingle(gv_PlayerBayul[i])
            );
        }
    }

    ObjectiveCreateForPlayers(
        StringToText("You are a spectator. Watch the game"), // TODO: Move to external string
        StringToText(""),
        c_objectiveStateActive,
        true,
        GameAttributePlayersForTeam(3)
    );
}

void gf_HrHeroLevelUpLink() {
    int i;

    for (i = 0; i < gv_TotalHeroNum; i += 1) {
        if ((gv_SelectedCharNum[EventPlayer()] == gv_HeroInformation[i].number)) {
            TechTreeUpgradeAddLevel(EventPlayer(), gv_HeroInformation[i].levelup_upgrade, 1);
            break;
        }
    }

    if ((gv_SelectedCharNum[EventPlayer()] == 6)) {
        UnitBehaviorAddPlayer(gv_PlayerHero[EventPlayer()], "DefensePower", EventPlayer(), 1);
    }
    if ((gv_SelectedCharNum[EventPlayer()] == 14)) {
        UnitBehaviorAddPlayer(gv_PlayerHero[EventPlayer()], "Amor2", EventPlayer(), 1);
    }
    if ((gv_SelectedCharNum[EventPlayer()] == 30)) {
        UnitBehaviorAddPlayer(gv_PlayerHero[EventPlayer()], "Hero30Passive", EventPlayer(), 1);
    }
    if ((gv_SelectedCharNum[EventPlayer()] == 47)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Hero47Passive", gv_PlayerHero[EventPlayer()], 1);
    }
}

void gf_HrSkillLearnDialogMake () {
    gv_SkillLearnWindow = DialogControlHookupStandard(
        c_triggerControlTypePanel,
        "UIContainer/SkillPointAllocationWindow"
    );
    gv_SkillLearnWindowButton[c_skillQ] = DialogControlHookupStandard(
        c_triggerControlTypeButton,
        "UIContainer/SkillPointAllocationWindow/ButtonQ"
    );
    gv_SkillLearnWindowButton[c_skillW] = DialogControlHookupStandard(
        c_triggerControlTypeButton,
        "UIContainer/SkillPointAllocationWindow/ButtonW"
    );
    gv_SkillLearnWindowButton[c_skillE] = DialogControlHookupStandard(
        c_triggerControlTypeButton,
        "UIContainer/SkillPointAllocationWindow/ButtonE"
    );
    gv_SkillLearnWindowButton[c_skillR] = DialogControlHookupStandard(
        c_triggerControlTypeButton,
        "UIContainer/SkillPointAllocationWindow/ButtonR"
    );
    gv_SkillLearnWindowLabel = DialogControlHookupStandard(
        c_triggerControlTypeLabel,
        "UIContainer/SkillPointAllocationWindow/Label"
    );

    TriggerAddEventDialogControl(
        gt_SkillPointAllocation,
        c_playerAny,
        gv_SkillLearnWindowButton[c_skillQ],
        c_triggerControlEventTypeClick
    );
    TriggerAddEventDialogControl(
        gt_SkillPointAllocation,
        c_playerAny,
        gv_SkillLearnWindowButton[c_skillW],
        c_triggerControlEventTypeClick
    );
    TriggerAddEventDialogControl(
        gt_SkillPointAllocation,
        c_playerAny,
        gv_SkillLearnWindowButton[c_skillE],
        c_triggerControlEventTypeClick
    );
    TriggerAddEventDialogControl(
        gt_SkillPointAllocation,
        c_playerAny,
        gv_SkillLearnWindowButton[c_skillR],
        c_triggerControlEventTypeClick
    );
}

void gf_LearnSkill(int player_number, int skill) {
    int i;
    int j;
    int hero_number = gv_SelectedCharNum[player_number];
    int hero_level = gv_PlayerLevel[player_number][0];
    int current_skill_level = gv_SkillLevels[player_number][skill];

    // Bison can level up his Q, W and E to 6 and can't level up R
    if (hero_number == 60) {
        if (skill == c_skillR) {
            return;
        }
        else if ((current_skill_level == 5) && (hero_level >= 11)) {
            TechTreeUpgradeAddLevel(player_number, gv_SkillLevelUpgrades[hero_number - 1][skill][4], 1);
            gv_SkillLevels[player_number][skill] += 1;
            gv_AvailableSkillPoints[player_number] -= 1;
            gf_HrSkillLearnWindowClose();
            return;
        }
    }

    // Check needed for hotkey usage
    if (current_skill_level >= gv_MaxSkillLevel[hero_level][skill]) {
        return;
    }

    // Galleon Q needs to add upgrades to his teammates instead of himself
    if ((hero_number == 63) && (skill == c_skillQ) && (current_skill_level > 0)) {
        i = 1;
        j = 4;
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), player_number) == true)) {
            i = 5;
            j = 8;
        }
        for (; i <= j ; i += 1 ) {
            if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp22223335583", 1);
            }
        }
        gv_SkillLevels[player_number][skill] += 1;
        gv_AvailableSkillPoints[player_number] -= 1;
        gf_HrSkillLearnWindowClose();
        return;
    }

    // Add a skill level
    TechTreeUpgradeAddLevel(player_number, gv_SkillLevelUpgrades[hero_number - 1][skill][current_skill_level], 1);
    gv_SkillLevels[player_number][skill] += 1;
    gv_AvailableSkillPoints[player_number] -= 1;

    // Skill passives
    if ((hero_number == 3) && (skill == c_skillE)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "DefensePower", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Amor2", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
    }
    if ((hero_number == 6) && (skill == c_skillE)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "SpellDong3222", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
    }
    if ((hero_number == 7) && (skill == c_skillR) && (current_skill_level == 0)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "AlwaysGold2", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
    }
    if ((hero_number == 10) && (skill == c_skillW) && (current_skill_level == 0)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Hero10Skill3Slow32", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Hero10Skill3Slow322", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
    }
    if ((hero_number == 14) && (skill == c_skillR)) {
        if (current_skill_level == 0) {
            UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Hero14Skill4Passive", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
        } else if (current_skill_level == 1) {
            UnitBehaviorRemovePlayer(gv_PlayerHero[gv_PlayerBayul[player_number]], "Hero14Skill4Passive", player_number, 1);
            UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Hero14Skill4Passive2", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
        } else if (current_skill_level == 2) {
            UnitBehaviorRemovePlayer(gv_PlayerHero[gv_PlayerBayul[player_number]], "Hero14Skill4Passive2", player_number, 1);
            UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Hero14Skill4Passive22", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
        }
    }
    if ((hero_number == 20) && (skill == c_skillR)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "SpellDong3222222635", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
    }
    if ((hero_number == 22) && (skill == c_skillW)) {
        if (current_skill_level == 0) {
            UnitBehaviorAddPlayer(gv_PlayerHero[gv_PlayerBayul[player_number]], "DefensePower", player_number, 3);
            TechTreeUpgradeAddLevel(player_number, "SpellUp222233322234", 3);
        } else {
            UnitBehaviorAddPlayer(gv_PlayerHero[gv_PlayerBayul[player_number]], "DefensePower", player_number, 2);
            TechTreeUpgradeAddLevel(player_number, "SpellUp222233322234", 2);
        }
    }
    if ((hero_number == 25) && (skill == c_skillQ)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Hero25Skill12", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
    }
    if ((hero_number == 38) && (skill == c_skillW) && (current_skill_level == 0)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Hero38Skill233", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
    }
    if ((hero_number == 41) && (skill == c_skillR)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "DefensePower", gv_PlayerHero[gv_PlayerBayul[player_number]], 2);
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Amor2", gv_PlayerHero[gv_PlayerBayul[player_number]], 2);
        TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp222233322234", 2);
        TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333222342", 2);
    }
    if (hero_number == 48) {
        if ((skill == c_skillW) && (current_skill_level == 0)) {
            UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Hero48Skill2Impact3", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
        }
        if (skill == c_skillR) {
            if (current_skill_level == 0) {
                UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "DefensePower", gv_PlayerHero[gv_PlayerBayul[player_number]], 3);
            } else if (current_skill_level == 1) {
                UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "DefensePower", gv_PlayerHero[gv_PlayerBayul[player_number]], 5);
            } else if (current_skill_level == 2) {
                UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "DefensePower", gv_PlayerHero[gv_PlayerBayul[player_number]], 7);
            }
        }
    }
    if ((hero_number == 63) && (skill == c_skillW)) {
        if (current_skill_level == 0) {
            UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Hero63Skill2Passive", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
        } else {
            UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Hero63Skill2Passive2", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
        }
    }
    if ((hero_number == 66) && (skill == c_skillW) && (current_skill_level == 0)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Hero66Skill2", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
    }
    if ((hero_number == 68) && (skill == c_skillW) && (current_skill_level == 0)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Hero68Skill2", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
    }

    gf_HrSkillLearnWindowClose();

    i = gv_PlayerObjectives[gv_PlayerBayul[player_number]][c_secondaryObjectiveLevels];
    if (ObjectiveGetState(i) == c_objectiveStateActive) {
        ObjectiveSetState(i, c_objectiveStateCompleted);
        gf_RemoveCompletedSecondaryObjectives();
    }
}

void gf_HrSkillLearnWindowOpen () {
    // Display the available skill points
    libNtve_gf_SetDialogItemText(
        gv_SkillLearnWindowLabel,
        (
            StringToText("<s val=\"SkillPointLabel\">") +
            TextWithColor(IntToText(gv_AvailableSkillPoints[EventPlayer()]), Color(100.0, 100.0, 100.0)) +
            StringToText("</s>")
        ),
        PlayerGroupSingle(EventPlayer())
    );

    if (gv_AvailableSkillPoints[EventPlayer()] <= 0) {
        return;
    }
    // Enable every button if skill is available for level up
    if (gv_SkillLevels[EventPlayer()][c_skillQ] < gv_MaxSkillLevel[gv_PlayerLevel[EventPlayer()][0]][c_skillQ]) {
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillQ], PlayerGroupSingle(EventPlayer()), true);
    }
    if (gv_SkillLevels[EventPlayer()][c_skillW] < gv_MaxSkillLevel[gv_PlayerLevel[EventPlayer()][0]][c_skillW]) {
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillW], PlayerGroupSingle(EventPlayer()), true);
    }
    if (gv_SkillLevels[EventPlayer()][c_skillE] < gv_MaxSkillLevel[gv_PlayerLevel[EventPlayer()][0]][c_skillE]) {
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillE], PlayerGroupSingle(EventPlayer()), true);
    }
    if (gv_SkillLevels[EventPlayer()][c_skillR] < gv_MaxSkillLevel[gv_PlayerLevel[EventPlayer()][0]][c_skillR]) {
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillR], PlayerGroupSingle(EventPlayer()), true);
    }

    // Bison can level up skills to 6
    if (gv_SelectedCharNum[EventPlayer()] == 60) {
        if ((gv_SkillLevels[EventPlayer()][c_skillQ] == 5) && (gv_PlayerLevel[EventPlayer()][0] >= 11)) {
            DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillQ], PlayerGroupSingle(EventPlayer()), true);
        }
        if ((gv_SkillLevels[EventPlayer()][c_skillW] == 5) && (gv_PlayerLevel[EventPlayer()][0] >= 11)) {
            DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillW], PlayerGroupSingle(EventPlayer()), true);
        }
        if ((gv_SkillLevels[EventPlayer()][c_skillE] == 5) && (gv_PlayerLevel[EventPlayer()][0] >= 11)) {
            DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillE], PlayerGroupSingle(EventPlayer()), true);
        }
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillR], PlayerGroupSingle(EventPlayer()), false);
    }
    DialogControlSetVisible(gv_SkillLearnWindow, PlayerGroupSingle(EventPlayer()), true);
}

void gf_HrSkillLearnWindowClose () {
    // Display the available skill points
    libNtve_gf_SetDialogItemText(
        gv_SkillLearnWindowLabel,
        (
            StringToText("<s val=\"SkillPointLabel\">") +
            TextWithColor(IntToText(gv_AvailableSkillPoints[EventPlayer()]), Color(100.0, 100.0, 100.0)) +
            StringToText("</s>")
        ),
        PlayerGroupSingle(EventPlayer())
    );

    // If no more skill points, disable everything and hide the dialog
    if ((gv_AvailableSkillPoints[EventPlayer()] == 0)) {
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillQ], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillW], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillE], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillR], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_SkillLearnWindow, PlayerGroupSingle(EventPlayer()), false);
        return;
    }

    // Otherwise enable and disable buttons as necessary
    if (gv_SkillLevels[EventPlayer()][c_skillQ] < gv_MaxSkillLevel[gv_PlayerLevel[EventPlayer()][0]][c_skillQ]) {
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillQ], PlayerGroupSingle(EventPlayer()), true);
    } else {
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillQ], PlayerGroupSingle(EventPlayer()), false);
    }

    if (gv_SkillLevels[EventPlayer()][c_skillW] < gv_MaxSkillLevel[gv_PlayerLevel[EventPlayer()][0]][c_skillW]) {
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillW], PlayerGroupSingle(EventPlayer()), true);
    } else {
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillW], PlayerGroupSingle(EventPlayer()), false);
    }

    if (gv_SkillLevels[EventPlayer()][c_skillE] < gv_MaxSkillLevel[gv_PlayerLevel[EventPlayer()][0]][c_skillE]) {
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillE], PlayerGroupSingle(EventPlayer()), true);
    } else {
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillE], PlayerGroupSingle(EventPlayer()), false);
    }

    if (gv_SkillLevels[EventPlayer()][c_skillR] < gv_MaxSkillLevel[gv_PlayerLevel[EventPlayer()][0]][c_skillR]) {
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillR], PlayerGroupSingle(EventPlayer()), true);
    } else {
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillR], PlayerGroupSingle(EventPlayer()), false);
    }

    // Bison can level up skills to 6
    if (gv_SelectedCharNum[EventPlayer()] == 60) {
        if ((gv_SkillLevels[EventPlayer()][c_skillQ] == 5) && (gv_PlayerLevel[EventPlayer()][0] >= 11)) {
            DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillQ], PlayerGroupSingle(EventPlayer()), true);
        }
        if ((gv_SkillLevels[EventPlayer()][c_skillW] == 5) && (gv_PlayerLevel[EventPlayer()][0] >= 11)) {
            DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillW], PlayerGroupSingle(EventPlayer()), true);
        }
        if ((gv_SkillLevels[EventPlayer()][c_skillE] == 5) && (gv_PlayerLevel[EventPlayer()][0] >= 11)) {
            DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillE], PlayerGroupSingle(EventPlayer()), true);
        }
        DialogControlSetEnabled(gv_SkillLearnWindowButton[c_skillR], PlayerGroupSingle(EventPlayer()), false);
    }
}

void gf_SpawnHero(int player_number, int hero_number) {
    int i;
    int position = 194;
    string[8] assist_upgrade;
    string[8] recall_upgrade;

    if (PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), player_number)) {
        position = 195;
    }

    gv_SelectedCharNum[gv_PlayerBayul[player_number]] = hero_number;
    gv_PlayerReadyUnit[gv_PlayerBayul[player_number]] = gv_HeroInformation[hero_number - 1].unitname;
    gv_CharSelectedName[gv_PlayerBayul[player_number]] = gv_HeroInformation[hero_number - 1].name;
    gv_CharSelectedImage[gv_PlayerBayul[player_number]] = gv_HeroInformation[hero_number - 1].image;

    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 5)) {
        TriggerEnable(gt_TrTextTailUseHero5Skill4, true);
    }
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 6)) {
        TechTreeUpgradeAddLevel(gv_PlayerBayul[player_number], "SpellUp222233322234", 1);
    }
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 9)) {
        TriggerEnable(gt_TrTextTailUseHero9AttackImpact, true);
    }
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 10)) {
        TriggerEnable(gt_TrHero10Skill4On, true);
        TriggerEnable(gt_TrHero10Skill4Off, true);
    }
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 14)) {
        TechTreeUpgradeAddLevel(gv_PlayerBayul[player_number], "SpellUp2222333222342", 1);
    }
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 15)) {
        TriggerEnable(gt_TrHero15Skill4Use, true);
    }
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 19)) {
        TriggerEnable(gt_TrHero19Death, true);
    }
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 32)) {
        TriggerEnable(gt_TrHero32Skill2Up, true);
        TriggerEnable(gt_TrHero32Skill4On, true);
        TriggerEnable(gt_TrHero32Skill4Off, true);
    }
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 36)) {
        TriggerEnable(gt_TrHero36Skill4RPDown, true);
    }
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 39)) {
        TriggerEnable(gt_TrHero39Skill4On, true);
    }
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 59)) {
        TriggerEnable(gt_TrHero59Skill1Use, true);
    }
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 62)) {
        TriggerEnable(gt_TrHero62Skill3Start, true);
        TriggerEnable(gt_TrHero62Skill3End, true);
    }
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 66)) {
        TriggerEnable(gt_TrHero66PassiveOn, true);
    }
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 72)) {
        TriggerEnable(gt_TrHero66PassiveOn2, true);
    }
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 73)) {
        PlayerCreateEffectPoint(gv_PlayerBayul[player_number], "Hero73Skill1G", PointFromId(578));
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_PlayerReadyUnit[gv_PlayerBayul[player_number]], 0, gv_PlayerBayul[player_number], PointFromId(position));
    gv_PlayerHero[gv_PlayerBayul[player_number]] = UnitLastCreated();
    CameraPan(gv_PlayerBayul[player_number], PointFromId(position), 0.0, -1, 10, false);
    UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "Toherodamage", gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
    UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], "SpellDong2423", gv_PlayerHero[gv_PlayerBayul[player_number]], 2);

    if ((gv_SelectedSpellNum1[gv_PlayerBayul[player_number]] == 8) || (gv_SelectedSpellNum2[gv_PlayerBayul[player_number]] == 8)) {
        if (gv_HeroInformation[gv_SelectedCharNum[gv_PlayerBayul[player_number]] - 1].ability_resource == c_abilityResourceMana) {
            UnitBehaviorAddPlayer(gv_PlayerHero[gv_PlayerBayul[player_number]], "SpellDong5", gv_PlayerBayul[player_number], 1);
        }
    }

    assist_upgrade[0] = "Player1Assist2";
    assist_upgrade[1] = "Player1Assist22";
    assist_upgrade[2] = "Player1Assist222";
    assist_upgrade[3] = "Player1Assist2222";
    assist_upgrade[4] = "Player1Assist22222";
    assist_upgrade[5] = "Player1Assist222222";
    assist_upgrade[6] = "Player1Assist2222222";
    assist_upgrade[7] = "Player1Assist22222222";

    recall_upgrade[0] = "PortalBuy23";
    recall_upgrade[1] = "PortalBuy232";
    recall_upgrade[2] = "PortalBuy2322";
    recall_upgrade[3] = "PortalBuy23222";
    recall_upgrade[4] = "PortalBuy232222";
    recall_upgrade[5] = "PortalBuy2322222";
    recall_upgrade[6] = "PortalBuy23222222";
    recall_upgrade[7] = "PortalBuy232222222";

    UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[player_number]], assist_upgrade[player_number - 1], gv_PlayerHero[gv_PlayerBayul[player_number]], 1);
    TechTreeUpgradeAddLevel(gv_PlayerBayul[player_number], recall_upgrade[player_number - 1], 1);
}

void gf_HrStatDialogMake1a () {
    int i;
    int j;
    int current_button_num;
    int stat_x_offset_left;
    int stat_x_offset_right;
    int stat_y_offset;
    string current_page_name;
    string current_button_name;

    stat_x_offset_left = 29;
    stat_x_offset_right = 134;
    stat_y_offset = 20;

    gv_StatShopDialog = DialogControlHookupStandard(
        c_triggerControlTypePanel,
        "UIContainer/StatShop"
    );

    gv_StatShopNextPageDummyButton = DialogControlHookupStandard(
        c_triggerControlTypeButton,
        "UIContainer/NextPageDummyButton"
    );

    for (i = 0; i < 5; i += 1) {
        gv_StatShopPageButton[i] = DialogControlHookupStandard(
            c_triggerControlTypeButton,
            "UIContainer/StatShop/PageButton" + IntToString(i + 1)
        );

        current_page_name = "UIContainer/StatShop/ShopPageFrame" + IntToString(i + 1);

        gv_StatShopPage[i] = DialogControlHookupStandard(
            c_triggerControlTypePanel,
            current_page_name
        );

        for (j = 0; j < 6; j += 1) {
            current_button_num = i * 6 + j;
            current_button_name = current_page_name + "/Button" + IntToString(j + 1);

            gv_StatShopButton[current_button_num] = DialogControlHookupStandard(
                c_triggerControlTypeButton,
                current_button_name + "/ShopButton"
            );
            gv_StatShopItemLabel[current_button_num] = DialogControlHookupStandard(
                c_triggerControlTypeLabel,
                current_button_name + "/Label"
            );
        }
    }

    gv_SelectionLockButton = DialogControlHookupStandard(
        c_triggerControlTypeButton,
        "UIContainer/SelectionLockButton"
    );

    gv_RemoveObjectivesButton = DialogControlHookupStandard(
        c_triggerControlTypeButton,
        "UIContainer/RemoveObjectivesButton"
    );

    gv_CenterCameraOnHeroDummyButton = DialogControlHookupStandard(
        c_triggerControlTypeButton,
        "UIContainer/CenterCameraDummyButton"
    );

    TriggerAddEventDialogControl(gt_ChangeShopPage, c_playerAny, gv_StatShopNextPageDummyButton, c_triggerControlEventTypeClick);
    for (i = 0; i < 5; i += 1) {
        TriggerAddEventDialogControl(gt_ChangeShopPage, c_playerAny, gv_StatShopPageButton[i], c_triggerControlEventTypeClick);
    }

    for (i = 0; i < 30; i += 1) {
        TriggerAddEventDialogControl(gt_TrStatDialogStatIncrease, c_playerAny, gv_StatShopButton[i], c_triggerControlEventTypeClick);
    }

    DialogCreate(270, 284, c_anchorBottomRight, 408, -10, true);
    gv_StatusWindow = DialogLastCreated();
    DialogSetImageVisible(gv_StatusWindow, false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 220, 250, c_anchorCenter, 0, 0, StringToText(""), "Assets\\blackbg.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowImage[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 250, 290, c_anchorCenter, 0, 5, StringToText(""), "Assets\\Textures\\ui_chat_frame_protoss.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowImage[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/0F6E4246") + IntToText(gv_StatHowMoney[0][0]) + StringExternal("Param/Value/891B282F")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel3.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/74423AD9") + IntToText(gv_StatHowMoney[1][0]) + StringExternal("Param/Value/8088D325")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-upgrade-protoss-airweaponslevel3.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[1] = DialogControlLastCreated();
    stat_y_offset += 65;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/B762C11C") + IntToText(gv_StatHowMoney[2][0]) + StringExternal("Param/Value/A6B27F25")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/793ADEEF") + IntToText(gv_StatHowMoney[3][0]) + StringExternal("Param/Value/A8695773")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-upgrade-protoss-airarmorlevel3.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[3] = DialogControlLastCreated();
    stat_y_offset += 65;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/56C3945D") + IntToText(gv_StatHowMoney[4][0]) + StringExternal("Param/Value/127C08B6")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-upgrade-terran-caduceusreactor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/E47F7098") + IntToText(gv_StatHowMoney[5][0]) + StringExternal("Param/Value/C8B41D66")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-upgrade-protoss-graviticbooster.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 45, c_anchorBottomLeft, 33, 22, StringExternal("Param/Value/194E30BE"), StringExternal("Param/Value/0A92B612"), "Assets\\Textures\\protoss-border-button-game.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_StatusWindowPageBtn[0] = DialogControlLastCreated();
    DialogControlSetEnabled(gv_StatusWindowPageBtn[0], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 45, c_anchorBottomLeft, 73, 22, StringExternal("Param/Value/FBD5DF0F"), StringExternal("Param/Value/5535F4B9"), "Assets\\Textures\\protoss-border-button-game.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_StatusWindowPageBtn[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 45, c_anchorBottomLeft, 113, 22, StringExternal("Param/Value/CF1BBA4C"), StringExternal("Param/Value/DBC83AA6"), "Assets\\Textures\\protoss-border-button-game.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_StatusWindowPageBtn[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 45, c_anchorBottomLeft, 153, 22, StringExternal("Param/Value/7EE239FC"), StringExternal("Param/Value/5737A71A"), "Assets\\Textures\\protoss-border-button-game.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_StatusWindowPageBtn[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 45, c_anchorBottomLeft, 193, 22, StringExternal("Param/Value/1598FBB3"), StringExternal("Param/Value/E294E7CE"), "Assets\\Textures\\protoss-border-button-game.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_StatusWindowPageBtn[4] = DialogControlLastCreated();
}

void gf_HrStatDialogMake2a () {
    int stat_x_offset_left;
    int stat_x_offset_right;
    int stat_y_offset;

    stat_x_offset_left = 29;
    stat_x_offset_right = 134;
    stat_y_offset = 20;

    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/105F4D99") + IntToText(gv_StatHowMoney[6][0]) + StringExternal("Param/Value/71ED1578")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[6] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-upgrade-terran-corvidreactor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[6] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/B52C4DBD") + IntToText(gv_StatHowMoney[7][0]) + StringExternal("Param/Value/4B39A3DF")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[7] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-upgrade-terran-moebiusreactor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[7] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    stat_y_offset += 65;
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/25D75730") + IntToText(gv_StatHowMoney[8][0]) + StringExternal("Param/Value/FED58AF3")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[8] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-tips-terran-penetrator.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[8] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/0D38B383") + IntToText(gv_StatHowMoney[9][0]) + StringExternal("Param/Value/9FB47B93")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[9] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-ability-protoss-blinkshieldrestore.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[9] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    stat_y_offset += 65;
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/BC0C4F6D") + IntToText(gv_StatHowMoney[10][0]) + StringExternal("Param/Value/2CC75CD2")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[10] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-research-terran-commandcenterreactor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[10] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/45A143F6") + IntToText(gv_StatHowMoney[11][0]) + StringExternal("Param/Value/A214EC24")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[11] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\AddIcon\\btn-ability-terran-yamatocannon-ultra-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[11] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
}

void gf_HrStatDialogMake3a2 () {
    int stat_x_offset_left;
    int stat_x_offset_right;
    int stat_y_offset;

    stat_x_offset_left = 29;
    stat_x_offset_right = 134;
    stat_y_offset = 20;

    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_zerg_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/FED2E4BB") + IntToText(gv_StatHowMoney[12][0]) + StringExternal("Param/Value/5BD409C6")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_zerg_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[12] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-ability-hornerhan-mechbioweaponupgrades-c.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[12] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_zerg_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/99E0EBC2") + IntToText(gv_StatHowMoney[13][0]) + StringExternal("Param/Value/3E972BDA")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_zerg_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[13] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-ability-mengsk-siegetank-shockandawe.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[13] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    stat_y_offset += 65;
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_zerg_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/5E89B444") + IntToText(gv_StatHowMoney[14][0]) + StringExternal("Param/Value/ED07ED74")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_zerg_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[14] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-ability-hornerhan-hellbat-fear.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[14] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_zerg_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/BE23B6F8") + IntToText(gv_StatHowMoney[15][0]) + StringExternal("Param/Value/C46BC4C8")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_zerg_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[15] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-ability-mengsk-ghost-staticempblast.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[15] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    stat_y_offset += 65;
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_zerg_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/E0BA54A0") + IntToText(gv_StatHowMoney[16][0]) + StringExternal("Param/Value/067028AD")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_zerg_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[16] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-ability-kerrigan-malignantcreep.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[16] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_zerg_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/63C1F55F") + IntToText(gv_StatHowMoney[17][0]) + StringExternal("Param/Value/864F237F")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_zerg_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[17] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-ability-mengsk-viking-cheatdeath.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[17] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
}

void gf_HrStatDialogMake3a () {
    int stat_x_offset_left;
    int stat_x_offset_right;
    int stat_y_offset;

    stat_x_offset_left = 29;
    stat_x_offset_right = 134;
    stat_y_offset = 20;

    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/2E68C9BA") + IntToText(gv_StatHowMoney[18][0]) + StringExternal("Param/Value/11CDAC01")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[18] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-tips-sellzergbiosamples.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[18] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/5936EEEA") + IntToText(gv_StatHowMoney[19][0]) + StringExternal("Param/Value/0EC8098E")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[19] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-tips-sellprotossartifacts.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[19] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    stat_y_offset += 65;
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/2F67E042") + IntToText(gv_StatHowMoney[20][0]) + StringExternal("Param/Value/3308F27F")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[20] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\AddIcon\\btn-custom-terran-engine.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[20] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/FD3563C7") + IntToText(gv_StatHowMoney[21][0]) + StringExternal("Param/Value/777978E1")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[21] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-upgrade-terran-jotunboosters.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[21] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    stat_y_offset += 65;
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/18EE85FD") + IntToText(gv_StatHowMoney[22][0]) + StringExternal("Param/Value/97B7197B")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[22] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-ability-protoss-hardenedshields-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[22] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/707486D0") + IntToText(gv_StatHowMoney[23][0]) + StringExternal("Param/Value/74F45D38")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[23] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-upgrade-terran-behemothreactor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[23] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
}

void gf_HrStatDialogMake4a () {
    int stat_x_offset_left;
    int stat_x_offset_right;
    int stat_y_offset;

    stat_x_offset_left = 29;
    stat_x_offset_right = 134;
    stat_y_offset = 20;

    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/E8EEDC9A") + IntToText(gv_StatHowMoney[24][0]) + StringExternal("Param/Value/F921592A")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[24] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\AddIcon\\btn-items-postion.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[24] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/56E70969") + IntToText(gv_StatHowMoney[25][0]) + StringExternal("Param/Value/829AA365")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[25] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\AddIcon\\btn-items-postion2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[25] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    stat_y_offset += 65;
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/CB424073") + IntToText(gv_StatHowMoney[26][0]) + StringExternal("Param/Value/0A92B03F")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[26] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\Textures\\btn-building-protoss-obelisk.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[26] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/4B152A48") + IntToText(gv_StatHowMoney[27][0]) + StringExternal("Param/Value/F0642B8D")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[27] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\AddIcon\\btn-ability-zerg-domination-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[27] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    stat_y_offset += 65;
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_left, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/581492DB") + IntToText(gv_StatHowMoney[28][0]) + StringExternal("Param/Value/7037D2B3")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[28] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_left + 10), (stat_y_offset + 10), StringToText(""), "Assets\\AddIcon\\btn-items-pwpotion.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[28] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_StatusWindow, 70, 70, c_anchorTopLeft, stat_x_offset_right, stat_y_offset, StringToText(""), StringToText(""), "Assets\\Textures\\ui_glossary_strongagainst_protoss_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/09E4F027") + IntToText(gv_StatHowMoney[29][0]) + StringExternal("Param/Value/B72DF259")), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_gloassary_stongagainst_protoss_normaloverandpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_StatusWindowBtn[29] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_StatusWindow, 52, 52, c_anchorTopLeft, (stat_x_offset_right + 10), (stat_y_offset + 10), StringToText(""), "Assets\\AddIcon\\btn-items-blackpotion.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_StatusWindowBtnImage[29] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
}

void gf_HrStatMoneySet () {
    int i;
    int j;

    for (i = 0; i < 30; i += 1) {
        for (j = 0; j < 12 ; j += 1 ) {
            gv_StatHowMoney[i][j] = gv_ShopItemParameters[i].minerals_cost;
        }
    }
}

static void lf_ShopObjectiveCompletion() {
    int objective = gv_PlayerObjectives[gv_PlayerBayul[EventPlayer()]][c_secondaryObjectiveShop];
    if (ObjectiveGetState(objective) == c_objectiveStateActive) {
        ObjectiveSetState(objective, c_objectiveStateCompleted);
    }
    gf_RemoveCompletedSecondaryObjectives();
}

static void lf_PayCostsForShopItem(int shop_index) {
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, gv_StatHowMoney[shop_index][EventPlayer()]);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSubtract, gv_ShopItemParameters[shop_index].gas_cost);
    gv_StatHowMoney[shop_index][EventPlayer()] += gv_ShopItemParameters[shop_index].minerals_increase;
}

static void lf_ShopRelatedChecks(int shop_index) {
    // Disable the button at maximum upgrades
    if ((gv_StatIncreasesBought[EventPlayer()][shop_index] >= gv_ShopItemParameters[shop_index].max_upgrades)) {
        DialogControlSetEnabled(gv_StatShopButton[shop_index], PlayerGroupSingle(EventPlayer()), false);
    }
    lf_ShopObjectiveCompletion();
}

void gf_HrStat1 () {
    const int shop_index = 0;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "SpellDong24", gv_PlayerHero[EventPlayer()], 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp222233322232", 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333222323", 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333222322", 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/65A12297") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/504C5FDC")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/16A3EF70") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/92DCA530")), PlayerGroupSingle(EventPlayer()));
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat2 () {
    const int shop_index = 1;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "SpellDong24233", gv_PlayerHero[EventPlayer()], 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp22223332223", 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp222233322233", 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333222333", 1);
    if ((gv_SelectedCharNum[EventPlayer()] == 71)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Hero71Passive", gv_PlayerHero[EventPlayer()], 1);
    }
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/630A62CE") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/1E37331F")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/656F7482") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/D7E1C95B")), PlayerGroupSingle(EventPlayer()));
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat3 () {
    const int shop_index = 2;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "DefensePower", gv_PlayerHero[EventPlayer()], 4);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp222233322234", 4);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/2F79A13D") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/D52A61AD")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/3E816046") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/960D2C83")), PlayerGroupSingle(EventPlayer()));
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat4 () {
    const int shop_index = 3;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Amor2", gv_PlayerHero[EventPlayer()], 4);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333222342", 4);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/2ACCA46C") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/435BBCB2")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/1CF49202") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/64B96C4D")), PlayerGroupSingle(EventPlayer()));
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat5 () {
    const int shop_index = 4;
    // Upgrade
    UnitSetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropLifeMax, (UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropLifeMax, c_unitPropCurrent) + 100.0));    
    TechTreeUpgradeAddLevel(EventPlayer(), "HeroLvUp422", 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/5567282B") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/4BCFA2C0")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/2013D8A0") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/77C9F250")), PlayerGroupSingle(EventPlayer()));
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat6 () {
    const int shop_index = 5;
    if (gv_HeroInformation[gv_SelectedCharNum[EventPlayer()] - 1].ability_resource == c_abilityResourceMana) {
        // Upgrade
        UnitSetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropEnergyMax, (UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropEnergyMax, c_unitPropCurrent) + 75.0));
        TechTreeUpgradeAddLevel(EventPlayer(), "HeroLvUp42", 1);
        // Shop Changes
        gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
        libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/18DF7C33") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/266C386E")), PlayerGroupSingle(EventPlayer()));
        lf_PayCostsForShopItem(shop_index);
        libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/836385E4") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/FDACEA09")), PlayerGroupSingle(EventPlayer()));
        lf_ShopRelatedChecks(shop_index);
    } else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/A72FF288"));
    }
}

void gf_HrStat7 () {
    const int shop_index = 6;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "SpellDong24222", gv_PlayerHero[EventPlayer()], 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/A56E3141") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/2BAF824D")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/3B9EF42D") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/C7535C3C")), PlayerGroupSingle(EventPlayer()));
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat8 () {
    const int shop_index = 7;
    if (gv_HeroInformation[gv_SelectedCharNum[EventPlayer()] - 1].ability_resource == c_abilityResourceMana) {
        // Upgrade
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "SpellDong2422", gv_PlayerHero[EventPlayer()], 1);
        // Shop Changes
        gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
        libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/0BA6465C") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/7D802EEE")), PlayerGroupSingle(EventPlayer()));
        lf_PayCostsForShopItem(shop_index);
        libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/BEA13735") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/3E68978B")), PlayerGroupSingle(EventPlayer()));
        lf_ShopRelatedChecks(shop_index);
    } else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/A72FF288"));
    }
}

void gf_HrStat9 () {
    const int shop_index = 8;
    // Upgrade
    gf_HrAttackSpeedLevelIncrease();
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp22223332223222", 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/016D7E1B") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/2A26AC9A")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/F7FDE15B") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/26E55644")), PlayerGroupSingle(EventPlayer()));
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat10 () {
    const int shop_index = 9;
    // Upgrade
    if ((gv_StatIncreasesBought[EventPlayer()][shop_index] == 0)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Armorbreak", gv_PlayerHero[EventPlayer()], 1);
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Armorbreak2", gv_PlayerHero[EventPlayer()], 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "Armorbreakupgrade", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "Armorbreakupgrade3", 1);
    }
    else if ((gv_StatIncreasesBought[EventPlayer()][shop_index] == 1)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "Armorbreakupgrade2", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "Armorbreakupgrade32", 1);
    }
    else if ((gv_StatIncreasesBought[EventPlayer()][shop_index] == 2)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "Armorbreakupgrade22", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "Armorbreakupgrade322", 1);
    } else {
        return;
    }

    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/E83DF35E") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/5E9CA015")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/971AFD3E") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/9C0F7D59")), PlayerGroupSingle(EventPlayer()));
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat11 () {
    const int shop_index = 10;
    // Upgrade
    gf_HrEvasionLevelIncrease();
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/9EF04A19") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/312059D4")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/546F2B11") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/7EAD3D35")), PlayerGroupSingle(EventPlayer()));
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat12 () {
    const int shop_index = 11;
    // Upgrade
    gf_HrCriticalChanceLevelIncrease();
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/A74FC466") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/373CE98F")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/E0DED4C4") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/52E90764")), PlayerGroupSingle(EventPlayer()));
    lf_ShopRelatedChecks(shop_index);
}

// gf_HrStat25 to gf_HrStat30 are seals

static void lf_DisableSeals() {
    int i;
    const int first_seal_index = 12;
    const int last_seal_index = 17;
    for (i = first_seal_index; i <= last_seal_index; i += 1) {
        DialogControlSetEnabled(gv_StatShopButton[i], PlayerGroupSingle(EventPlayer()), false);
    }
    gv_SealBought[EventPlayer()] = true;
}

void gf_HrStat25 () {
    const int shop_index = 12;
    // Upgrade
    if ((UnitWeaponRange(gv_PlayerHero[EventPlayer()], 1) > 2.5)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "HeroGainHP3", gv_PlayerHero[EventPlayer()], 1);
    } else {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "HeroGainHP32", gv_PlayerHero[EventPlayer()], 1);
    }
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "HeroGainHP33", gv_PlayerHero[EventPlayer()], 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/8A7F65C7") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/36A17EA3")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_DisableSeals();
}

void gf_HrStat26 () {
    const int shop_index = 13;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "HeroGainHP323", gv_PlayerHero[EventPlayer()], 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/4851ADBC") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/DBB538DF")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_DisableSeals();
}

void gf_HrStat27 () {
    const int shop_index = 14;
    // Upgrade
    gf_HrCriticalChanceLevelIncrease();
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "HeroGainHP3233", gv_PlayerHero[EventPlayer()], 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/0450D79A") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/924BE64C")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_DisableSeals();
}

void gf_HrStat28 () {
    const int shop_index = 15;
    // Upgrade
    gf_HrCooldownReductionLevelIncrease();
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "HeroGainHP323333", gv_PlayerHero[EventPlayer()], 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/7CC06727") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/12C02D1B")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_DisableSeals();
}

void gf_HrStat29 () {
    const int shop_index = 16;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "HeroGainHP32333", gv_PlayerHero[EventPlayer()], 1);
    gf_HrEvasionLevelIncrease();
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/EAFCB85C") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/0B2277F9")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_DisableSeals();
}

void gf_HrStat30 () {
    const int shop_index = 17;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "HeroGainHP323332", gv_PlayerHero[EventPlayer()], 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/4CD6BABA") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/0BD69820")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_DisableSeals();
}

void gf_HrStat13 () {
    const int shop_index = 18;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "HeroGainHP", gv_PlayerHero[EventPlayer()], 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "HeroLvUp4232", 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/3E26FE28") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/50CAF2F4")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/59E5C445") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/D23DAF42")), PlayerGroupSingle(EventPlayer()));
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat14 () {
    const int shop_index = 19;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "HeroGainHP2", gv_PlayerHero[EventPlayer()], 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "HeroLvUp4233", 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "HeroLvUp4233222", 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "HeroLvUp4233222232", 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "HeroLvUp42332222332", 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "HeroLvUp423322223322", 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/F76E2374") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/CEE4DA7E")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/7A06C1E6") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/C3E5D723")), PlayerGroupSingle(EventPlayer()));
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat15 () {
    const int shop_index = 20;
    // Upgrade
    gf_HrCooldownReductionLevelIncrease();
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] += 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/74BA56B3") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/97EC7ED4")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    libNtve_gf_SetDialogItemTooltip(gv_StatusWindowBtn[shop_index], (StringExternal("Param/Value/91BB6474") + IntToText(gv_StatHowMoney[shop_index][EventPlayer()]) + StringExternal("Param/Value/6332FECD")), PlayerGroupSingle(EventPlayer()));
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat16 () {
    const int shop_index = 21;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "BoosterItem2", gv_PlayerHero[EventPlayer()], 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp222233322232222", 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] = 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/2BBFB346") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/A431C779")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat17 () {
    const int shop_index = 22;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "MagicShield", gv_PlayerHero[EventPlayer()], 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] = 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/E63A395A") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/AEFB2F88")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat18 () {
    const int shop_index = 23;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "MagmaFire", gv_PlayerHero[EventPlayer()], 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] = 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/F16E4894") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/50B26F7B")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat19 () {
    const int shop_index = 24;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "SpellDong25", gv_PlayerHero[EventPlayer()], 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] = 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/97E83587") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/1E42F4E5")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat20 () {
    const int shop_index = 25;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "SpellDong252", gv_PlayerHero[EventPlayer()], 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] = 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/AA3D08C5") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/2EAA36A2")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat21 () {
    const int shop_index = 26;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gamsi", c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(gv_PlayerHero[EventPlayer()]));
    UnitGroupAdd(gv_WardGroup[EventPlayer()], UnitLastCreated());
    UnitControlGroupAddUnit(EventPlayer(), 3, UnitLastCreated());
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] = 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/44B3468A") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/5214615F")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat22 () {
    const int shop_index = 27;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "SpellDong242422", gv_PlayerHero[EventPlayer()], 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] = 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/4792A2C8") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/B2C67E7D")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat23 () {
    const int shop_index = 28;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "HeroLevelup2", gv_PlayerHero[EventPlayer()], 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] = 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/0DBB13B3") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/F51317E6")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrStat24 () {
    const int shop_index = 29;
    // Upgrade
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "HeroLevelup22", gv_PlayerHero[EventPlayer()], 1);
    // Shop Changes
    gv_StatIncreasesBought[EventPlayer()][shop_index] = 1;
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[shop_index], (StringExternal("Param/Value/38D5186D") + IntToText(gv_StatIncreasesBought[EventPlayer()][shop_index]) + StringExternal("Param/Value/83231539")), PlayerGroupSingle(EventPlayer()));
    lf_PayCostsForShopItem(shop_index);
    lf_ShopRelatedChecks(shop_index);
}

void gf_HrAttackSpeedLevelIncrease () {
    int i;
    string[10] upgrade_names;
    int current_upgrade = gv_StatIncreasesBought[EventPlayer()][8];

    upgrade_names[0] = "AttackSpeed";
    upgrade_names[1] = "AttackSpeed2";
    upgrade_names[2] = "AttackSpeed22";
    upgrade_names[3] = "AttackSpeed222";
    upgrade_names[4] = "AttackSpeed2222";
    upgrade_names[5] = "AttackSpeed22222";
    upgrade_names[6] = "AttackSpeed222222";
    upgrade_names[7] = "AttackSpeed2222222";
    upgrade_names[8] = "AttackSpeed22222222";
    upgrade_names[9] = "AttackSpeed222222222";

    for (i = 0; i < 10; i += 1) {
        if (i == 9) {
            if (UnitHasBehavior(gv_PlayerHero[EventPlayer()], upgrade_names[i]) == false) {
                UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], upgrade_names[0], gv_PlayerHero[EventPlayer()], 1);
                break;
            } else {
                break;
            }
        }
        if ((UnitHasBehavior(gv_PlayerHero[EventPlayer()], upgrade_names[i]) == true)) {
            UnitBehaviorRemovePlayer(gv_PlayerHero[EventPlayer()], upgrade_names[i], EventPlayer(), 1);
            UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], upgrade_names[i + 1], gv_PlayerHero[EventPlayer()], 1);
            break;
        }
    }
}

void gf_HrEvasionLevelIncrease () {
    int i;
    string[4] upgrade_names;

    upgrade_names[0] = "SpellDong24232";
    upgrade_names[1] = "SpellDong242323";
    upgrade_names[2] = "SpellDong2423232";
    upgrade_names[3] = "SpellDong24232322";

    for (i = 0; i < 4; i += 1) {
        if (i == 3) {
            if (UnitHasBehavior(gv_PlayerHero[EventPlayer()], upgrade_names[i]) == false) {
                UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], upgrade_names[0], gv_PlayerHero[EventPlayer()], 1);
                break;
            } else {
                break;
            }
        }
        if ((UnitHasBehavior(gv_PlayerHero[EventPlayer()], upgrade_names[i]) == true)) {
            UnitBehaviorRemovePlayer(gv_PlayerHero[EventPlayer()], upgrade_names[i], EventPlayer(), 1);
            UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], upgrade_names[i + 1], gv_PlayerHero[EventPlayer()], 1);
            break;
        }
    }
}

void gf_HrCriticalChanceLevelIncrease () {
    int i;
    string[10] upgrade_names;

    upgrade_names[0] = "Critical";
    upgrade_names[1] = "Critical2";
    upgrade_names[2] = "Critical22";
    upgrade_names[3] = "Critical222";
    upgrade_names[4] = "Critical2222";
    upgrade_names[5] = "Critical22222";
    upgrade_names[6] = "Critical222223";
    upgrade_names[7] = "Critical222222";
    upgrade_names[8] = "Critical2222222";
    upgrade_names[9] = "Critical22222222";

    for (i = 0; i < 10; i += 1) {
        if (i == 9) {
            if (UnitHasBehavior(gv_PlayerHero[EventPlayer()], upgrade_names[i]) == false) {
                UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], upgrade_names[0], gv_PlayerHero[EventPlayer()], 1);
                break;
            } else {
                break;
            }
        }
        if ((UnitHasBehavior(gv_PlayerHero[EventPlayer()], upgrade_names[i]) == true)) {
            UnitBehaviorRemovePlayer(gv_PlayerHero[EventPlayer()], upgrade_names[i], EventPlayer(), 1);
            UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], upgrade_names[i + 1], gv_PlayerHero[EventPlayer()], 1);
            break;
        }
    }
}

void gf_HrCooldownReductionLevelIncrease () {
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333222332", 2);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333222332222", 2);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333222332222222", 2);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333222332222222222", 2);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp22223332223322222222222", 2);
}

void gf_StatWindowUpdatePlayer (int player) {
    int i;
    int stat_sum = 0;
    text tooltip_text;
    color stat_name_color;

    const color AD_COLOR = Color(100.0, 60.0, 60.0);
    const color AP_COLOR = Color(60.0, 100.0, 80.0);
    const color SEAL_COLOR = Color(100.0, 50.0, 0.0);
    const color DEFAULT_COLOR = Color(40.0, 60.0, 100.0);
    const color NUMBER_COLOR = Color(100.0, 100.0, 100.0);
    const color PLAYERNAME_COLOR = Color(50.0, 70.0, 100.0);

    const color CONSUMABLE_LABEL_COLOR = Color(100.0, 90.0, 55.0);
    const color ACTIVE_CONSUMABLE_COLOR = Color(80.0, 80.0, 80.0);
    const color NONACTIVE_CONSUMABLE_COLOR = Color(30.0, 30.0, 30.0);

    tooltip_text = (
        StringToText("<s val=\"PurchasePanelGroupName\">") +
        TextWithColor(PlayerName(player) + StringToText("'s stats:"), PLAYERNAME_COLOR) + // TODO: Move to external string
        StringToText("</s>") +
        StringToText("<n/><n/>") +
        StringToText("<s val=\"Header18\">")
    );

    for (i = 0; i < 24; i += 1) {
        if ((i >= 12) && (i <= 17)) {  // Seals
            continue;
        }

        if (gv_StatIncreasesBought[player][i] == 0) { // Only show bought stats
            continue;
        }

        if ((i == 0) || (i == 2)) { // AD and DP
            stat_name_color = AD_COLOR;
        }
        else if ((i == 1) || (i == 3)) { // AP and RP
            stat_name_color = AP_COLOR;
        }
        else {
            stat_name_color = DEFAULT_COLOR;
        }

        stat_sum += 1;
        tooltip_text += TextWithColor(
            (StringToText("  ") + gv_ShopItemParameters[i].name + StringToText(": ")),
            stat_name_color
        );

        tooltip_text += TextWithColor(IntToText(gv_StatIncreasesBought[player][i]), NUMBER_COLOR);
        tooltip_text += StringToText("<n/>");
    }

    if (stat_sum == 0) {
        tooltip_text += StringToText("  ");
        tooltip_text += TextWithColor(StringToText("No stats bought yet"), DEFAULT_COLOR); // TODO: Move to external string
        tooltip_text += StringToText("<n/>");
    }

    tooltip_text += StringToText("<n/>");
    if (gv_SealBought[player]) {
        for (i = 12; i <= 17; i += 1) {
            if (gv_StatIncreasesBought[player][i] == 1) {
                tooltip_text += StringToText("  ");
                tooltip_text += TextWithColor(gv_ShopItemParameters[i].name, SEAL_COLOR);
                break;
            }
        }
    } else {
        tooltip_text += StringToText("  ");
        tooltip_text += TextWithColor(StringToText("No Seal"), SEAL_COLOR); // TODO: Move to external string
    }

    tooltip_text += StringToText("<n/><n/>  ");
    tooltip_text += TextWithColor(StringToText("Consumables:"), CONSUMABLE_LABEL_COLOR); // TODO: Move to external string

    for (i = 27; i < 30; i += 1) {
        if (gv_StatIncreasesBought[player][i] == 0) {
            stat_name_color = NONACTIVE_CONSUMABLE_COLOR;
        } else {
            stat_name_color = ACTIVE_CONSUMABLE_COLOR;
        }

        tooltip_text += StringToText("<n/>  ");
        tooltip_text += TextWithColor(gv_ShopItemParameters[i].name, stat_name_color);
    }

    tooltip_text += StringToText("</s>");  // Header18

    libNtve_gf_SetDialogItemTooltip(gv_ScoreDialogName[player], tooltip_text, PlayerGroupAll());
}

void gf_HrItemUseComplete () {
    if ((gv_StatIncreasesBought[EventPlayer()][28] != 0)) {
        gv_StatIncreasesBought[EventPlayer()][28] = 0;
        DialogControlSetEnabled(gv_StatusWindowBtn[28], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[28], (StringExternal("Param/Value/68B8F61B") + IntToText(gv_StatIncreasesBought[EventPlayer()][28]) + StringExternal("Param/Value/9418664B")), PlayerGroupSingle(EventPlayer()));
    }

    if ((gv_StatIncreasesBought[EventPlayer()][29] != 0)) {
        gv_StatIncreasesBought[EventPlayer()][29] = 0;
        DialogControlSetEnabled(gv_StatusWindowBtn[29], PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[29], (StringExternal("Param/Value/5A294C24") + IntToText(gv_StatIncreasesBought[EventPlayer()][29]) + StringExternal("Param/Value/4C29070D")), PlayerGroupSingle(EventPlayer()));
    }

    gf_StatWindowUpdatePlayer(EventPlayer());
}

void gf_HrAssistSystemAdd2 () {
    int i;
    string[8] upgrade_names;

    upgrade_names[0] = "Player1Assist23";
    upgrade_names[1] = "Player1Assist223";
    upgrade_names[2] = "Player1Assist2223";
    upgrade_names[3] = "Player1Assist22223";
    upgrade_names[4] = "Player1Assist222223";
    upgrade_names[5] = "Player1Assist2222223";
    upgrade_names[6] = "Player1Assist22222223";
    upgrade_names[7] = "Player1Assist222222222";

    for (i = 0; i < 8; i += 1) {
        if ((EventPlayer() == gv_PlayerBayul[i + 1])) {
            UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), upgrade_names[i], EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
        }
    }
}

void gf_HrHeroBSpawnH1 () {
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifeMax, UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropLifeMax, c_unitPropCurrent));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergyMax, UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropEnergyMax, c_unitPropCurrent));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLife, UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropLife, c_unitPropCurrent));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergy, UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropEnergy, c_unitPropCurrent));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLevel, UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropLevel, c_unitPropCurrent));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropXP, UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropXP, c_unitPropCurrent));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropKills, UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropKills, c_unitPropCurrent));
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "SpellDong24", EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_StatIncreasesBought[EventPlayer()][0]);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "SpellDong24233", EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_StatIncreasesBought[EventPlayer()][1]);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DefensePower", EventPlayerEffectUsedUnit(c_effectUnitTarget), (gv_StatIncreasesBought[EventPlayer()][2] * 4));
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Amor2", EventPlayerEffectUsedUnit(c_effectUnitTarget), (gv_StatIncreasesBought[EventPlayer()][3] * 4));
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "SpellDong2423", EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_StatIncreasesBought[EventPlayer()][9]);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BoosterItem2", EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_StatIncreasesBought[EventPlayer()][15]);
}

void gf_HrHeroBSpawnH2 () {
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifeMax, UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropLifeMax, c_unitPropCurrent));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergyMax, UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropEnergyMax, c_unitPropCurrent));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLife, UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropLife, c_unitPropCurrent));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergy, UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropEnergy, c_unitPropCurrent));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLevel, UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropLevel, c_unitPropCurrent));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropXP, UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropXP, c_unitPropCurrent));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropKills, UnitGetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropKills, c_unitPropCurrent));
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "SpellDong24", EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_StatIncreasesBought[EventPlayer()][0]);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "SpellDong24233", EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_StatIncreasesBought[EventPlayer()][1]);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DefensePower", EventPlayerEffectUsedUnit(c_effectUnitTarget), (gv_StatIncreasesBought[EventPlayer()][2] * 4));
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Amor2", EventPlayerEffectUsedUnit(c_effectUnitTarget), (gv_StatIncreasesBought[EventPlayer()][3] * 4));
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Hero61Skill4Attackspeed", EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_StatIncreasesBought[EventPlayer()][8]);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "SpellDong2423", EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_StatIncreasesBought[EventPlayer()][9]);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BoosterItem2", EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_StatIncreasesBought[EventPlayer()][15]);
}

void gf_HrMonsterBuffPickUp1 () {
    gv_HeroBuffIng[libNtve_gf_KillingPlayer()][1] = 1;
    if ((UnitHasBehavior(gv_PlayerHero[libNtve_gf_KillingPlayer()], "SpellDong242423") == true)) {
        PlayerCreateEffectUnit(libNtve_gf_KillingPlayer(), "HealingLifeH33", gv_PlayerHero[libNtve_gf_KillingPlayer()]);
        UnitBehaviorAdd(gv_PlayerHero[libNtve_gf_KillingPlayer()], "SpellDong242423", gv_PlayerHero[libNtve_gf_KillingPlayer()], 1);
    }
    else {
        PlayerCreateEffectUnit(libNtve_gf_KillingPlayer(), "HealingLifeH33", gv_PlayerHero[libNtve_gf_KillingPlayer()]);
        UnitBehaviorAdd(gv_PlayerHero[libNtve_gf_KillingPlayer()], "SpellDong242423", gv_PlayerHero[libNtve_gf_KillingPlayer()], 1);
        TechTreeUpgradeAddLevel(libNtve_gf_KillingPlayer(), "SpellUp2222333222332", 2);
        TechTreeUpgradeAddLevel(libNtve_gf_KillingPlayer(), "SpellUp2222333222332222", 2);
        TechTreeUpgradeAddLevel(libNtve_gf_KillingPlayer(), "SpellUp2222333222332222222", 2);
        TechTreeUpgradeAddLevel(libNtve_gf_KillingPlayer(), "SpellUp2222333222332222222222", 2);
    }
}

void gf_HrMonsterBuffPickUp2 () {
    gv_HeroBuffIng[libNtve_gf_KillingPlayer()][0] = 1;
    PlayerCreateEffectUnit(libNtve_gf_KillingPlayer(), "HealingLifeH33", gv_PlayerHero[libNtve_gf_KillingPlayer()]);
    if (gv_HeroInformation[gv_SelectedCharNum[libNtve_gf_KillingPlayer()] - 1].ability_resource != c_abilityResourceHeat) {
        UnitBehaviorAdd(gv_PlayerHero[libNtve_gf_KillingPlayer()], "SpellDong24242", gv_PlayerHero[libNtve_gf_KillingPlayer()], 1);
    } else {
        UnitBehaviorAdd(gv_PlayerHero[libNtve_gf_KillingPlayer()], "SpellDong242424", gv_PlayerHero[libNtve_gf_KillingPlayer()], 1);
    }
}

void gf_HrMonsterBuffPickUp4 () {
    int i;
    int n;

    if ((gv_MonsterKillOnlyOne[0] == false)) {
        gv_MonsterKillOnlyOne[0] = true;
        SoundPlay(SoundLink("Ursula_Death", -1), PlayerGroupAll(), 200.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/99A72CA0") + TextWithColor(StringExternal("Param/Value/A641DDBE"), Color(100.00, 100.00, 0.00)) + StringExternal("Param/Value/E82D3D1F")));

        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), libNtve_gf_KillingPlayer()) == true)) {
            i = 1;
            n = 4;
        } else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), libNtve_gf_KillingPlayer()) == true)) {
            i = 5;
            n = 8;
        }

        for (; i <= n; i += 1) {
            if (!((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive))) {
                continue;
            }
            UIDisplayMessage(PlayerGroupSingle(gv_PlayerBayul[i]), c_messageAreaSubtitle, (StringExternal("Param/Value/384EF115") + TextWithColor(StringExternal("Param/Value/72EB257C"), Color(0.00, 87.45, 100.00)) + StringExternal("Param/Value/C728AE8E")));
            PlayerModifyPropertyInt(gv_PlayerBayul[i], c_playerPropMinerals, c_playerPropOperAdd, 400);
            if ((UnitHasBehavior(gv_PlayerHero[gv_PlayerBayul[i]], "SpellDong2424") == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[i]] == false)) {
                UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[i]], "SpellDong2424", gv_PlayerHero[gv_PlayerBayul[i]], 1);
            }
            else if ((UnitHasBehavior(gv_PlayerHero[gv_PlayerBayul[i]], "SpellDong2424") == false) && (gv_HeroDeathBoolean[gv_PlayerBayul[i]] == false)) {
                UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[i]], "SpellDong2424", gv_PlayerHero[gv_PlayerBayul[i]], 1);
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp222233322232", 3);
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp2222333222323", 3);
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp2222333222322", 3);
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp22223332223", 3);
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp222233322233", 3);
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp2222333222333", 3);
                UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[i]], "SpellDong24", gv_PlayerHero[gv_PlayerBayul[i]], 3);
                UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[i]], "SpellDong24233", gv_PlayerHero[gv_PlayerBayul[i]], 3);
                if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 71)) {
                    UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[i]], "Hero71Passive", gv_PlayerHero[gv_PlayerBayul[i]], 3);
                }
            }
        }
    }
}

void gf_HrMonsterBuffPickUp3 () {
    int i;
    int n;

    if ((gv_MonsterKillOnlyOne[1] == false)) {
        gv_MonsterKillOnlyOne[1] = true;
        SoundPlay(SoundLink("Ursula_Death", -1), PlayerGroupAll(), 200.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/5F908B50") + TextWithColor(StringExternal("Param/Value/E5AC2DF6"), Color(100.00, 100.00, 0.00)) + StringExternal("Param/Value/11A402F4")));

        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), libNtve_gf_KillingPlayer()) == true)) {
            i = 1;
            n = 4;
        } else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), libNtve_gf_KillingPlayer()) == true)) {
            i = 5;
            n = 8;
        }

        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), libNtve_gf_KillingPlayer()) == true)) {
            for (; i <= n; i += 1) {
                if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
                    UIDisplayMessage(PlayerGroupSingle(gv_PlayerBayul[i]), c_messageAreaSubtitle, (StringExternal("Param/Value/23CF5BBC") + TextWithColor(StringExternal("Param/Value/4415B380"), Color(0.00, 87.45, 100.00)) + StringExternal("Param/Value/C9C7F429")));
                    PlayerModifyPropertyInt(gv_PlayerBayul[i], c_playerPropMinerals, c_playerPropOperAdd, 350);
                }
            }
        }
    }

}

void gf_HrMonsterBirdRegenTimerStart () {
    if ((UnitGroupHasUnit(gv_MonsterBirdGroup[0], EventUnit()) == true) && (gv_RegenNewTimerBirdBoolean[0] == false)) {
        gv_RegenNewTimerBirdBoolean[0] = true;
        if ((gv_RegenNewTimerBirdStrong[0] < 20)) {
            gv_RegenNewTimerBirdStrong[0] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG", PointFromId(554));
        UnitRemove(gv_MonsterBirdPing1[0]);
    }
    else if ((UnitGroupHasUnit(gv_MonsterBirdGroup[1], EventUnit()) == true) && (gv_RegenNewTimerBirdBoolean[1] == false)) {
        gv_RegenNewTimerBirdBoolean[1] = true;
        if ((gv_RegenNewTimerBirdStrong[1] < 20)) {
            gv_RegenNewTimerBirdStrong[1] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG", PointFromId(555));
        UnitRemove(gv_MonsterBirdPing1[1]);
    }
}

void gf_HrMonsterDogRegenTimerStart () {
    if ((UnitGroupHasUnit(gv_MonsterDogGroup[0], EventUnit()) == true) && (gv_RegenNewTimerDogBoolean[0] == false)) {
        gv_RegenNewTimerDogBoolean[0] = true;
        if ((gv_RegenNewTimerDogStrong[0] < 20)) {
            gv_RegenNewTimerDogStrong[0] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG3", PointFromId(560));
        UnitRemove(gv_MonsterDogPing1[0]);
    }
    else if ((UnitGroupHasUnit(gv_MonsterDogGroup[1], EventUnit()) == true) && (gv_RegenNewTimerDogBoolean[1] == false)) {
        gv_RegenNewTimerDogBoolean[1] = true;
        if ((gv_RegenNewTimerDogStrong[1] < 20)) {
            gv_RegenNewTimerDogStrong[1] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG3", PointFromId(556));
        UnitRemove(gv_MonsterDogPing1[1]);
    }
}

void gf_HrMonsterCowRegenTimerStart () {
    if ((UnitGroupHasUnit(gv_MonsterCowGroup[0], EventUnit()) == true) && (gv_RegenNewTimerCowBoolean[0] == false)) {
        gv_RegenNewTimerCowBoolean[0] = true;
        if ((gv_RegenNewTimerCowStrong[0] < 20)) {
            gv_RegenNewTimerCowStrong[0] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG32", PointFromId(214));
        UnitRemove(gv_MonsterCowPing1[0]);
    }
    else if ((UnitGroupHasUnit(gv_MonsterCowGroup[1], EventUnit()) == true) && (gv_RegenNewTimerCowBoolean[1] == false)) {
        gv_RegenNewTimerCowBoolean[1] = true;
        if ((gv_RegenNewTimerCowStrong[1] < 20)) {
            gv_RegenNewTimerCowStrong[1] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG32", PointFromId(157));
        UnitRemove(gv_MonsterCowPing1[1]);
    }
}

void gf_HrMonsterGarlicRegenTimerStart () {
    if ((UnitGroupHasUnit(gv_MonsterGalicGroup[0], EventUnit()) == true) && (gv_RegenNewTimerGalicBoolean[0] == false)) {
        gv_RegenNewTimerGalicBoolean[0] = true;
        if ((gv_RegenNewTimerGalicStrong[0] < 20)) {
            gv_RegenNewTimerGalicStrong[0] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG3222", PointFromId(548));
        UnitRemove(gv_MonsterGalicPing1[0]);
    }
    else if ((UnitGroupHasUnit(gv_MonsterGalicGroup[1], EventUnit()) == true) && (gv_RegenNewTimerGalicBoolean[1] == false)) {
        gv_RegenNewTimerGalicBoolean[1] = true;
        if ((gv_RegenNewTimerGalicStrong[1] < 20)) {
            gv_RegenNewTimerGalicStrong[1] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG3222", PointFromId(551));
        UnitRemove(gv_MonsterGalicPing1[1]);
    }
}

void gf_HrMonsterScorpionRegenTimerStart () {
    if ((UnitGroupHasUnit(gv_MonsterScorpionGroup[0], EventUnit()) == true) && (gv_RegenNewTimerScorpionBoolean[0] == false)) {
        gv_RegenNewTimerScorpionBoolean[0] = true;
        if ((gv_RegenNewTimerScorpionStrong[0] < 20)) {
            gv_RegenNewTimerScorpionStrong[0] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG32222", PointFromId(564));
        UnitRemove(gv_MonsterScorpionPing1[0]);
    }
    else if ((UnitGroupHasUnit(gv_MonsterScorpionGroup[1], EventUnit()) == true) && (gv_RegenNewTimerScorpionBoolean[1] == false)) {
        gv_RegenNewTimerScorpionBoolean[1] = true;
        if ((gv_RegenNewTimerScorpionStrong[1] < 20)) {
            gv_RegenNewTimerScorpionStrong[1] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG32222", PointFromId(567));
        UnitRemove(gv_MonsterScorpionPing1[1]);
    }
}

void gf_HrMonsterIceBugRegenTimerStart () {
    if ((UnitGroupHasUnit(gv_MonsterIceBugGroup[0], EventUnit()) == true) && (gv_RegenNewTimerIceBugBoolean[0] == false)) {
        gv_RegenNewTimerIceBugBoolean[0] = true;
        if ((gv_RegenNewTimerIceBugStrong[0] < 20)) {
            gv_RegenNewTimerIceBugStrong[0] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG322", PointFromId(570));
        UnitRemove(gv_MonsterIceBugPing1[0]);
    }
    else if ((UnitGroupHasUnit(gv_MonsterIceBugGroup[1], EventUnit()) == true) && (gv_RegenNewTimerIceBugBoolean[1] == false)) {
        gv_RegenNewTimerIceBugBoolean[1] = true;
        if ((gv_RegenNewTimerIceBugStrong[1] < 20)) {
            gv_RegenNewTimerIceBugStrong[1] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG322", PointFromId(573));
        UnitRemove(gv_MonsterIceBugPing1[1]);
    }
    else if ((UnitGroupHasUnit(gv_MonsterIceBugGroup[2], EventUnit()) == true) && (gv_RegenNewTimerIceBugBoolean[2] == false)) {
        gv_RegenNewTimerIceBugBoolean[2] = true;
        if ((gv_RegenNewTimerIceBugStrong[2] < 20)) {
            gv_RegenNewTimerIceBugStrong[2] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG322", PointFromId(574));
        UnitRemove(gv_MonsterIceBugPing1[2]);
    }
    else if ((UnitGroupHasUnit(gv_MonsterIceBugGroup[3], EventUnit()) == true) && (gv_RegenNewTimerIceBugBoolean[3] == false)) {
        gv_RegenNewTimerIceBugBoolean[3] = true;
        if ((gv_RegenNewTimerIceBugStrong[3] < 20)) {
            gv_RegenNewTimerIceBugStrong[3] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG322", PointFromId(577));
        UnitRemove(gv_MonsterIceBugPing1[3]);
    }
}

void gf_HrMonsterBossRegenTimerStart () {
    if ((UnitGroupHasUnit(gv_MonsterBossGroup[0], EventUnit()) == true) && (gv_RegenNewTimerIceBossBoolean[0] == false)) {
        gv_RegenNewTimerIceBossBoolean[0] = true;
        if ((gv_RegenNewTimerIceBossStrong[0] < 5)) {
            gv_RegenNewTimerIceBossStrong[0] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG322222", PointFromId(578));
        UnitRemove(gv_MonsterIceBossPing1[0]);
    }
    else if ((UnitGroupHasUnit(gv_MonsterBossGroup[1], EventUnit()) == true) && (gv_RegenNewTimerIceBossBoolean[1] == false)) {
        gv_RegenNewTimerIceBossBoolean[1] = true;
        if ((gv_RegenNewTimerIceBossStrong[1] < 5)) {
            gv_RegenNewTimerIceBossStrong[1] += 1;
        }

        PlayerCreateEffectPoint(11, "MonsterMakeTimerG322222", PointFromId(579));
        UnitRemove(gv_MonsterIceBossPing1[1]);
    }
}

void gf_HrHeroReviveWindowMake () {
    int i;

    DialogCreate(850, 400, c_anchorCenter, 0, -100, true);
    gv_HeroReviveWindow = DialogLastCreated();
    DialogSetImageVisible(gv_HeroReviveWindow, false);
    DialogControlCreate(gv_HeroReviveWindow, c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 825, 80);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -100);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/781CCDB4"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    for (i = 1; i <= 8; i += 1) {
        DialogControlCreate(gv_HeroReviveWindow, c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, 80);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 30);
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/C2E7A3BA") + IntToText(20) + StringExternal("Param/Value/254C3E7A")), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_HeroReviveWindowTime[gv_PlayerBayul[i]] = DialogControlLastCreated();
    }
}

void gf_HrHeroSkillIncreaseEffect () {
    if ((gv_SelectedCharNum[gv_HeroKillPlayer[EventPlayer()]] == 32) && (gv_SkillLevels[gv_HeroKillPlayer[EventPlayer()]][c_skillW] >= 1)) {
        PlayerCreateEffectPoint(gv_HeroKillPlayer[EventPlayer()], "Hero32Skill2G22", PointFromId(1));
    }
    else if ((gv_SelectedCharNum[gv_HeroKillPlayer[EventPlayer()]] == 46) && (TechTreeUpgradeCount(gv_HeroKillPlayer[EventPlayer()], "SpellUp222233322343", c_techCountCompleteOnly) < 50)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "Hero46Passive", gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], 2);
        TechTreeUpgradeAddLevel(gv_HeroKillPlayer[EventPlayer()], "SpellUp222233322343", 2);
    }
    else if ((gv_SelectedCharNum[gv_HeroKillPlayer[EventPlayer()]] == 66) && (TechTreeUpgradeCount(gv_HeroKillPlayer[EventPlayer()], "SpellUp222233322722322", c_techCountCompleteOnly) < 24)) {
        TechTreeUpgradeAddLevel(gv_HeroKillPlayer[EventPlayer()], "SpellUp222233322722322", 1);
        if (((TechTreeUpgradeCount(gv_HeroKillPlayer[EventPlayer()], "SpellUp222233322722322", c_techCountCompleteOnly) == 4) || (TechTreeUpgradeCount(gv_HeroKillPlayer[EventPlayer()], "SpellUp222233322722322", c_techCountCompleteOnly) == 8) || (TechTreeUpgradeCount(gv_HeroKillPlayer[EventPlayer()], "SpellUp222233322722322", c_techCountCompleteOnly) == 12) || (TechTreeUpgradeCount(gv_HeroKillPlayer[EventPlayer()], "SpellUp222233322722322", c_techCountCompleteOnly) == 16) || (TechTreeUpgradeCount(gv_HeroKillPlayer[EventPlayer()], "SpellUp222233322722322", c_techCountCompleteOnly) == 24))) {
            PlayerCreateEffectPoint(gv_HeroKillPlayer[EventPlayer()], "Hero66Passive", PointFromId(1));
        }
    }
    else if ((gv_SelectedCharNum[gv_HeroKillPlayer[EventPlayer()]] == 70) && (UnitHasBehavior(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "Hero70Skill2cool") == true)) {
        UnitCreateEffectUnit(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "Hero70Skill2Dong3", gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]]);
    }
}

void gf_HrHeroSkillIncreaseEffect2 () {
    if ((gv_SelectedCharNum[EventPlayer()] == 24)) {
        PlayerCreateEffectPoint(EventPlayer(), "Hero24Death", UnitGetPosition(EventUnit()));
    }
    else if ((gv_SelectedCharNum[EventPlayer()] == 54)) {
        UnitBehaviorRemove(EventUnit(), "Hero54Passive", (TechTreeBehaviorCount(EventPlayer(), "Hero54Passive", c_techCountInProgressOrBetter) / 2));
        UnitBehaviorRemove(EventUnit(), "Hero54Passive2", (TechTreeBehaviorCount(EventPlayer(), "Hero54Passive2", c_techCountInProgressOrBetter) / 2));
        UnitBehaviorRemove(EventUnit(), "Hero54Passive22", (TechTreeBehaviorCount(EventPlayer(), "Hero54Passive22", c_techCountInProgressOrBetter) / 2));
        UnitBehaviorRemove(EventUnit(), "Hero54Passive222", (TechTreeBehaviorCount(EventPlayer(), "Hero54Passive222", c_techCountInProgressOrBetter) / 2));
    }
}

void gf_HrHeroAllKillMessage () {
    if ((gv_GameEndBoolean == false) && (((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[1]] == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[2]] == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[3]] == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[4]] == true) && (gv_HeroAllKill[0] == false) && (PlayerGroupCount(gv_TeamPlayerGroup[0]) >= 2)) || ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[5]] == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[6]] == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[7]] == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[8]] == true) && (gv_HeroAllKill[1] == false) && (PlayerGroupCount(gv_TeamPlayerGroup[1]) >= 2)))) {
        Wait(1.0, c_timeReal);
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_HeroAllKill[0] == false)) {
            gv_HeroAllKill[0] = true;
            SoundPlay(SoundLink("SystemSound22", -1), GameAttributePlayersForTeam(1), 200.0, 0.0);
            SoundPlay(SoundLink("SystemSound2", -1), GameAttributePlayersForTeam(2), 200.0, 0.0);
            UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/7857B2B6") + TextWithColor(StringExternal("Param/Value/1F561659"), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/FF226EE3")));
            UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/194C4BFC") + TextWithColor(StringExternal("Param/Value/8C5502B7"), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/FC6E6AA4")));
        }
        else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_HeroAllKill[1] == false)) {
            gv_HeroAllKill[1] = true;
            SoundPlay(SoundLink("SystemSound22", -1), GameAttributePlayersForTeam(2), 200.0, 0.0);
            SoundPlay(SoundLink("SystemSound2", -1), GameAttributePlayersForTeam(1), 200.0, 0.0);
            UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/963C7A18") + TextWithColor(StringExternal("Param/Value/9271688F"), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/09B39D91")));
            UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/A3DC4FC2") + TextWithColor(StringExternal("Param/Value/1D6118B0"), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/7EE08D4A")));
        }
    }
}

void gf_HrHeroAddKillMessage () {
    if ((UnitHasBehavior(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "PlayerGKill") == true) && (UnitHasBehavior(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "PlayerGKill2") == true)) {
        if ((UnitBehaviorCount(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "PlayerGKill2") == 2)) {
            SoundPlay(SoundLink("SystemSound3", -1), PlayerGroupAll(), 200.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/BE5FE003") + TextWithColor(PlayerName(gv_HeroKillPlayer[EventPlayer()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_HeroKillPlayer[EventPlayer()], false))) + TextWithColor(StringExternal("Param/Value/AB71EABA"), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/C12AB978")));
        }
        else if ((UnitBehaviorCount(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "PlayerGKill2") == 3)) {
            SoundPlay(SoundLink("SystemSound32", -1), PlayerGroupAll(), 200.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/2A008C47") + TextWithColor(PlayerName(gv_HeroKillPlayer[EventPlayer()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_HeroKillPlayer[EventPlayer()], false))) + TextWithColor(StringExternal("Param/Value/7146803F"), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/1D6D54E4")));
        }
        else if ((UnitBehaviorCount(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "PlayerGKill2") == 4)) {
            SoundPlay(SoundLink("SystemSound322", -1), PlayerGroupAll(), 200.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/E93C159A") + TextWithColor(PlayerName(gv_HeroKillPlayer[EventPlayer()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_HeroKillPlayer[EventPlayer()], false))) + TextWithColor(StringExternal("Param/Value/87097627"), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/C93617CD")));
        }
    }
    else if ((UnitHasBehavior(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "PlayerGKill") == false) && (gv_HeroNonStopKill[gv_HeroKillPlayer[EventPlayer()]] >= 2)) {
        if ((gv_HeroNonStopKill[gv_HeroKillPlayer[EventPlayer()]] == 2)) {
            SoundPlay(SoundLink("SystemSound3234", -1), PlayerGroupAll(), 200.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/E6F97B35") + TextWithColor(PlayerName(gv_HeroKillPlayer[EventPlayer()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_HeroKillPlayer[EventPlayer()], false))) + TextWithColor(StringExternal("Param/Value/A21CFBE1"), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/018568F0")));
        }
        else if ((gv_HeroNonStopKill[gv_HeroKillPlayer[EventPlayer()]] == 3)) {
            SoundPlay(SoundLink("SystemSound32342", -1), PlayerGroupAll(), 200.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/796E1E00") + TextWithColor(PlayerName(gv_HeroKillPlayer[EventPlayer()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_HeroKillPlayer[EventPlayer()], false))) + TextWithColor(StringExternal("Param/Value/4C15A50D"), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/AEC890D1")));
        }
        else if ((gv_HeroNonStopKill[gv_HeroKillPlayer[EventPlayer()]] == 4)) {
            SoundPlay(SoundLink("SystemSound323422", -1), PlayerGroupAll(), 200.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/D41287B8") + TextWithColor(PlayerName(gv_HeroKillPlayer[EventPlayer()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_HeroKillPlayer[EventPlayer()], false))) + TextWithColor(StringExternal("Param/Value/50A89A4B"), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/7BDAFC68")));
        }
        else if ((gv_HeroNonStopKill[gv_HeroKillPlayer[EventPlayer()]] == 5)) {
            SoundPlay(SoundLink("SystemSound323", -1), PlayerGroupAll(), 200.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/56211A06") + TextWithColor(PlayerName(gv_HeroKillPlayer[EventPlayer()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_HeroKillPlayer[EventPlayer()], false))) + TextWithColor(StringExternal("Param/Value/00C847D5"), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/9AA0EC4A")));
        }
        else if ((gv_HeroNonStopKill[gv_HeroKillPlayer[EventPlayer()]] == 6)) {
            SoundPlay(SoundLink("SystemSound3232", -1), PlayerGroupAll(), 200.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/A97DE4A0") + TextWithColor(PlayerName(gv_HeroKillPlayer[EventPlayer()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_HeroKillPlayer[EventPlayer()], false))) + TextWithColor(StringExternal("Param/Value/3619623F"), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/7CBD2A7C")));
        }
        else if ((gv_HeroNonStopKill[gv_HeroKillPlayer[EventPlayer()]] == 7)) {
            SoundPlay(SoundLink("SystemSound3233", -1), PlayerGroupAll(), 200.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/E9D21E31") + TextWithColor(PlayerName(gv_HeroKillPlayer[EventPlayer()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_HeroKillPlayer[EventPlayer()], false))) + TextWithColor(StringExternal("Param/Value/551276B1"), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/4ED678AB")));
        }
        else if ((gv_HeroNonStopKill[gv_HeroKillPlayer[EventPlayer()]] >= 8)) {
            SoundPlay(SoundLink("SystemSound32332", -1), PlayerGroupAll(), 200.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/F7ECA966") + TextWithColor(PlayerName(gv_HeroKillPlayer[EventPlayer()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_HeroKillPlayer[EventPlayer()], false))) + TextWithColor(StringExternal("Param/Value/1141AA81"), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/398F817B")));
        }
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/76DCFFCF") + TextWithColor(PlayerName(gv_HeroKillPlayer[EventPlayer()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_HeroKillPlayer[EventPlayer()], false))) + StringExternal("Param/Value/DAB50B22") + TextWithColor(UnitTypeGetName(UnitGetType(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]])), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/94486C00") + StringExternal("Param/Value/05DC0F58") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/365C631C") + TextWithColor(UnitTypeGetName(UnitGetType(gv_PlayerHero[EventPlayer()])), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/5BF56652") + StringExternal("Param/Value/3B1C6BBD")));
}

void gf_HrAssistantBonusTeam1 () {
    int i;

    text[12] assist_message;
    bool[12] participated_in_kill;
    int number_of_assists;

    for (i = 0; i <= 11; i += 1) {
        assist_message[i] = StringToText("");
    }

    if ((PlayerType(gv_PlayerBayul[1]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[1]) == c_playerStatusActive) && (gv_HeroKillPlayer[EventPlayer()] != gv_PlayerBayul[1]) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist") == true)) {
        participated_in_kill[gv_PlayerBayul[1]] = true;
        number_of_assists += 1;
    }
    if ((PlayerType(gv_PlayerBayul[2]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[2]) == c_playerStatusActive) && (gv_HeroKillPlayer[EventPlayer()] != gv_PlayerBayul[2]) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist3") == true)) {
        participated_in_kill[gv_PlayerBayul[2]] = true;
        number_of_assists += 1;
    }
    if ((PlayerType(gv_PlayerBayul[3]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[3]) == c_playerStatusActive) && (gv_HeroKillPlayer[EventPlayer()] != gv_PlayerBayul[3]) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist32") == true)) {
        participated_in_kill[gv_PlayerBayul[3]] = true;
        number_of_assists += 1;
    }
    if ((PlayerType(gv_PlayerBayul[4]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[4]) == c_playerStatusActive) && (gv_HeroKillPlayer[EventPlayer()] != gv_PlayerBayul[4]) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist322") == true)) {
        participated_in_kill[gv_PlayerBayul[4]] = true;
        number_of_assists += 1;
    }

    for (i = 1; i <= 4; i += 1) {
        if ((participated_in_kill[gv_PlayerBayul[i]] == true)) {
            assist_message[gv_PlayerBayul[i]] = (TextWithColor(PlayerName(gv_PlayerBayul[i]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_PlayerBayul[i], false))) + StringExternal("Param/Value/3934F88A"));
            gv_PlayerLevel[gv_PlayerBayul[i]][3] += 1;
            PlayerCreateEffectUnit(EventPlayer(), "HeroKillMo2", gv_PlayerHero[gv_PlayerBayul[i]]);
            libNtve_gf_SetDialogItemText(gv_ScoreDialogTotalScore[gv_PlayerBayul[i]], (StringExternal("Param/Value/2C3357F5") + IntToText(gv_PlayerLevel[gv_PlayerBayul[i]][1]) + StringExternal("Param/Value/D9E79FA4") + IntToText(gv_PlayerLevel[gv_PlayerBayul[i]][2]) + StringExternal("Param/Value/DC65B07B") + IntToText(gv_PlayerLevel[gv_PlayerBayul[i]][3]) + StringExternal("Param/Value/39AC057A")), PlayerGroupAll());
            UIDisplayMessage(PlayerGroupSingle(gv_PlayerBayul[i]), c_messageAreaSubtitle, (StringExternal("Param/Value/7498FB6B") + TextWithColor(StringExternal("Param/Value/A61AFE81"), Color(0.00, 87.45, 100.00)) + TextWithColor(IntToText(gv_HeroKillMoney[EventPlayer()][2]), Color(0.00, 87.45, 100.00)) + TextWithColor(StringExternal("Param/Value/DE3747DD"), Color(0.00, 87.45, 100.00)) + StringExternal("Param/Value/D089DE34")));
            if ((gv_StatIncreasesBought[gv_PlayerBayul[i]][15] == 1)) {
                PlayerCreateEffectUnit(EventPlayer(), "HeroKillMo22", gv_PlayerHero[gv_PlayerBayul[i]]);
                UIDisplayMessage(PlayerGroupSingle(gv_PlayerBayul[i]), c_messageAreaSubtitle, (StringExternal("Param/Value/F7E20A48") + TextWithColor(StringExternal("Param/Value/2C30D7B6"), Color(0.00, 87.45, 100.00)) + TextWithColor(IntToText((gv_HeroKillMoney[EventPlayer()][2] / 2)), Color(0.00, 87.45, 100.00)) + TextWithColor(StringExternal("Param/Value/3BEF4AFB"), Color(0.00, 87.45, 100.00)) + StringExternal("Param/Value/17688C44")));
            }

            if (((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 4) || (gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 4)) && (UnitHasBehavior(gv_PlayerHero[gv_PlayerBayul[i]], "SpellDong4") == true)) {
                UnitCreateEffectUnit(gv_PlayerHero[gv_PlayerBayul[i]], "Spelldong22", gv_PlayerHero[gv_PlayerBayul[i]]);
            }

            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 32) && (gv_SkillLevels[gv_PlayerBayul[i]][c_skillW] >= 1)) {
                PlayerCreateEffectPoint(gv_PlayerBayul[i], "Hero32Skill2G22", PointFromId(1));
            }
            else if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 34) && (gv_SkillLevels[gv_PlayerBayul[i]][c_skillR] >= 1)) {
                PlayerCreateEffectPoint(gv_PlayerBayul[i], "Hero34Skill4G", PointFromId(1));
            }
            else if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 46) && (TechTreeUpgradeCount(gv_PlayerBayul[i], "SpellUp222233322343", c_techCountCompleteOnly) < 50)) {
                UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[i]], "Hero46Passive", gv_PlayerHero[gv_PlayerBayul[i]], 1);
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp222233322343", 1);
            }
            else if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 66) && (TechTreeUpgradeCount(gv_PlayerBayul[i], "SpellUp222233322722322", c_techCountCompleteOnly) < 24)) {
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp222233322722322", 1);
                if (((TechTreeUpgradeCount(gv_PlayerBayul[i], "SpellUp222233322722322", c_techCountCompleteOnly) == 4) || (TechTreeUpgradeCount(gv_PlayerBayul[i], "SpellUp222233322722322", c_techCountCompleteOnly) == 8) || (TechTreeUpgradeCount(gv_PlayerBayul[i], "SpellUp222233322722322", c_techCountCompleteOnly) == 12) || (TechTreeUpgradeCount(gv_PlayerBayul[i], "SpellUp222233322722322", c_techCountCompleteOnly) == 16) || (TechTreeUpgradeCount(gv_PlayerBayul[i], "SpellUp222233322722322", c_techCountCompleteOnly) == 24))) {
                    PlayerCreateEffectPoint(gv_PlayerBayul[i], "Hero66Passive", PointFromId(1));
                }
            }
            else if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 70) && (UnitHasBehavior(gv_PlayerHero[gv_PlayerBayul[i]], "Hero70Skill2cool") == true)) {
                UnitCreateEffectUnit(gv_PlayerHero[gv_PlayerBayul[i]], "Hero70Skill2Dong3", gv_PlayerHero[gv_PlayerBayul[i]]);
            }
        }
    }
    if ((number_of_assists >= 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/A1D07191") + assist_message[gv_PlayerBayul[1]] + assist_message[gv_PlayerBayul[2]] + assist_message[gv_PlayerBayul[3]] + assist_message[gv_PlayerBayul[4]] + StringExternal("Param/Value/D2E6CCBC")));
    }
}

void gf_HrAssistantBonusTeam2 () {
    int i;

    text[12] assist_message;
    bool[12] participated_in_kill;
    int number_of_assists;

    for (i = 0; i <= 11; i += 1) {
        assist_message[i] = StringToText("");
    }
    if ((PlayerType(gv_PlayerBayul[5]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[5]) == c_playerStatusActive) && (gv_HeroKillPlayer[EventPlayer()] != gv_PlayerBayul[5]) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist3222") == true)) {
        participated_in_kill[gv_PlayerBayul[5]] = true;
        number_of_assists += 1;
    }
    if ((PlayerType(gv_PlayerBayul[6]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[6]) == c_playerStatusActive) && (gv_HeroKillPlayer[EventPlayer()] != gv_PlayerBayul[6]) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist32222") == true)) {
        participated_in_kill[gv_PlayerBayul[6]] = true;
        number_of_assists += 1;
    }
    if ((PlayerType(gv_PlayerBayul[7]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[7]) == c_playerStatusActive) && (gv_HeroKillPlayer[EventPlayer()] != gv_PlayerBayul[7]) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist322222") == true)) {
        participated_in_kill[gv_PlayerBayul[7]] = true;
        number_of_assists += 1;
    }
    if ((PlayerType(gv_PlayerBayul[8]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[8]) == c_playerStatusActive) && (gv_HeroKillPlayer[EventPlayer()] != gv_PlayerBayul[8]) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist3222222") == true)) {
        participated_in_kill[gv_PlayerBayul[8]] = true;
        number_of_assists += 1;
    }

    for (i = 5; i <= 8; i += 1) {
        if ((participated_in_kill[gv_PlayerBayul[i]] == true)) {
            assist_message[gv_PlayerBayul[i]] = (TextWithColor(PlayerName(gv_PlayerBayul[i]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_PlayerBayul[i], false))) + StringExternal("Param/Value/057E1FFE"));
            gv_PlayerLevel[gv_PlayerBayul[i]][3] += 1;
            PlayerCreateEffectUnit(EventPlayer(), "HeroKillMo2", gv_PlayerHero[gv_PlayerBayul[i]]);
            libNtve_gf_SetDialogItemText(gv_ScoreDialogTotalScore[gv_PlayerBayul[i]], (StringExternal("Param/Value/30C3264C") + IntToText(gv_PlayerLevel[gv_PlayerBayul[i]][1]) + StringExternal("Param/Value/C140D7C8") + IntToText(gv_PlayerLevel[gv_PlayerBayul[i]][2]) + StringExternal("Param/Value/9130939D") + IntToText(gv_PlayerLevel[gv_PlayerBayul[i]][3]) + StringExternal("Param/Value/581A015F")), PlayerGroupAll());
            UIDisplayMessage(PlayerGroupSingle(gv_PlayerBayul[i]), c_messageAreaSubtitle, (StringExternal("Param/Value/878D3123") + TextWithColor(StringExternal("Param/Value/86749EDE"), Color(0.00, 87.45, 100.00)) + TextWithColor(IntToText(gv_HeroKillMoney[EventPlayer()][2]), Color(0.00, 87.45, 100.00)) + TextWithColor(StringExternal("Param/Value/F27D4BF3"), Color(0.00, 87.45, 100.00)) + StringExternal("Param/Value/806A603B")));
            if ((gv_StatIncreasesBought[gv_PlayerBayul[i]][15] == 1)) {
                PlayerCreateEffectUnit(EventPlayer(), "HeroKillMo22", gv_PlayerHero[gv_PlayerBayul[i]]);
                UIDisplayMessage(PlayerGroupSingle(gv_PlayerBayul[i]), c_messageAreaSubtitle, (StringExternal("Param/Value/0DFFE2F2") + TextWithColor(StringExternal("Param/Value/4B765203"), Color(0.00, 87.45, 100.00)) + TextWithColor(IntToText((gv_HeroKillMoney[EventPlayer()][2] / 2)), Color(0.00, 87.45, 100.00)) + TextWithColor(StringExternal("Param/Value/602F3107"), Color(0.00, 87.45, 100.00)) + StringExternal("Param/Value/0A4EA953")));
            }

            if (((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 4) || (gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 4)) && (UnitHasBehavior(gv_PlayerHero[gv_PlayerBayul[i]], "SpellDong4") == true)) {
                UnitCreateEffectUnit(gv_PlayerHero[gv_PlayerBayul[i]], "Spelldong22", gv_PlayerHero[gv_PlayerBayul[i]]);
            }

            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 32) && (gv_SkillLevels[gv_PlayerBayul[i]][c_skillW] >= 1)) {
                PlayerCreateEffectPoint(gv_PlayerBayul[i], "Hero32Skill2G22", PointFromId(1));
            }
            else if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 34) && (gv_SkillLevels[gv_PlayerBayul[i]][c_skillR] >= 1)) {
                PlayerCreateEffectPoint(gv_PlayerBayul[i], "Hero34Skill4G", PointFromId(1));
            }
            else if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 46) && (TechTreeUpgradeCount(gv_PlayerBayul[i], "SpellUp222233322343", c_techCountCompleteOnly) < 50)) {
                UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[i]], "Hero46Passive", gv_PlayerHero[gv_PlayerBayul[i]], 1);
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp222233322343", 1);
            }
            else if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 66) && (TechTreeUpgradeCount(gv_PlayerBayul[i], "SpellUp222233322722322", c_techCountCompleteOnly) < 24)) {
                TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp222233322722322", 1);
                if (((TechTreeUpgradeCount(gv_PlayerBayul[i], "SpellUp222233322722322", c_techCountCompleteOnly) == 4) || (TechTreeUpgradeCount(gv_PlayerBayul[i], "SpellUp222233322722322", c_techCountCompleteOnly) == 8) || (TechTreeUpgradeCount(gv_PlayerBayul[i], "SpellUp222233322722322", c_techCountCompleteOnly) == 12) || (TechTreeUpgradeCount(gv_PlayerBayul[i], "SpellUp222233322722322", c_techCountCompleteOnly) == 16) || (TechTreeUpgradeCount(gv_PlayerBayul[i], "SpellUp222233322722322", c_techCountCompleteOnly) == 24))) {
                    PlayerCreateEffectPoint(gv_PlayerBayul[i], "Hero66Passive", PointFromId(1));
                }
            }
            else if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 70) && (UnitHasBehavior(gv_PlayerHero[gv_PlayerBayul[i]], "Hero70Skill2cool") == true)) {
                UnitCreateEffectUnit(gv_PlayerHero[gv_PlayerBayul[i]], "Hero70Skill2Dong3", gv_PlayerHero[gv_PlayerBayul[i]]);
            }
        }
    }
    if ((number_of_assists >= 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/9C537CB8") + assist_message[gv_PlayerBayul[5]] + assist_message[gv_PlayerBayul[6]] + assist_message[gv_PlayerBayul[7]] + assist_message[gv_PlayerBayul[8]] + StringExternal("Param/Value/D53A8EAC")));
    }
}

void gf_HrHeroBuffPut () {
    if ((gv_HeroBuffIng[EventPlayer()][0] >= 1)) {
        PlayerCreateEffectPoint(EventPlayer(), "HeroOkGi22232222", PointFromId(1));
        if ((PlayerType(gv_HeroKillPlayer[EventPlayer()]) == c_playerTypeUser) && (gv_HeroDeathBoolean[gv_HeroKillPlayer[EventPlayer()]] == false)) {
            gv_HeroBuffIng[gv_HeroKillPlayer[EventPlayer()]][0] = 1;
            if (gv_HeroInformation[gv_SelectedCharNum[gv_HeroKillPlayer[EventPlayer()]] - 1].ability_resource != c_abilityResourceHeat) {
                UnitBehaviorAdd(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "SpellDong24242", gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], 1);
            } else {
                UnitBehaviorAdd(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "SpellDong242424", gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], 1);
            }
        }
    }

    if ((gv_HeroBuffIng[EventPlayer()][1] >= 1)) {
        PlayerCreateEffectPoint(EventPlayer(), "HeroOkGi2223222", PointFromId(1));
        if ((PlayerType(gv_HeroKillPlayer[EventPlayer()]) == c_playerTypeUser) && (gv_HeroDeathBoolean[gv_HeroKillPlayer[EventPlayer()]] == false)) {
            gv_HeroBuffIng[gv_HeroKillPlayer[EventPlayer()]][1] = 1;
            if ((UnitHasBehavior(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "SpellDong242423") == true)) {
                UnitBehaviorAdd(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "SpellDong242423", gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], 1);
            }
            else {
                UnitBehaviorAdd(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "SpellDong242423", gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], 1);
                TechTreeUpgradeAddLevel(gv_HeroKillPlayer[EventPlayer()], "SpellUp2222333222332", 2);
                TechTreeUpgradeAddLevel(gv_HeroKillPlayer[EventPlayer()], "SpellUp2222333222332222", 2);
                TechTreeUpgradeAddLevel(gv_HeroKillPlayer[EventPlayer()], "SpellUp2222333222332222222", 2);
                TechTreeUpgradeAddLevel(gv_HeroKillPlayer[EventPlayer()], "SpellUp2222333222332222222222", 2);
            }
        }
    }
}

void gf_HrHeroPassiveRepair () {
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Toherodamage", gv_PlayerHero[EventPlayer()], 1);
    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Critical3", gv_PlayerHero[EventPlayer()], 1);
    if ((gv_StatIncreasesBought[EventPlayer()][22] >= 1)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "MagicShield", gv_PlayerHero[EventPlayer()], 1);
    }

    if ((gv_StatIncreasesBought[EventPlayer()][23] >= 1)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "MagmaFire", gv_PlayerHero[EventPlayer()], 1);
    }

    if ((gv_SelectedCharNum[EventPlayer()] == 10)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "HeroDeathPrevention23", gv_PlayerHero[EventPlayer()], 1);
    }
    else if ((gv_SelectedCharNum[EventPlayer()] == 17)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "HeroDeathPrevention24", gv_PlayerHero[EventPlayer()], 1);
    }
    else if ((gv_SelectedCharNum[EventPlayer()] == 20)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "SpellDong322222262", gv_PlayerHero[EventPlayer()], 1);
    }
    else if ((gv_SelectedCharNum[EventPlayer()] == 21)) {
        UnitBehaviorAddPlayer(gv_PlayerHero[EventPlayer()], "Hero21Skill122", EventPlayer(), 1);
    }
    else if ((gv_SelectedCharNum[EventPlayer()] == 34)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Hero34PassiveSlow2", gv_PlayerHero[EventPlayer()], 1);
    }
    else if ((gv_SelectedCharNum[EventPlayer()] == 35)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Hero35Passive", gv_PlayerHero[EventPlayer()], 1);
    }
    else if ((gv_SelectedCharNum[EventPlayer()] == 39)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Hero39PassiveCool", gv_PlayerHero[EventPlayer()], 1);
    }
    else if ((gv_SelectedCharNum[EventPlayer()] == 48)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Hero48Passive", gv_PlayerHero[EventPlayer()], 1);
    }
    else if ((gv_SelectedCharNum[EventPlayer()] == 52)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Hero52Skill4222", gv_PlayerHero[EventPlayer()], 1);
    }
    else if ((gv_SelectedCharNum[EventPlayer()] == 68)) {
        if ((gv_SkillLevels[EventPlayer()][c_skillW] >= 1)) {
            UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Hero68Skill2", gv_PlayerHero[EventPlayer()], 1);
        }
    }
}

void gf_HrStartBeforeCounterMake () {
    DialogCreate(250, 150, c_anchorCenter, 0, -200, true);
    gv_BeforeStartCounterDialog[0] = DialogLastCreated();
    DialogSetImageVisible(gv_BeforeStartCounterDialog[0], false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 130, 100, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_blueinnercontainerframe.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_BeforeStartCounterDialogImage = DialogControlLastCreated();
    DialogControlCreate(gv_BeforeStartCounterDialog[0], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 135, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 3, 5);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/94D343D6") + IntToText(gv_BeforeStartCounterDialogNum) + StringExternal("Param/Value/45769D9C")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_BeforeStartCounterDialogLabel[0] = DialogControlLastCreated();
    DialogCreate(600, 150, c_anchorCenter, 0, -350, true);
    gv_BeforeStartCounterDialog[1] = DialogLastCreated();
    DialogSetImageVisible(gv_BeforeStartCounterDialog[1], false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 600, 80);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/11884929") + TextWithColor(PlayerName(1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false))) + TextWithColor(StringExternal("Param/Value/34283B96"), Color(100.00, 100.00, 100.00))), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_BeforeStartCounterDialogLabel[1] = DialogControlLastCreated();
}

void gf_HrStartBeforeCounterMake2 () {
    DialogCreate(550, 120, c_anchorTop, 0, 70, true);
    gv_BeforeStartCounterWindow = DialogLastCreated();
    DialogSetImageVisible(gv_BeforeStartCounterWindow, false);
    DialogControlCreate(gv_BeforeStartCounterWindow, c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, 80);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 30);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/B8036857") + IntToText(gv_BeforeStartCounterWindowVar) + StringExternal("Param/Value/FCF0A61C")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_BeforeStartCounterWindowNum = DialogControlLastCreated();
}

void gf_HrStartBeforeCounterMake3 () {
    DialogCreate(685, 455, c_anchorCenter, 0, -123, true);
    gv_CharChooseDialog[0] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 685, 455, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_armory_text_outerframe.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_CharChooseDialogImage[0] = DialogControlLastCreated();
    DialogSetImageVisible(gv_CharChooseDialog[0], false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 700, 85, c_anchorTop, 0, 15, StringToText(""), "Assets\\Textures\\ui_ingame_playervision_colorbg.dds", c_triggerImageTypeNormal, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_CharChooseDialogImage[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 27);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/E0E1A27E") + TextWithColor(StringExternal("Param/Value/96D4980E"), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/7AD502C2")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_CharChooseDialogLabel[0] = DialogControlLastCreated();
    gf_HrCharSelectDialogHeroBtnMake1();
    DialogCreate(685, 455, c_anchorCenter, 0, -123, true);
    gv_CharChooseDialog[3] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 685, 455, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_armory_text_outerframe.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_CharChooseDialogImage[7] = DialogControlLastCreated();
    DialogSetImageVisible(gv_CharChooseDialog[3], false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 700, 85, c_anchorTop, 0, 15, StringToText(""), "Assets\\Textures\\ui_ingame_playervision_colorbg.dds", c_triggerImageTypeNormal, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_CharChooseDialogImage[8] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 27);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/FB5D33D4") + TextWithColor(StringExternal("Param/Value/0D37E18B"), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/146229BA")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_CharChooseDialogLabel[3] = DialogControlLastCreated();
    gf_HrCharSelectDialogHeroBtnMake2();
    DialogCreate(685, 455, c_anchorCenter, 0, -123, true);
    gv_CharChooseDialog[5] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 685, 455, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_armory_text_outerframe.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_CharChooseDialogImage[9] = DialogControlLastCreated();
    DialogSetImageVisible(gv_CharChooseDialog[5], false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 700, 85, c_anchorTop, 0, 15, StringToText(""), "Assets\\Textures\\ui_ingame_playervision_colorbg.dds", c_triggerImageTypeNormal, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_CharChooseDialogImage[10] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 27);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/69AAADF8") + TextWithColor(StringExternal("Param/Value/04DF2E8C"), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/34C3F65A")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_CharChooseDialogLabel[4] = DialogControlLastCreated();
    gf_HrCharSelectDialogHeroBtnMake3();
    DialogCreate(685, 455, c_anchorCenter, 0, -123, true);
    gv_CharChooseDialog[6] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 685, 455, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_armory_text_outerframe.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_CharChooseDialogImage[11] = DialogControlLastCreated();
    DialogSetImageVisible(gv_CharChooseDialog[6], false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 700, 85, c_anchorTop, 0, 15, StringToText(""), "Assets\\Textures\\ui_ingame_playervision_colorbg.dds", c_triggerImageTypeNormal, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_CharChooseDialogImage[12] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 27);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/87951378") + TextWithColor(StringExternal("Param/Value/443D63A6"), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/D7947AF7")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_CharChooseDialogLabel[5] = DialogControlLastCreated();
    gf_HrCharSelectDialogHeroBtnMake4();
    DialogCreate(685, 455, c_anchorCenter, 0, -123, true);
    gv_CharChooseDialog[7] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 685, 455, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_armory_text_outerframe.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_CharChooseDialogImage[13] = DialogControlLastCreated();
    DialogSetImageVisible(gv_CharChooseDialog[7], false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 700, 85, c_anchorTop, 0, 15, StringToText(""), "Assets\\Textures\\ui_ingame_playervision_colorbg.dds", c_triggerImageTypeNormal, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_CharChooseDialogImage[14] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 27);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/782A238D") + TextWithColor(StringExternal("Param/Value/62B9222C"), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/BB63803C")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_CharChooseDialogLabel[6] = DialogControlLastCreated();
    gf_HrCharSelectDialogHeroBtnMake5();
    DialogCreate(685, 100, c_anchorCenter, 0, 70, true);
    gv_CharChooseDialog[4] = DialogLastCreated();
    DialogSetImageVisible(gv_CharChooseDialog[4], false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 225, 60, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/0CBFDDE9"), "Assets\\Textures\\ui_battlenet_glue_navbuttons_orange_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_orange_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    gv_CharChooseDialogReadyBtn = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 70, c_anchorCenter, -200, 3, StringToText(""), StringToText(""), "Assets\\Textures\\ui_button_nav_right_normaloverpressedover_protoss.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_nav_right_normalpressed_protoss.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    gv_CharChooseDialogNextBtn[0] = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorCenter, -200, 4, StringToText(""), "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_disabled.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseDialogNextImage[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 170, 70, c_anchorCenter, 200, 3, StringToText(""), StringToText(""), "Assets\\Textures\\ui_button_nav_left_normaloverpressedover_protoss.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_button_nav_left_normalpressed_protoss.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    gv_CharChooseDialogNextBtn[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorCenter, 200, 4, StringToText(""), "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseDialogNextImage[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRotation(gv_CharChooseDialogNextImage[1], 180, PlayerGroupAll());
    DialogCreate(550, 300, c_anchorCenter, 0, 0, true);
    gv_CharChooseDialog[1] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 550, 300, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_armory_text_outerframe.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    DialogSetImageVisible(gv_CharChooseDialog[1], false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 650, 85, c_anchorTop, 0, 15, StringToText(""), "Assets\\Textures\\ui_ingame_playervision_colorbg.dds", c_triggerImageTypeNormal, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_CharChooseDialogImage[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 27);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/9E9A042C") + TextWithColor(StringExternal("Param/Value/4C5AE804"), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/ECB2D1D5")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_CharChooseDialogLabel[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 70, c_anchorCenter, -50, -20, StringToText(""), StringExternal("Param/Value/A1199FED"), "Assets\\Textures\\ui_battlenet_glue_navbuttons_blue_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_blue_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    gv_GameModeBtn[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 70, c_anchorCenter, -50, 60, StringToText(""), StringExternal("Param/Value/D523EB49"), "Assets\\Textures\\ui_battlenet_glue_navbuttons_blue_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_blue_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    gv_GameModeBtn[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 85, 90, c_anchorCenter, 166, -20, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_dialogbox_header.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseDialogImage[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 85, 90, c_anchorCenter, 166, 60, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_dialogbox_header.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseDialogImage[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 70, c_anchorCenter, 167, -1, (StringExternal("Param/Value/FD1FDC82") + TextWithColor(IntToText(gv_GameModeVoteInt[0]), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/9DC3D54C")), Color(100,100,100), false, 0.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_GameModeLabel[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 70, c_anchorCenter, 167, 79, (StringExternal("Param/Value/3982B81A") + TextWithColor(IntToText(gv_GameModeVoteInt[0]), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/1255ADAD")), Color(100,100,100), false, 0.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_GameModeLabel[1] = DialogControlLastCreated();
    DialogCreate(685, 310, c_anchorCenter, 0, 245, true);
    gv_CharChooseDialog[2] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 685, 310, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_armory_text_outerframe.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    DialogSetImageVisible(gv_CharChooseDialog[2], false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 700, 85, c_anchorTop, 0, 15, StringToText(""), "Assets\\Textures\\ui_ingame_playervision_colorbg.dds", c_triggerImageTypeNormal, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_CharChooseDialogImage[6] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 27);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/652FC3C6") + TextWithColor(StringExternal("Param/Value/2A46CE28"), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/02F1E97E")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_CharChooseDialogLabel[2] = DialogControlLastCreated();
    gf_HrCharSelectDialogSpellBtnMake1();
    gf_HrCharSelectDialogSpellBtnMake2();
}

void gf_HrCharSelectDialogHeroBtnMake1 () {
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 30, 80, StringExternal("Param/Value/2494C124"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 40, 90, StringToText(""), "Assets\\Textures\\btn-unit-terran-tosh.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 135, 80, StringExternal("Param/Value/3CADB326"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 145, 90, StringToText(""), "Assets\\Textures\\btn-unit-protoss-zeratul.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 240, 80, StringExternal("Param/Value/08DEC2A7"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 250, 90, StringToText(""), "Assets\\Textures\\btn-unit-zerg-ultralisk.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 345, 80, StringExternal("Param/Value/B99391E7"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 355, 90, StringToText(""), "Assets\\Textures\\btn-unit-protoss-archon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 450, 80, StringExternal("Param/Value/41DC308B"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 460, 90, StringToText(""), "Assets\\Textures\\btn-unit-protoss-tassadar.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 555, 80, StringExternal("Param/Value/6466DB4A"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 565, 90, StringToText(""), "Assets\\AddIcon\\btn-hero6.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 30, 180, StringExternal("Param/Value/9AA5AECB"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 40, 190, StringToText(""), "Assets\\Textures\\btn-unit-terran-medic.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 135, 180, StringExternal("Param/Value/9748FA07"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 145, 190, StringToText(""), "Assets\\Textures\\btn-unit-terran-reaper.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 240, 180, StringExternal("Param/Value/7CA18253"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 250, 190, StringToText(""), "Assets\\Textures\\btn-unit-terran-nova.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 345, 180, StringExternal("Param/Value/95804919"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 355, 190, StringToText(""), "Assets\\Textures\\btn-unit-zerg-baneling.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 450, 180, StringExternal("Param/Value/5A3FD145"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 460, 190, StringToText(""), "Assets\\Textures\\btn-unit-zerg-kerrigan.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 555, 180, StringExternal("Param/Value/7158C425"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 565, 190, StringToText(""), "Assets\\AddIcon\\btn-hero12.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 30, 280, StringExternal("Param/Value/8455CA56"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 40, 290, StringToText(""), "Assets\\AddIcon\\btn-hero13.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 135, 280, StringExternal("Param/Value/D9C3DF2D"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 145, 290, StringToText(""), "Assets\\Textures\\btn-unit-terran-marauderswann.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 240, 280, StringExternal("Param/Value/55C50E51"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 250, 290, StringToText(""), "Assets\\AddIcon\\btn-hero15.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 345, 280, StringExternal("Param/Value/AE11B399"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 355, 290, StringToText(""), "Assets\\Textures\\btn-unit-zerg-roach.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 450, 280, StringExternal("Param/Value/B2BEFDCA"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[16] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 460, 290, StringToText(""), "Assets\\Textures\\btn-unit-zerg-aberration.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[16] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[0], 100, 100, c_anchorTopLeft, 555, 280, StringExternal("Param/Value/7ABB05AB"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowRandomBtn[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[0], 80, 80, c_anchorTopLeft, 565, 290, StringToText(""), "Assets\\Textures\\btn-tips-tutorial.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowRandomImage[0] = DialogControlLastCreated();
}

void gf_HrCharSelectDialogHeroBtnMake2 () {
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 30, 80, StringExternal("Param/Value/1878496C"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[17] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 40, 90, StringToText(""), "Assets\\Textures\\btn-unit-xelnaga-viper.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[17] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 135, 80, StringExternal("Param/Value/1B2F1AB7"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[18] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 145, 90, StringToText(""), "Assets\\AddIcon\\btn-hero19.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[18] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 240, 80, StringExternal("Param/Value/8717D8EE"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[19] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 250, 90, StringToText(""), "Assets\\Textures\\btn-unit-protoss-darktemplar.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[19] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 345, 80, StringExternal("Param/Value/74C4A260"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[20] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 355, 90, StringToText(""), "Assets\\AddIcon\\btn-hero21.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[20] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 450, 80, StringExternal("Param/Value/3B94E9B5"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[21] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 460, 90, StringToText(""), "Assets\\Textures\\btn-unit-terran-thor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[21] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 555, 80, StringExternal("Param/Value/92BE3943"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[22] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 565, 90, StringToText(""), "Assets\\AddIcon\\btn-hero23.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[22] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 30, 180, StringExternal("Param/Value/A4BD21B2"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[23] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 40, 190, StringToText(""), "Assets\\AddIcon\\btn-hero24.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[23] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 135, 180, StringExternal("Param/Value/39037900"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[24] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 145, 190, StringToText(""), "Assets\\Textures\\btn-unit-zerg-hydralisk.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[24] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 240, 180, StringExternal("Param/Value/E505BA23"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[25] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 250, 190, StringToText(""), "Assets\\Textures\\btn-unit-terran-medicstetmann.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[25] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 345, 180, StringExternal("Param/Value/18E8773C"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[26] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 355, 190, StringToText(""), "Assets\\Textures\\btn-unit-terran-predator.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[26] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 450, 180, StringExternal("Param/Value/907E3D24"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[27] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 460, 190, StringToText(""), "Assets\\Textures\\btn-unit-terran-firebatmercenary.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[27] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 555, 180, StringExternal("Param/Value/CE0B43F5"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[28] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 565, 190, StringToText(""), "Assets\\Textures\\btn-unit-zerg-queen.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[28] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 30, 280, StringExternal("Param/Value/532D16E6"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[29] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 40, 290, StringToText(""), "Assets\\AddIcon\\btn-hero30.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[29] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 135, 280, StringExternal("Param/Value/C5529E37"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[30] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 145, 290, StringToText(""), "Assets\\AddIcon\\btn-hero31.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[30] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 240, 280, StringExternal("Param/Value/B880D41C"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[31] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 90, 90, c_anchorTopLeft, 245, 285, StringToText(""), "Assets\\Textures\\btn-unit-zerg-zergling.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[31] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 345, 280, StringExternal("Param/Value/BEDAB7D4"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[32] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 90, 90, c_anchorTopLeft, 350, 285, StringToText(""), "Assets\\Textures\\btn-unit-rifleman.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[32] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 450, 280, StringExternal("Param/Value/A43FE6A8"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[33] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 460, 290, StringToText(""), "Assets\\Textures\\btn-unit-zerg-infestor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[33] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[3], 100, 100, c_anchorTopLeft, 555, 280, StringExternal("Param/Value/1B3FDE96"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowRandomBtn[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[3], 80, 80, c_anchorTopLeft, 565, 290, StringToText(""), "Assets\\Textures\\btn-tips-tutorial.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowRandomImage[1] = DialogControlLastCreated();
}

void gf_HrCharSelectDialogHeroBtnMake3 () {
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 30, 80, StringExternal("Param/Value/12AE0B68"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[34] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 40, 90, StringToText(""), "Assets\\Textures\\btn-unit-protos-soulhunter.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[34] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 135, 80, StringExternal("Param/Value/7C82E900"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[35] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 145, 90, StringToText(""), "Assets\\AddIcon\\LadyAlexstrasa_Btn.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[35] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 240, 80, StringExternal("Param/Value/BD931C19"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[36] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 85, 85, c_anchorTopLeft, 248, 87, StringToText(""), "Assets\\AddIcon\\btn-hero37.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[36] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 345, 80, StringExternal("Param/Value/2D42F20D"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[37] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 355, 90, StringToText(""), "Assets\\AddIcon\\btn-hero38.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[37] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 450, 80, StringExternal("Param/Value/E509E242"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[38] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 460, 90, StringToText(""), "Assets\\Textures\\btn-unit-zerg-broodlord.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[38] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 555, 80, StringExternal("Param/Value/999838A0"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[39] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 565, 90, StringToText(""), "Assets\\AddIcon\\btn-hero40.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[39] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 30, 180, StringExternal("Param/Value/5C821AB5"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[40] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 40, 190, StringToText(""), "Assets\\Textures\\btn-unit-terran-siegetank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[40] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 135, 180, StringExternal("Param/Value/4B47610B"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[41] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 145, 190, StringToText(""), "Assets\\AddIcon\\btn-hero42.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[41] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 240, 180, StringExternal("Param/Value/82A0CD73"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[42] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 90, 90, c_anchorTopLeft, 245, 185, StringToText(""), "Assets\\AddIcon\\btn-hero43.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[42] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 345, 180, StringExternal("Param/Value/9C88A981"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[43] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 355, 190, StringToText(""), "Assets\\AddIcon\\btn-hero44.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[43] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 450, 180, StringExternal("Param/Value/132BAF62"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[44] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 460, 190, StringToText(""), "Assets\\Textures\\btn-unit-protoss-zealot-nerazim.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[44] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 555, 180, StringExternal("Param/Value/064F4967"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[45] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 565, 190, StringToText(""), "Assets\\AddIcon\\btn-hero46.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[45] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 30, 280, StringExternal("Param/Value/2873890B"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[46] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 40, 290, StringToText(""), "Assets\\AddIcon\\btn-hero47.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[46] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 135, 280, StringExternal("Param/Value/DE70428C"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[47] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 90, 90, c_anchorTopLeft, 140, 285, StringToText(""), "Assets\\Textures\\btn-unit-protoss-colossus.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[47] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 240, 280, StringExternal("Param/Value/42998C10"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[48] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 250, 290, StringToText(""), "Assets\\AddIcon\\btn-hero49.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[48] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 345, 280, StringExternal("Param/Value/EC0E1493"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[49] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 355, 290, StringToText(""), "Assets\\AddIcon\\btn-hero50.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[49] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 450, 280, StringExternal("Param/Value/BF089656"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[50] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 460, 290, StringToText(""), "Assets\\AddIcon\\btn-hero51.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[50] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[5], 100, 100, c_anchorTopLeft, 555, 280, StringExternal("Param/Value/8C1FFB5E"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowRandomBtn[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[5], 80, 80, c_anchorTopLeft, 565, 290, StringToText(""), "Assets\\Textures\\btn-tips-tutorial.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowRandomImage[2] = DialogControlLastCreated();
}

void gf_HrCharSelectDialogHeroBtnMake4 () {
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 30, 80, StringExternal("Param/Value/3EC1BF6D"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[51] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 80, 80, c_anchorTopLeft, 40, 90, StringToText(""), "Assets\\AddIcon\\btn-hero52.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[51] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 135, 80, StringExternal("Param/Value/3700BB02"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[52] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 90, 90, c_anchorTopLeft, 140, 85, StringToText(""), "Assets\\Textures\\btn-unit-zerg-infestedcolonist.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[52] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 240, 80, StringExternal("Param/Value/CE13BE6F"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[53] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 85, 85, c_anchorTopLeft, 248, 87, StringToText(""), "Assets\\AddIcon\\btn-hero54.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[53] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 345, 80, StringExternal("Param/Value/DD93132A"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[54] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 80, 80, c_anchorTopLeft, 355, 90, StringToText(""), "Assets\\AddIcon\\btn-hero55.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[54] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 450, 80, StringExternal("Param/Value/133EDE5E"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[55] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 80, 80, c_anchorTopLeft, 460, 90, StringToText(""), "Assets\\AddIcon\\btn-hero56.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[55] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 555, 80, StringExternal("Param/Value/E71AFA18"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[56] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 80, 80, c_anchorTopLeft, 565, 90, StringToText(""), "Assets\\AddIcon\\btn-hero57.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[56] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 30, 180, StringExternal("Param/Value/AAA3638A"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[57] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 80, 80, c_anchorTopLeft, 40, 190, StringToText(""), "Assets\\AddIcon\\btn-hero58.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[57] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 135, 180, StringExternal("Param/Value/7F1D3CCC"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[58] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 80, 80, c_anchorTopLeft, 145, 190, StringToText(""), "Assets\\AddIcon\\btn-hero59.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[58] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 240, 180, StringExternal("Param/Value/F1852CE0"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[59] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 85, 85, c_anchorTopLeft, 250, 190, StringToText(""), "Assets\\AddIcon\\btn-hero60.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[59] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 345, 180, StringExternal("Param/Value/32ED0183"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[60] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 80, 80, c_anchorTopLeft, 355, 190, StringToText(""), "Assets\\AddIcon\\btn-hero61.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[60] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 450, 180, StringExternal("Param/Value/8293832A"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[61] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 80, 80, c_anchorTopLeft, 460, 190, StringToText(""), "Assets\\AddIcon\\btn-hero62.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[61] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 555, 180, StringExternal("Param/Value/8B98AB21"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[62] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 80, 80, c_anchorTopLeft, 565, 190, StringToText(""), "Assets\\AddIcon\\btn-hero63.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[62] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 30, 280, StringExternal("Param/Value/D869F3D6"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[63] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 80, 80, c_anchorTopLeft, 40, 290, StringToText(""), "Assets\\AddIcon\\btn-hero64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[63] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 135, 280, StringExternal("Param/Value/037DA826"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[64] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 80, 80, c_anchorTopLeft, 145, 290, StringToText(""), "Assets\\AddIcon\\btn-hero65.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[64] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 240, 280, StringExternal("Param/Value/3C2AF12A"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[65] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 80, 80, c_anchorTopLeft, 250, 290, StringToText(""), "Assets\\AddIcon\\btn-hero66.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[65] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 345, 280, StringExternal("Param/Value/6FAECD8C"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[66] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 80, 80, c_anchorTopLeft, 355, 290, StringToText(""), "Assets\\AddIcon\\btn-hero67.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[66] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 450, 280, StringExternal("Param/Value/5F126115"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[67] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 70, 70, c_anchorTopLeft, 464, 294, StringToText(""), "Assets\\AddIcon\\btn-hero68.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[67] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[6], 100, 100, c_anchorTopLeft, 555, 280, StringExternal("Param/Value/1276829B"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowRandomBtn[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[6], 80, 80, c_anchorTopLeft, 565, 290, StringToText(""), "Assets\\Textures\\btn-tips-tutorial.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowRandomImage[3] = DialogControlLastCreated();
}

void gf_HrCharSelectDialogHeroBtnMake5 () {
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 30, 80, StringExternal("Param/Value/29858E35"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[68] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 40, 90, StringToText(""), "Assets\\AddIcon\\btn-hero69.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[68] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 135, 80, StringExternal("Param/Value/5AECD57D"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[69] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 145, 90, StringToText(""), "Assets\\AddIcon\\btn-hero70.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[69] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 240, 80, StringExternal("Param/Value/F920FBAE"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[70] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 85, 85, c_anchorTopLeft, 248, 87, StringToText(""), "Assets\\AddIcon\\btn-hero71.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[70] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 345, 80, StringExternal("Param/Value/DC59CFAB"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[71] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 355, 90, StringToText(""), "Assets\\AddIcon\\btn-hero72.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[71] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 450, 80, StringExternal("Param/Value/5BAB177E"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[72] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 460, 90, StringToText(""), "Assets\\AddIcon\\btn-hero73.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[72] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 555, 80, StringToText(""), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[73] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 565, 90, StringToText(""), "Assets\\AddIcon\\btn-hero57.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[73] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 30, 180, StringToText(""), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[74] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 40, 190, StringToText(""), "Assets\\AddIcon\\btn-hero58.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[74] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 135, 180, StringToText(""), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[75] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 145, 190, StringToText(""), "Assets\\AddIcon\\btn-hero59.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[75] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 240, 180, StringToText(""), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[76] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 85, 85, c_anchorTopLeft, 250, 190, StringToText(""), "Assets\\AddIcon\\btn-hero60.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[76] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 345, 180, StringToText(""), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[77] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 355, 190, StringToText(""), "Assets\\AddIcon\\btn-hero61.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[77] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 450, 180, StringToText(""), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[78] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 460, 190, StringToText(""), "Assets\\AddIcon\\btn-hero62.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[78] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 555, 180, StringToText(""), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[79] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 565, 190, StringToText(""), "Assets\\AddIcon\\btn-hero63.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[79] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 30, 280, StringToText(""), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[80] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 40, 290, StringToText(""), "Assets\\AddIcon\\btn-hero64.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[80] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 135, 280, StringToText(""), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[81] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 145, 290, StringToText(""), "Assets\\AddIcon\\btn-hero65.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[81] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 240, 280, StringToText(""), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[82] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 250, 290, StringToText(""), "Assets\\AddIcon\\btn-hero66.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[82] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 345, 280, StringToText(""), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[83] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 355, 290, StringToText(""), "Assets\\AddIcon\\btn-hero67.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[83] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 450, 280, StringToText(""), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowBtn[84] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 70, 70, c_anchorTopLeft, 464, 294, StringToText(""), "Assets\\AddIcon\\btn-hero68.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowImage[84] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[7], 100, 100, c_anchorTopLeft, 555, 280, StringExternal("Param/Value/6E7DDF14"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowRandomBtn[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[7], 80, 80, c_anchorTopLeft, 565, 290, StringToText(""), "Assets\\Textures\\btn-tips-tutorial.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowRandomImage[4] = DialogControlLastCreated();
}

void gf_HrCharSelectDialogSpellBtnMake1 () {
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[2], 100, 100, c_anchorTopLeft, 30, 80, StringExternal("Param/Value/4EC2F48A"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowSpellBtn[0] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[2], 80, 80, c_anchorTopLeft, 40, 90, StringToText(""), "Assets\\Textures\\btn-research-zerg-cellularreactor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowSpellImage[0] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[2], 100, 100, c_anchorTopLeft, 135, 80, StringExternal("Param/Value/8196C838"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowSpellBtn[1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[2], 80, 80, c_anchorTopLeft, 145, 90, StringToText(""), "Assets\\Textures\\btn-tips-hacking.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowSpellImage[1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[2], 100, 100, c_anchorTopLeft, 135, 80, StringExternal("Param/Value/A2591E45"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowSpellBtn[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[2], 80, 80, c_anchorTopLeft, 145, 90, StringToText(""), "Assets\\Textures\\btn-ability-terran-heal-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowSpellImage[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[2], 100, 100, c_anchorTopLeft, 240, 80, StringExternal("Param/Value/22CF545F"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowSpellBtn[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[2], 80, 80, c_anchorTopLeft, 250, 90, StringToText(""), "Assets\\Textures\\btn-tips-hyperion.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowSpellImage[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[2], 100, 100, c_anchorTopLeft, 345, 80, StringExternal("Param/Value/A8AA1181"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowSpellBtn[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[2], 80, 80, c_anchorTopLeft, 355, 90, StringToText(""), "Assets\\Textures\\btn-tips-fallenheroes.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowSpellImage[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[2], 100, 100, c_anchorTopLeft, 450, 80, StringExternal("Param/Value/CF4FEBAE"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowSpellBtn[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[2], 80, 80, c_anchorTopLeft, 460, 90, StringToText(""), "Assets\\AddIcon\\btn-custom-protoss-rapiddeployment.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowSpellImage[5] = DialogControlLastCreated();
}

void gf_HrCharSelectDialogSpellBtnMake2 () {
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[2], 100, 100, c_anchorTopLeft, 30, 180, StringExternal("Param/Value/ABD6B75E"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowSpellBtn[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[2], 80, 80, c_anchorTopLeft, 40, 190, StringToText(""), "Assets\\Textures\\btn-ability-protoss-shieldcapacitor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowSpellImage[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[2], 100, 100, c_anchorTopLeft, 135, 180, StringExternal("Param/Value/F258D1AF"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowSpellBtn[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[2], 80, 80, c_anchorTopLeft, 145, 190, StringToText(""), "Assets\\Textures\\btn-tips-biosample.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowSpellImage[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[2], 100, 100, c_anchorTopLeft, 240, 180, StringExternal("Param/Value/BEAEC8D0"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowSpellBtn[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[2], 80, 80, c_anchorTopLeft, 250, 190, StringToText(""), "Assets\\Textures\\btn-tips-challengecounter.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowSpellImage[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[2], 100, 100, c_anchorTopLeft, 345, 180, StringExternal("Param/Value/3049A19A"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowSpellBtn[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[2], 80, 80, c_anchorTopLeft, 355, 190, StringToText(""), "Assets\\Textures\\btn-tips-walloffire.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowSpellImage[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[2], 100, 100, c_anchorTopLeft, 450, 180, StringExternal("Param/Value/199C91AA"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowSpellBtn[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[2], 80, 80, c_anchorTopLeft, 460, 190, StringToText(""), "Assets\\Textures\\btn-tips-defierbones.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowSpellImage[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_CharChooseDialog[2], 100, 100, c_anchorTopLeft, 555, 180, StringExternal("Param/Value/8D6F960E"), StringToText(""), "Assets\\Textures\\ui_techpurchase_techbutton_selected_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_hired_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    gv_CharChooseWindowSpellBtn[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_CharChooseDialog[2], 80, 80, c_anchorTopLeft, 565, 190, StringToText(""), "Assets\\Textures\\btn-tips-visitthelab.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseWindowSpellImage[11] = DialogControlLastCreated();
}

void gf_HrTeamSelectDialogMake () {
    DialogCreate(375, 720, c_anchorCenter, -520, 5, true);
    gv_TeamSelectDialog[0] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 375, 720, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_bucket_long.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogImage[0] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 35);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/35F2819E") + TextWithColor(StringExternal("Param/Value/C7DCD83F"), Color(70.98, 100.00, 70.98)) + StringExternal("Param/Value/AACDFCE4")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_TeamSelectDialogLabel[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 355, 6, c_anchorTop, 0, 220, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_columbutton_frame_gradient.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(45.88, 72.94, 100.00), PlayerGroupAll());
    gv_TeamSelectDialogImage[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 355, 6, c_anchorTop, 0, 374, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_columbutton_frame_gradient.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(45.88, 72.94, 100.00), PlayerGroupAll());
    gv_TeamSelectDialogImage[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 355, 6, c_anchorTop, 0, 529, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_columbutton_frame_gradient.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(45.88, 72.94, 100.00), PlayerGroupAll());
    gv_TeamSelectDialogImage[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 80, 80, c_anchorTop, -65, 100, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(60.78, 89.02, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 55, 55, c_anchorTop, 11, 125, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 55, 55, c_anchorTop, 71, 125, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 80, 80, c_anchorTop, -65, 251, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(60.78, 89.02, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 55, 55, c_anchorTop, 11, 276, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 55, 55, c_anchorTop, 71, 276, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 80, 80, c_anchorTop, -65, 404, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(60.78, 89.02, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 55, 55, c_anchorTop, 11, 429, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 55, 55, c_anchorTop, 71, 429, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 80, 80, c_anchorTop, -65, 557, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(60.78, 89.02, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 55, 55, c_anchorTop, 11, 582, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 55, 55, c_anchorTop, 71, 582, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[11] = DialogControlLastCreated();
    DialogCreate(375, 720, c_anchorCenter, 520, 5, true);
    gv_TeamSelectDialog[1] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 375, 720, c_anchorCenter, 0, 0, StringToText(""), "Assets\\rightbody.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogImage[4] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 35);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/A2EA6B06") + TextWithColor(StringExternal("Param/Value/FE926CFB"), Color(100.00, 81.57, 100.00)) + StringExternal("Param/Value/0D257CFA")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_TeamSelectDialogLabel[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 355, 6, c_anchorTop, 0, 220, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_columbutton_frame_gradient.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(45.88, 72.94, 100.00), PlayerGroupAll());
    gv_TeamSelectDialogImage[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 355, 6, c_anchorTop, 0, 374, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_columbutton_frame_gradient.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(45.88, 72.94, 100.00), PlayerGroupAll());
    gv_TeamSelectDialogImage[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 355, 6, c_anchorTop, 0, 529, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_columbutton_frame_gradient.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(45.88, 72.94, 100.00), PlayerGroupAll());
    gv_TeamSelectDialogImage[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 80, 80, c_anchorTop, -65, 100, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(60.78, 89.02, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 55, 55, c_anchorTop, 11, 125, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 55, 55, c_anchorTop, 71, 125, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 80, 80, c_anchorTop, -65, 251, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(60.78, 89.02, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 55, 55, c_anchorTop, 11, 276, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[16] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 55, 55, c_anchorTop, 71, 276, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[17] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 80, 80, c_anchorTop, -65, 404, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(60.78, 89.02, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[18] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 55, 55, c_anchorTop, 11, 429, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[19] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 55, 55, c_anchorTop, 71, 429, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[20] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 80, 80, c_anchorTop, -65, 557, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(60.78, 89.02, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[21] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 55, 55, c_anchorTop, 11, 582, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[22] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 55, 55, c_anchorTop, 71, 582, StringToText(""), "Assets\\Textures\\ui_help_frame_content.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_TeamSelectDialogNemoImage[23] = DialogControlLastCreated();
    gf_HrTeamSelectDialogTeam1Make();
    gf_HrTeamSelectDialogTeam1Make2();
}

void gf_HrTeamSelectDialogTeam1Make () {
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 70, 70, c_anchorTop, -65, 105, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[1]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 94, 94, c_anchorTop, 0, 0, StringToText(""), "Assets\\AddIcon\\Playerborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_TeamSelectDialogNemoImage[0], c_anchorCenter, 0, -1);
    gv_TeamSelectDialogPlayerBorder[gv_PlayerBayul[1]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 45, 45, c_anchorTop, 11, 130, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage1[gv_PlayerBayul[1]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 45, 45, c_anchorTop, 71, 130, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage2[gv_PlayerBayul[1]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(gv_TeamSelectDialog[0], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 325, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 185);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/14DCAF30") + PlayerName(gv_PlayerBayul[1]) + StringExternal("Param/Value/0D9AD964")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_TeamSelectDialogPlayerName[gv_PlayerBayul[1]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_TeamSelectDialog[0], 60, 60, c_anchorCenter, 0, 0, StringExternal("Param/Value/E8FFC4AA"), StringToText(""), "Assets\\HeroChangeBtn.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\HeroChangeBtn.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[1]], c_anchorLeft, 5, 5);
    gv_TeamSelectBtn[0] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 70, 70, c_anchorTop, -65, 256, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[2]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 94, 94, c_anchorTop, 0, 0, StringToText(""), "Assets\\AddIcon\\Playerborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_TeamSelectDialogNemoImage[3], c_anchorCenter, 0, -1);
    gv_TeamSelectDialogPlayerBorder[gv_PlayerBayul[2]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 45, 45, c_anchorTop, 11, 281, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage1[gv_PlayerBayul[2]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 45, 45, c_anchorTop, 71, 281, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage2[gv_PlayerBayul[2]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(gv_TeamSelectDialog[0], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 325, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 336);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/A211DA62") + PlayerName(gv_PlayerBayul[2]) + StringExternal("Param/Value/22EE8011")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_TeamSelectDialogPlayerName[gv_PlayerBayul[2]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_TeamSelectDialog[0], 60, 60, c_anchorCenter, 0, 0, StringExternal("Param/Value/FEBEFA1F"), StringToText(""), "Assets\\HeroChangeBtn.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\HeroChangeBtn.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[2]], c_anchorLeft, 5, 5);
    gv_TeamSelectBtn[1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 70, 70, c_anchorTop, -65, 409, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[3]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 94, 94, c_anchorTop, 0, 0, StringToText(""), "Assets\\AddIcon\\Playerborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_TeamSelectDialogNemoImage[6], c_anchorCenter, 0, -1);
    gv_TeamSelectDialogPlayerBorder[gv_PlayerBayul[3]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 45, 45, c_anchorTop, 11, 434, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage1[gv_PlayerBayul[3]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 45, 45, c_anchorTop, 71, 434, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage2[gv_PlayerBayul[3]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(gv_TeamSelectDialog[0], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 325, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 489);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/F184F4AF") + PlayerName(gv_PlayerBayul[3]) + StringExternal("Param/Value/F243EEA9")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_TeamSelectDialogPlayerName[gv_PlayerBayul[3]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_TeamSelectDialog[0], 60, 60, c_anchorCenter, 0, 0, StringExternal("Param/Value/0B289D6A"), StringToText(""), "Assets\\HeroChangeBtn.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\HeroChangeBtn.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[3]], c_anchorLeft, 5, 5);
    gv_TeamSelectBtn[2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 70, 70, c_anchorTop, -65, 562, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[4]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 94, 94, c_anchorTop, 0, 0, StringToText(""), "Assets\\AddIcon\\Playerborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_TeamSelectDialogNemoImage[9], c_anchorCenter, 0, -1);
    gv_TeamSelectDialogPlayerBorder[gv_PlayerBayul[4]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 45, 45, c_anchorTop, 11, 587, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage1[gv_PlayerBayul[4]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 45, 45, c_anchorTop, 71, 587, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage2[gv_PlayerBayul[4]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(gv_TeamSelectDialog[0], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 325, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 642);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/6050C5F2") + PlayerName(gv_PlayerBayul[4]) + StringExternal("Param/Value/D51B5834")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_TeamSelectDialogPlayerName[gv_PlayerBayul[4]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_TeamSelectDialog[0], 60, 60, c_anchorCenter, 0, 0, StringExternal("Param/Value/254DC7EC"), StringToText(""), "Assets\\HeroChangeBtn.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\HeroChangeBtn.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[4]], c_anchorLeft, 5, 5);
    gv_TeamSelectBtn[3] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 350, 180, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glues_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogImage[8] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 65, 65, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_replay_panelcontainer.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, gv_TeamSelectDialogImage[8], c_anchorTopLeft, 25, 30);
    gv_TeamSelectDialogImage[9] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[0], 60, 60, c_anchorCenter, 0, 0, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_TeamSelectDialogImage[9], c_anchorCenter, 0, 0);
    gv_TeamSelectDialogImage[10] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(gv_TeamSelectDialog[0], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 120);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 35);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/169C3EB1") + TextWithColor(StringExternal("Param/Value/85343B14"), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/1EA9116A")), PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, gv_TeamSelectDialogImage[9], c_anchorRight, 12, 35);
    gv_TeamSelectDialogLabel[2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_TeamSelectDialog[0], 160, 50, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/B5FE2ECF"), "Assets\\Textures\\ui_battlenet_glue_mediumbluebutton_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_mediumbluebutton_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, gv_TeamSelectDialogImage[8], c_anchorBottom, -83, -25);
    gv_TeamSelectBtn[8] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_TeamSelectDialog[0], 160, 50, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/8E28482E"), "Assets\\Textures\\ui_battlenet_glue_mediumbluebutton_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_mediumbluebutton_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, gv_TeamSelectDialogImage[8], c_anchorBottom, 83, -25);
    gv_TeamSelectBtn[9] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
}

void gf_HrTeamSelectDialogTeam1Make2 () {
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 70, 70, c_anchorTop, -65, 105, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[5]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 94, 94, c_anchorTop, 0, 0, StringToText(""), "Assets\\AddIcon\\Playerborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_TeamSelectDialogNemoImage[12], c_anchorCenter, 0, -1);
    gv_TeamSelectDialogPlayerBorder[gv_PlayerBayul[5]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 45, 45, c_anchorTop, 11, 130, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage1[gv_PlayerBayul[5]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 45, 45, c_anchorTop, 71, 130, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage2[gv_PlayerBayul[5]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(gv_TeamSelectDialog[1], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 325, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 185);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/C71AF351") + PlayerName(gv_PlayerBayul[5]) + StringExternal("Param/Value/9B0B43D8")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_TeamSelectDialogPlayerName[gv_PlayerBayul[5]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_TeamSelectDialog[1], 60, 60, c_anchorCenter, 0, 0, StringExternal("Param/Value/004DC037"), StringToText(""), "Assets\\HeroChangeBtn.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\HeroChangeBtn.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[5]], c_anchorLeft, 5, 5);
    gv_TeamSelectBtn[4] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 70, 70, c_anchorTop, -65, 256, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[6]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 94, 94, c_anchorTop, 0, 0, StringToText(""), "Assets\\AddIcon\\Playerborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_TeamSelectDialogNemoImage[15], c_anchorCenter, 0, -1);
    gv_TeamSelectDialogPlayerBorder[gv_PlayerBayul[6]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 45, 45, c_anchorTop, 11, 281, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage1[gv_PlayerBayul[6]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 45, 45, c_anchorTop, 71, 281, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage2[gv_PlayerBayul[6]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(gv_TeamSelectDialog[1], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 325, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 336);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/A185A9DE") + PlayerName(gv_PlayerBayul[6]) + StringExternal("Param/Value/C2DD86DD")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_TeamSelectDialogPlayerName[gv_PlayerBayul[6]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_TeamSelectDialog[1], 60, 60, c_anchorCenter, 0, 0, StringExternal("Param/Value/A1780A99"), StringToText(""), "Assets\\HeroChangeBtn.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\HeroChangeBtn.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[6]], c_anchorLeft, 5, 5);
    gv_TeamSelectBtn[5] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 70, 70, c_anchorTop, -65, 409, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[7]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 94, 94, c_anchorTop, 0, 0, StringToText(""), "Assets\\AddIcon\\Playerborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_TeamSelectDialogNemoImage[18], c_anchorCenter, 0, -1);
    gv_TeamSelectDialogPlayerBorder[gv_PlayerBayul[7]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 45, 45, c_anchorTop, 11, 434, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage1[gv_PlayerBayul[7]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 45, 45, c_anchorTop, 71, 434, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage2[gv_PlayerBayul[7]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(gv_TeamSelectDialog[1], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 325, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 489);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/4C2E243B") + PlayerName(gv_PlayerBayul[7]) + StringExternal("Param/Value/70673AA7")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_TeamSelectDialogPlayerName[gv_PlayerBayul[7]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_TeamSelectDialog[1], 60, 60, c_anchorCenter, 0, 0, StringExternal("Param/Value/504EB047"), StringToText(""), "Assets\\HeroChangeBtn.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\HeroChangeBtn.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[7]], c_anchorLeft, 5, 5);
    gv_TeamSelectBtn[6] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 70, 70, c_anchorTop, -65, 562, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[8]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 94, 94, c_anchorTop, 0, 0, StringToText(""), "Assets\\AddIcon\\Playerborder_unranked.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_TeamSelectDialogNemoImage[21], c_anchorCenter, 0, -1);
    gv_TeamSelectDialogPlayerBorder[gv_PlayerBayul[8]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 45, 45, c_anchorTop, 11, 587, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage1[gv_PlayerBayul[8]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 45, 45, c_anchorTop, 71, 587, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogPlayerSpellImage2[gv_PlayerBayul[8]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(gv_TeamSelectDialog[1], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 325, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 642);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/8C3AF607") + PlayerName(gv_PlayerBayul[8]) + StringExternal("Param/Value/968CEEB4")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_TeamSelectDialogPlayerName[gv_PlayerBayul[8]] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_TeamSelectDialog[1], 60, 60, c_anchorCenter, 0, 0, StringExternal("Param/Value/19474607"), StringToText(""), "Assets\\HeroChangeBtn.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\HeroChangeBtn.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorRight, gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[8]], c_anchorLeft, 5, 5);
    gv_TeamSelectBtn[7] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 350, 180, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glues_dialogbox_base.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_TeamSelectDialogImage[11] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 65, 65, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_replay_panelcontainer.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, gv_TeamSelectDialogImage[11], c_anchorTopLeft, 25, 30);
    gv_TeamSelectDialogImage[12] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_TeamSelectDialog[1], 60, 60, c_anchorCenter, 0, 0, StringToText(""), "Assets\\InviButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_TeamSelectDialogImage[12], c_anchorCenter, 0, 0);
    gv_TeamSelectDialogImage[13] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlCreate(gv_TeamSelectDialog[1], c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 120);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 35);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/F0EC86E7") + TextWithColor(StringExternal("Param/Value/28CB0911"), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/B0F5B472")), PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, gv_TeamSelectDialogImage[12], c_anchorRight, 12, 35);
    gv_TeamSelectDialogLabel[3] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_TeamSelectDialog[1], 160, 50, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/00BD21C3"), "Assets\\Textures\\ui_battlenet_glue_mediumbluebutton_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_mediumbluebutton_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, gv_TeamSelectDialogImage[11], c_anchorBottom, -83, -25);
    gv_TeamSelectBtn[10] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_TeamSelectDialog[1], 160, 50, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/965E82DF"), "Assets\\Textures\\ui_battlenet_glue_mediumbluebutton_normaloverpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_mediumbluebutton_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, gv_TeamSelectDialogImage[11], c_anchorBottom, 83, -25);
    gv_TeamSelectBtn[11] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
}

void gf_HrScoreDialogMake () {
    int i;
    int Y_offset;
    int inner_Y_offset;

    Y_offset = 75;
    inner_Y_offset = 87;

    DialogCreate(650, 490, c_anchorTopRight, 10, 30, true);
    gv_ScoreDialog[0] = DialogLastCreated();
    DialogSetImageVisible(gv_ScoreDialog[0], false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 650, 490, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_mission_leaderboard_frame_light.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 50.20, 100.00), PlayerGroupAll());
    gv_ScoreDialogImage[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 650, 7, c_anchorTop, 0, 59, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_columbutton_frame_gradient.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 50.20, 100.00), PlayerGroupAll());
    gv_ScoreDialogImage[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 650, 7, c_anchorCenter, 0, 25, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_frame_glowstroke.dds", c_triggerImageTypeEndCap, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.78, 34.51, 59.22), PlayerGroupAll());
    gv_ScoreDialogImageB[0] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 45);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 45, 32);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/7D878D2F") + TextWithColor(StringExternal("Param/Value/43A3F222"), Color(50.20, 100.00, 100.00)) + StringExternal("Param/Value/1FDAE664")), PlayerGroupAll());
    gv_ScoreDialogText[0] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 85, 45);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 210, 32);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/A1020A08") + TextWithColor(StringExternal("Param/Value/5DC614AE"), Color(50.20, 100.00, 100.00)) + StringExternal("Param/Value/5B3189C9")), PlayerGroupAll());
    gv_ScoreDialogText[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 85, 45);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 310, 32);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/8B49BB19") + TextWithColor(StringExternal("Param/Value/A0E22CAF"), Color(50.20, 100.00, 100.00)) + StringExternal("Param/Value/0D1C55A8")), PlayerGroupAll());
    gv_ScoreDialogTextB[0] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 45);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 415, 32);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/B6AD383F") + TextWithColor(StringExternal("Param/Value/00F105AA"), Color(50.20, 100.00, 100.00)) + StringExternal("Param/Value/6B839840")), PlayerGroupAll());
    gv_ScoreDialogTextB[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 85, 45);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 565, 32);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/66AF2A19") + TextWithColor(StringExternal("Param/Value/1869B959"), Color(50.20, 100.00, 100.00)) + StringExternal("Param/Value/E71D8A26")), PlayerGroupAll());
    gv_ScoreDialogTextB[2] = DialogControlLastCreated();
    for (i = 1; i <= 4; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 45, 45, c_anchorTopLeft, 18, Y_offset, StringToText(""), gv_CharSelectedImage[gv_PlayerBayul[i]], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_CharSelectedName[gv_PlayerBayul[i]], PlayerGroupAll());
            gv_ScoreDialogHeroImage[gv_PlayerBayul[i]] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 70, 40, c_anchorTopLeft, 9, (inner_Y_offset + 1), (StringExternal("Param/Value/DA83442E") + TextWithColor(IntToText(gv_HeroReviveCountNum[gv_PlayerBayul[i]][0]), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/1CA5CA1D")), Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
            gv_ScoreDialogReviveTime[gv_PlayerBayul[i]] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 165, 30);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 65, (inner_Y_offset + 1));
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/0242BE2E") + PlayerName(gv_PlayerBayul[i]) + StringExternal("Param/Value/B2A8CA94")), PlayerGroupAll());
            gv_ScoreDialogName[gv_PlayerBayul[i]] = DialogControlLastCreated();
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 90, 50);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 187, inner_Y_offset);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/5C4D70F1") + StringExternal("Param/Value/33DB673C")), PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
            gv_ScoreDialogLevel[gv_PlayerBayul[i]] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 283, (inner_Y_offset - 9), gv_SpellToolTip[gv_PlayerBayul[i]][0], gv_SelectedSpellImage1[gv_PlayerBayul[i]], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_ScoreDialogSpell[gv_PlayerBayul[i]][0] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 335, (inner_Y_offset - 9), gv_SpellToolTip[gv_PlayerBayul[i]][1], gv_SelectedSpellImage2[gv_PlayerBayul[i]], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_ScoreDialogSpell[gv_PlayerBayul[i]][1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, 348, inner_Y_offset, (StringExternal("Param/Value/89DC04EE") + StringExternal("Param/Value/202109D2") + StringExternal("Param/Value/F8B82F92") + StringExternal("Param/Value/2C590C6B") + StringExternal("Param/Value/2C75B07D") + StringExternal("Param/Value/B5F15C9E") + StringExternal("Param/Value/68C7A1D1")), Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
            gv_ScoreDialogTotalScore[gv_PlayerBayul[i]] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 511, inner_Y_offset, (StringExternal("Param/Value/12BFE644") + StringExternal("Param/Value/A39E6E4E") + StringExternal("Param/Value/E1D3B8E7")), Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
            gv_ScoreDialogFarming[gv_PlayerBayul[i]] = DialogControlLastCreated();
        }
        Y_offset += 45;
        inner_Y_offset += 45;
    }

    Y_offset += 28;
    inner_Y_offset += 28;

    for (i = 5; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 45, 45, c_anchorTopLeft, 18, Y_offset, StringToText(""), gv_CharSelectedImage[gv_PlayerBayul[i]], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_CharSelectedName[gv_PlayerBayul[i]], PlayerGroupAll());
            gv_ScoreDialogHeroImage[gv_PlayerBayul[i]] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 70, 40, c_anchorTopLeft, 9, (inner_Y_offset + 1), (StringExternal("Param/Value/B461337D") + TextWithColor(IntToText(gv_HeroReviveCountNum[gv_PlayerBayul[i]][0]), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/AB10F1DB")), Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
            gv_ScoreDialogReviveTime[gv_PlayerBayul[i]] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 165, 30);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 65, (inner_Y_offset + 1));
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/CB10884F") + PlayerName(gv_PlayerBayul[i]) + StringExternal("Param/Value/8E58A3DB")), PlayerGroupAll());
            gv_ScoreDialogName[gv_PlayerBayul[i]] = DialogControlLastCreated();
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 90, 50);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 187, inner_Y_offset);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/55933A8E") + StringExternal("Param/Value/0E8E2B11")), PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
            gv_ScoreDialogLevel[gv_PlayerBayul[i]] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 283, (inner_Y_offset - 9), gv_SpellToolTip[gv_PlayerBayul[i]][0], gv_SelectedSpellImage1[gv_PlayerBayul[i]], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_ScoreDialogSpell[gv_PlayerBayul[i]][0] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 335, (inner_Y_offset - 9), gv_SpellToolTip[gv_PlayerBayul[i]][1], gv_SelectedSpellImage2[gv_PlayerBayul[i]], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_ScoreDialogSpell[gv_PlayerBayul[i]][1] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, 348, inner_Y_offset, (StringExternal("Param/Value/C4F0A208") + StringExternal("Param/Value/6E817AF4") + StringExternal("Param/Value/35C0AEE2") + StringExternal("Param/Value/18401CFC") + StringExternal("Param/Value/189B2D59") + StringExternal("Param/Value/45634DA7") + StringExternal("Param/Value/576F378C")), Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
            gv_ScoreDialogTotalScore[gv_PlayerBayul[i]] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 511, inner_Y_offset, (StringExternal("Param/Value/5F369222") + StringExternal("Param/Value/CD2BC030") + StringExternal("Param/Value/986825E8")), Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
            gv_ScoreDialogFarming[gv_PlayerBayul[i]] = DialogControlLastCreated();
        }
        Y_offset += 45;
        inner_Y_offset += 45;
    }

    gv_ScoreWindowToggleButton = DialogControlHookupStandard(
        c_triggerControlTypeButton,
        "UIContainer/ScoreWindowToggleButton"
    );

    DialogCreate(250, 75, c_anchorTop, 0, 5, true);
    gv_ScoreDialog[1] = DialogLastCreated();
    DialogSetImageVisible(gv_ScoreDialog[1], false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 250, 75, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_armory_text_innerframe.dds", c_triggerImageTypeHorizontalBorder, false, Color(0.00, 50.20, 100.00), c_triggerBlendModeNormal);
    gv_ScoreDialogImageB[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 117, 8, c_anchorBottomLeft, 9, 13, StringToText(""), "Assets\\Textures\\ui_ingame_leaderboard_bar.dds", c_triggerImageTypeBorder, false, Color(50.20, 100.00, 50.20), c_triggerBlendModeLighten);
    gv_ScoreDialogImageB[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 117, 8, c_anchorBottomRight, 8, 13, StringToText(""), "Assets\\Textures\\ui_ingame_leaderboard_bar.dds", c_triggerImageTypeBorder, false, Color(100.00, 67.45, 100.00), c_triggerBlendModeLighten);
    gv_ScoreDialogImageB[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 40, c_anchorCenter, 1, 0, (StringExternal("Param/Value/F208C3A8") + TextWithColor(StringExternal("Param/Value/98520E1E"), Color(50.20, 91.37, 100.00))), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_ScoreDialogTextB[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorLeft, 16, 0, (StringExternal("Param/Value/1BC460B3") + TextWithColor(IntToText(gv_PlayerProfileTeamKillNum[0]), Color(100.00, 100.00, 100.00))), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_ScoreDialogTextB[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 40, c_anchorRight, 12, 0, (StringExternal("Param/Value/86562626") + TextWithColor(IntToText(gv_PlayerProfileTeamKillNum[1]), Color(100.00, 100.00, 100.00))), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_ScoreDialogTextB[5] = DialogControlLastCreated();
}

void gf_HrSurrenderDialogMake () {
    DialogCreate(360, 275, c_anchorBottomRight, 20, 340, true);
    gv_SurrenderDialog = DialogLastCreated();
    DialogSetImageVisible(gv_SurrenderDialog, false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 315, 180, c_anchorCenter, -2, -9, StringToText(""), "Assets\\blackbg.tga", c_triggerImageTypeNormal, false, Color(0.00, 17.25, 25.10), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 360, 275, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_frame_metal_protoss.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 53);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/0C5060A4") + TextWithColor(StringExternal("Param/Value/64533281"), Color(100.00, 96.86, 67.45)) + StringExternal("Param/Value/24DF0C18")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_SurrenderDialogLabel[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 125, 50, c_anchorBottom, -62, 85, StringToText(""), StringExternal("Param/Value/BB3FED3B"), "Assets\\Textures\\ui_ingame_menubutton_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_menubutton_normalandpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_SurrenderDialogBtn[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 125, 50, c_anchorBottom, 62, 85, StringToText(""), StringExternal("Param/Value/91DBDADC"), "Assets\\Textures\\ui_ingame_menubutton_normaloverandpressedover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_ingame_menubutton_normalandpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    gv_SurrenderDialogBtn[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/3111C23E") + TextWithColor(IntToText(gv_SurrenderSystemYorN[0]), Color(50.20, 100.00, 50.20)) + TextWithColor(StringExternal("Param/Value/877B3ACA"), Color(100.00, 100.00, 100.00)) + TextWithColor(IntToText(gv_SurrenderSystemYorN[1]), Color(100.00, 57.65, 57.65)) + StringExternal("Param/Value/A6DDF75A")), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 35);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 110);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_SurrenderDialogLabel[1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(1), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    gv_SurrenderDialogBar[0] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 15);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 20.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 20.0, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(1), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/521E8C9D") + TextWithColor(IntToText(gv_SurrenderSystemYorN[2]), Color(50.20, 100.00, 50.20)) + TextWithColor(StringExternal("Param/Value/7CCB3A8E"), Color(100.00, 100.00, 100.00)) + TextWithColor(IntToText(gv_SurrenderSystemYorN[3]), Color(100.00, 57.65, 57.65)) + StringExternal("Param/Value/B48ED5E1")), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 35);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 110);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_SurrenderDialogLabel[2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(2), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    gv_SurrenderDialogBar[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 225, 15);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 50);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 20.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 20.0, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(2), true);
}

void gf_HrDrawGame () {
    int i;

    TriggerEnable(gt_TrNexusDestroyTeam1, false);
    TriggerEnable(gt_TrNexusDestroyTeam2, false);
    Wait(5.0, c_timeReal);
    for (i = 1; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            GameOver(gv_PlayerBayul[i], c_gameOverTie, true, true);
        }
    }
}

void gf_RemoveCompletedSecondaryObjectives() {
    int player;
    PlayerGroupLoopBegin(PlayerGroupActive());
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
        if (!(PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
            continue;
        }
        if (PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), PlayerGroupLoopCurrent())) {
            continue;
        }
        player = gv_PlayerBayul[PlayerGroupLoopCurrent()];
        if (ObjectiveGetState(gv_PlayerObjectives[player][c_secondaryObjectiveShop]) != c_objectiveStateCompleted) {
            continue;
        }
        if (ObjectiveGetState(gv_PlayerObjectives[player][c_secondaryObjectiveMinions]) != c_objectiveStateCompleted) {
            continue;
        }
        if (ObjectiveGetState(gv_PlayerObjectives[player][c_secondaryObjectiveLevels]) != c_objectiveStateCompleted) {
            continue;
        }
        Wait(3.0, c_timeReal);
        ObjectiveDestroy(gv_PlayerObjectives[player][c_secondaryObjectiveMinions]);
        ObjectiveDestroy(gv_PlayerObjectives[player][c_secondaryObjectiveShop]);
        ObjectiveDestroy(gv_PlayerObjectives[player][c_secondaryObjectiveLevels]);
    }
    PlayerGroupLoopEnd();
}

void gf_ShowPlayerStatistics(int player) {
    fixed deaths;
    fixed kda;

    deaths = IntToFixed(gv_PlayerLevel[gv_PlayerBayul[player]][2]);
    if (deaths == 0) {
        deaths = 1;
    }

    kda = (
        (IntToFixed(gv_PlayerLevel[gv_PlayerBayul[player]][1]) + 
        IntToFixed(gv_PlayerLevel[gv_PlayerBayul[player]][3])) / deaths
    );

    UIDisplayMessage(
        PlayerGroupSingle(player),
        c_messageAreaDebug,
        (
            StringExternal("Param/Value/89E47C85") + 
            TextWithColor(PlayerName(gv_PlayerBayul[player]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_PlayerBayul[player], false))) +
            StringToText("<n/>KDA: ") +
            FixedToText(kda, 2) +
            StringToText("<n/>CS: ") +
            IntToText(UnitGetPropertyInt(gv_PlayerHero[gv_PlayerBayul[player]], c_unitPropKills, true)) +
            StringToText("<n/>Hero damage dealt: ") +
            IntToText(gv_PlayerStatistics[player].damage_dealt) +
            StringToText("<n/>Hero damage absorbed: ") +
            IntToText(gv_PlayerStatistics[player].damage_absorbed) +
            StringToText("<n/>Healing done: ") +
            IntToText(gv_PlayerStatistics[player].healing_done) +
            StringToText("<n/>Self-healing done: ") +
            IntToText(gv_PlayerStatistics[player].self_healing) +
            StringExternal("Param/Value/CC7276AB")
        )
    );
}

// Utility finctions

int gf_ShopWindowByIndex(int shop_index) {
    if ((shop_index >= 0) && (shop_index < 6)) {
        return 0;
    }
    if ((shop_index >= 6) && (shop_index < 12)) {
        return 1;
    }
    if ((shop_index >= 12) && (shop_index < 18)) {
        return 3;
    }
    if ((shop_index >= 18) && (shop_index < 24)) {
        return 2;
    }
    if ((shop_index >= 24) && (shop_index < 30)) {
        return 4;
    }
    return -1;
}

bool gf_EligibleForBuyingHotkey(int shop_index) {
    if (gv_ActiveShopPage[EventPlayer()] != gf_ShopWindowByIndex(shop_index)) {
        return false;
    }
    if (gv_StatIncreasesBought[EventPlayer()][shop_index] >= gv_ShopItemParameters[shop_index].max_upgrades) {
        return false;
    }
    if ((shop_index >= 12) && (shop_index < 18) && (gv_SealBought[EventPlayer()])) {
        return false;
    }
    if (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < gv_StatHowMoney[shop_index][EventPlayer()]) {
        return false;
    }
    if (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < gv_ShopItemParameters[shop_index].gas_cost) {
        return false;
    }
    if (gv_ShopItemParameters[shop_index].alive_only && (gv_HeroDeathBoolean[EventPlayer()] == true)) {
        return false;
    }
    return true;
}

bool gf_HotkeyStatIncreaseTestConditions() {
    if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
        return false;
    }
    if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == false))) {
        return false;
    }
    if (!((gv_GameEndBoolean == false))) {
        return false;
    }
    if (!((gv_GameStartBoolean == true))) {
        return false;
    }
    if (!((gv_BeforeStartCounterDialogNum == 0))) {
        return false;
    }
    if (!((gv_StatusWindowAddDelay[EventPlayer()] == false))) {
        return false;
    }
    return true;
}

void gf_ChangeStatShopPage(int player, int page) {
    int i;

    gv_ActiveShopPage[player] = page;

    for (i = 0; i < 5; i += 1) {
        DialogControlSetEnabled(gv_StatShopPageButton[i], PlayerGroupSingle(player), true);
        DialogControlSetVisible(gv_StatShopPage[i], PlayerGroupSingle(player), false);
    }
    DialogControlSetEnabled(gv_StatShopPageButton[page], PlayerGroupSingle(player), false);
    DialogControlSetVisible(gv_StatShopPage[page], PlayerGroupSingle(player), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????????
//--------------------------------------------------------------------------------------------------
bool gt_TrStartGame_Func (bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Tr1FullscreenSetting, false, true);
    TriggerExecute(gt_Tr2GameSetting, false, false);
    TriggerExecute(gt_Tr3PlayerSetting, false, false);
    TriggerExecute(gt_Tr5AllDialogInit, false, true);
    TriggerExecute(gt_Tr6PlayerDialogAddorView, false, true);
    TriggerExecute(gt_Tr8VoteScreenView, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrStartGame_Init () {
    gt_TrStartGame = TriggerCreate("gt_TrStartGame_Func");
    TriggerAddEventMapInit(gt_TrStartGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: 1 - ???????????? ???????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_Tr1FullscreenSetting_Func (bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    gv_CharChooseFullDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2134, 1200, c_anchorCenter, 0, 0, StringToText(""), "SelectBack.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseFullDialogImage[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2134, 1200, c_anchorCenter, 0, 0, StringToText(""), "Loading.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_CharChooseFullDialogImage[0] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 50);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/7522D0B2") + TextWithColor(StringExternal("Param/Value/EA78E150"), Color(85.10, 92.55, 100.00)) + StringExternal("Param/Value/8E5B31CF")), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "SecurityButton", PlayerGroupAll());
    gv_CharChooseFullDialogLabel = DialogControlLastCreated();
    DialogSetVisible(gv_CharChooseFullDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tr1FullscreenSetting_Init () {
    gt_Tr1FullscreenSetting = TriggerCreate("gt_Tr1FullscreenSetting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 2 - ?????? ???????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_Tr2GameSetting_Func (bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogQuitButton, false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    GameSetSpeedValue(c_gameSpeedFaster);
    GameSetSpeedLocked(true);
    GameCheatAllow(c_gameCheatAny, false);
    UISetGameMenuItemText(PlayerGroupAll(), c_gameMenuDialogGenericButton1, StringExternal("Param/Value/DE6857B4"));
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton1, false);
    UISetDragSelectEnabled(PlayerGroupAll(), false);
    CameraSetBounds(PlayerGroupAll(), RegionRect(PointGetX(PointFromId(220)), PointGetY(PointFromId(220)), PointGetX(PointFromId(221)), PointGetY(PointFromId(221))), true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(121), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(120), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(122), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(119), false);
    libNtve_gf_SetAlliance(12, 11, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(13, 11, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetPlayerGroupAlliance(GameAttributePlayersForTeam(1), libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetPlayerGroupAlliance(GameAttributePlayersForTeam(2), libNtve_ge_AllianceSetting_AllyWithSharedVision);
    PlayerCreateEffectUnit(12, "ApplyIncapBehavior22222222224", UnitFromId(131));
    PlayerCreateEffectUnit(12, "ApplyIncapBehavior22222222224", UnitFromId(712));
    PlayerCreateEffectUnit(12, "ApplyIncapBehavior222222222242", UnitFromId(116));
    PlayerCreateEffectUnit(12, "ApplyIncapBehavior222222222242", UnitFromId(115));
    PlayerCreateEffectUnit(12, "ApplyIncapBehavior2222222222422", UnitFromId(222));
    PlayerCreateEffectUnit(12, "ApplyIncapBehavior2222222222422", UnitFromId(223));
    PlayerCreateEffectUnit(13, "ApplyIncapBehavior22222222224", UnitFromId(128));
    PlayerCreateEffectUnit(13, "ApplyIncapBehavior22222222224", UnitFromId(713));
    PlayerCreateEffectUnit(13, "ApplyIncapBehavior222222222242", UnitFromId(117));
    PlayerCreateEffectUnit(13, "ApplyIncapBehavior222222222242", UnitFromId(118));
    PlayerCreateEffectUnit(13, "ApplyIncapBehavior2222222222422", UnitFromId(224));
    PlayerCreateEffectUnit(13, "ApplyIncapBehavior2222222222422", UnitFromId(225));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tr2GameSetting_Init () {
    gt_Tr2GameSetting = TriggerCreate("gt_Tr2GameSetting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 3 - ???????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_Tr3PlayerSetting_Func (bool testConds, bool runActions) {
    int lv_GPlayerNum1 = 1;
    int lv_GPlayerNum2 = 1;
    int lv_GPlayerNum3 = 5;
    int lv_GPlayerNum4 = 1;
    int lv_GPlayerNum5 = 9;
    int lv_GPlayerNum6 = 1;

    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);

    for (lv_GPlayerNum1 = 1; lv_GPlayerNum1 <= 4 ; lv_GPlayerNum1 += 1 ) {
        if ((PlayerType(PlayerGroupPlayer(GameAttributePlayersForTeam(1), lv_GPlayerNum1)) == c_playerTypeUser) && (PlayerStatus(PlayerGroupPlayer(GameAttributePlayersForTeam(1), lv_GPlayerNum1)) == c_playerStatusActive)) {
            gv_PlayerBayul[lv_GPlayerNum1] = PlayerGroupPlayer(GameAttributePlayersForTeam(1), lv_GPlayerNum1);
            CameraPan(PlayerGroupPlayer(GameAttributePlayersForTeam(1), lv_GPlayerNum1), PointFromId(1), 0.0, -1, 0, false);
            libNtve_gf_SetAlliance(PlayerGroupPlayer(GameAttributePlayersForTeam(1), lv_GPlayerNum1), 12, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            VisExploreArea(gv_PlayerBayul[lv_GPlayerNum1], RegionEntireMap(), true, true);
            CameraLockInput(PlayerGroupPlayer(GameAttributePlayersForTeam(1), lv_GPlayerNum1), true);
            PlayerModifyPropertyInt(PlayerGroupPlayer(GameAttributePlayersForTeam(1), lv_GPlayerNum1), c_playerPropMinerals, c_playerPropOperSetTo, 600);
            PlayerModifyPropertyInt(PlayerGroupPlayer(GameAttributePlayersForTeam(1), lv_GPlayerNum1), c_playerPropVespene, c_playerPropOperSetTo, 5);
            gv_HeroDeathBoolean[gv_PlayerBayul[lv_GPlayerNum1]] = false;
            gv_PlayerHandlerNumber[gv_PlayerBayul[lv_GPlayerNum1]] = PlayerHandle(gv_PlayerBayul[lv_GPlayerNum1]);
            gv_ReadyBoolean += 1;
            PlayerGroupAdd(gv_TeamPlayerGroup[0], gv_PlayerBayul[lv_GPlayerNum1]);
            gv_SurrenderPlayerNum1 += 1;
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum1], "simplecommandcard", "0");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum1], "displayflyerhelper", "None");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum1], "showworkerstatus", "0");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum1], "showcurrentordermodel", "0");
            // PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum1], "selectuncontrolable", "1");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum1], "teamcoloredlifestatus", "1");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum1], "displayunitstatus", "All");
            gv_HeroReviveCountNum[gv_PlayerBayul[lv_GPlayerNum1]][0] = 10;
            gv_HeroReviveCountNum[gv_PlayerBayul[lv_GPlayerNum1]][1] = 10;
            gv_PlayerLevel[gv_PlayerBayul[lv_GPlayerNum1]][0] = 1;
            gv_HeroKillMoney[gv_PlayerBayul[lv_GPlayerNum1]][0] = 60;
            gv_HeroKillMoney[gv_PlayerBayul[lv_GPlayerNum1]][1] = 12;
            gv_HeroKillMoney[gv_PlayerBayul[lv_GPlayerNum1]][2] = 20;
            gv_AllyGiveMoney[gv_PlayerBayul[lv_GPlayerNum1]] = 500;
        }

    }
    for (lv_GPlayerNum2 = 1; lv_GPlayerNum2 <= 4; lv_GPlayerNum2 += 1) {
        if ((PlayerType(PlayerGroupPlayer(GameAttributePlayersForTeam(2), lv_GPlayerNum2)) == c_playerTypeUser) && (PlayerStatus(PlayerGroupPlayer(GameAttributePlayersForTeam(2), lv_GPlayerNum2)) == c_playerStatusActive)) {
            gv_PlayerBayul[lv_GPlayerNum3] = PlayerGroupPlayer(GameAttributePlayersForTeam(2), lv_GPlayerNum2);
            CameraPan(PlayerGroupPlayer(GameAttributePlayersForTeam(2), lv_GPlayerNum2), PointFromId(1), 0.0, -1, 0, false);
            libNtve_gf_SetAlliance(PlayerGroupPlayer(GameAttributePlayersForTeam(2), lv_GPlayerNum2), 13, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            VisExploreArea(gv_PlayerBayul[lv_GPlayerNum3], RegionEntireMap(), true, true);
            CameraLockInput(PlayerGroupPlayer(GameAttributePlayersForTeam(2), lv_GPlayerNum2), true);
            PlayerModifyPropertyInt(PlayerGroupPlayer(GameAttributePlayersForTeam(2), lv_GPlayerNum2), c_playerPropMinerals, c_playerPropOperSetTo, 600);
            PlayerModifyPropertyInt(PlayerGroupPlayer(GameAttributePlayersForTeam(2), lv_GPlayerNum2), c_playerPropVespene, c_playerPropOperSetTo, 5);
            gv_HeroDeathBoolean[gv_PlayerBayul[lv_GPlayerNum3]] = false;
            gv_PlayerHandlerNumber[gv_PlayerBayul[lv_GPlayerNum3]] = PlayerHandle(gv_PlayerBayul[lv_GPlayerNum3]);
            gv_ReadyBoolean += 1;
            PlayerGroupAdd(gv_TeamPlayerGroup[1], gv_PlayerBayul[lv_GPlayerNum3]);
            gv_SurrenderPlayerNum2 += 1;
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum3], "simplecommandcard", "0");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum3], "displayflyerhelper", "None");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum3], "showworkerstatus", "0");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum3], "showcurrentordermodel", "0");
            // PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum3], "selectuncontrolable", "1");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum3], "teamcoloredlifestatus", "1");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum3], "displayunitstatus", "All");
            gv_HeroReviveCountNum[gv_PlayerBayul[lv_GPlayerNum3]][0] = 10;
            gv_HeroReviveCountNum[gv_PlayerBayul[lv_GPlayerNum3]][1] = 10;
            gv_PlayerLevel[gv_PlayerBayul[lv_GPlayerNum3]][0] = 1;
            gv_HeroKillMoney[gv_PlayerBayul[lv_GPlayerNum3]][0] = 60;
            gv_HeroKillMoney[gv_PlayerBayul[lv_GPlayerNum3]][1] = 12;
            gv_HeroKillMoney[gv_PlayerBayul[lv_GPlayerNum3]][2] = 20;
            gv_AllyGiveMoney[gv_PlayerBayul[lv_GPlayerNum3]] = 500;
        }

        lv_GPlayerNum3 += 1;
    }

    for (lv_GPlayerNum4 = 1; lv_GPlayerNum4 <= 2; lv_GPlayerNum4 += 1) {
        if (((PlayerType(PlayerGroupPlayer(GameAttributePlayersForTeam(3), lv_GPlayerNum4)) == c_playerTypeComputer) || ((PlayerType(PlayerGroupPlayer(GameAttributePlayersForTeam(3), lv_GPlayerNum4)) == c_playerTypeUser) && (PlayerStatus(PlayerGroupPlayer(GameAttributePlayersForTeam(3), lv_GPlayerNum4)) == c_playerStatusActive)))) {
            gv_PlayerBayul[lv_GPlayerNum5] = PlayerGroupPlayer(GameAttributePlayersForTeam(3), lv_GPlayerNum4);
            CameraPan(PlayerGroupPlayer(GameAttributePlayersForTeam(3), lv_GPlayerNum4), PointFromId(1), 0.0, -1, 0, false);
            libNtve_gf_SetAlliance(PlayerGroupPlayer(GameAttributePlayersForTeam(3), lv_GPlayerNum4), 11, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            libNtve_gf_SetAlliance(PlayerGroupPlayer(GameAttributePlayersForTeam(3), lv_GPlayerNum4), 12, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            libNtve_gf_SetAlliance(PlayerGroupPlayer(GameAttributePlayersForTeam(3), lv_GPlayerNum4), 13, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
            VisExploreArea(gv_PlayerBayul[lv_GPlayerNum5], RegionEntireMap(), true, true);
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum5], "simplecommandcard", "0");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum5], "displayflyerhelper", "None");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum5], "showworkerstatus", "0");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum5], "showcurrentordermodel", "0");
            // PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum5], "selectuncontrolable", "1");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum5], "teamcoloredlifestatus", "1");
            PlayerOptionOverride(gv_PlayerBayul[lv_GPlayerNum5], "displayunitstatus", "All");
            for (lv_GPlayerNum6 = 1; lv_GPlayerNum6 <= 4; lv_GPlayerNum6 += 1) {
                if (((PlayerType(gv_PlayerBayul[lv_GPlayerNum6]) == c_playerTypeComputer) || ((PlayerType(gv_PlayerBayul[lv_GPlayerNum6]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[lv_GPlayerNum6]) == c_playerStatusActive)))) {
                    libNtve_gf_SetAlliance(gv_PlayerBayul[lv_GPlayerNum6], gv_PlayerBayul[lv_GPlayerNum5], libNtve_ge_AllianceSetting_AllyWithSharedVision);
                    PlayerSetAlliance(gv_PlayerBayul[lv_GPlayerNum6], c_allianceIdControl, gv_PlayerBayul[lv_GPlayerNum5], true);
                }

            }
            for (lv_GPlayerNum6 = 5; lv_GPlayerNum6 <= 8; lv_GPlayerNum6 += 1) {
                if (((PlayerType(gv_PlayerBayul[lv_GPlayerNum6]) == c_playerTypeComputer) || ((PlayerType(gv_PlayerBayul[lv_GPlayerNum6]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[lv_GPlayerNum6]) == c_playerStatusActive)))) {
                    libNtve_gf_SetAlliance(gv_PlayerBayul[lv_GPlayerNum6], gv_PlayerBayul[lv_GPlayerNum5], libNtve_ge_AllianceSetting_EnemyWithSharedVision);
                    PlayerSetAlliance(gv_PlayerBayul[lv_GPlayerNum6], c_allianceIdControl, gv_PlayerBayul[lv_GPlayerNum5], true);
                }

            }
        }

        lv_GPlayerNum5 += 1;
        lv_GPlayerNum6 = 1;
    }
    UISetCommandAllowed(GameAttributePlayersForTeam(3), c_uiCommandAllowButtons, false);
    UISetCommandAllowed(GameAttributePlayersForTeam(3), c_uiCommandAllowPings, false);
    UISetCommandAllowed(GameAttributePlayersForTeam(3), c_uiCommandAllowSmartClick, false);
    UISetCommandAllowed(GameAttributePlayersForTeam(3), c_uiCommandAllowHotkeys, false);
    UISetCommandAllowed(GameAttributePlayersForTeam(3), c_uiCommandAllowMinimap, false);
    UISetCommandAllowed(GameAttributePlayersForTeam(3), c_uiCommandAllowModifiers, false);
    UISetCommandAllowed(GameAttributePlayersForTeam(3), c_uiCommandAllowInfoPanel, false);
    UISetFrameVisible(GameAttributePlayersForTeam(3), c_syncFrameTypeInventoryPanel, false);

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tr3PlayerSetting_Init () {
    gt_Tr3PlayerSetting = TriggerCreate("gt_Tr3PlayerSetting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 5 - ?????? ???????????? ?????????
//--------------------------------------------------------------------------------------------------
bool gt_Tr5AllDialogInit_Func (bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HrStartBeforeCounterMake();
    gf_HrStartBeforeCounterMake2();
    gf_HrStartBeforeCounterMake3();
    gf_HrHeroReviveWindowMake();
    gf_HrSkillLearnDialogMake();
    gf_HrStatMoneySet();
    gf_HrTeamSelectDialogMake();
    gf_HrStatDialogMake1a();
    gf_HrStatDialogMake2a();
    gf_HrStatDialogMake3a2();
    gf_HrStatDialogMake3a();
    gf_HrStatDialogMake4a();
    gf_HrSurrenderDialogMake();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tr5AllDialogInit_Init () {
    gt_Tr5AllDialogInit = TriggerCreate("gt_Tr5AllDialogInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 6 - ???????????? ???????????? ?????? ??? ??????
//--------------------------------------------------------------------------------------------------
bool gt_Tr6PlayerDialogAddorView_Func (bool testConds, bool runActions) {
    int i;

    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    for (i = 1; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            DialogControlSetVisible(gv_TeamSelectDialogPlayerName[gv_PlayerBayul[i]], PlayerGroupAll(), true);
            if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), gv_PlayerBayul[i]) == true)) {
                DialogControlSetVisible(gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[i]], GameAttributePlayersForTeam(1), true);
                DialogControlSetVisible(gv_TeamSelectDialogPlayerSpellImage1[gv_PlayerBayul[i]], GameAttributePlayersForTeam(1), true);
                DialogControlSetVisible(gv_TeamSelectDialogPlayerSpellImage2[gv_PlayerBayul[i]], GameAttributePlayersForTeam(1), true);
            }
            else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), gv_PlayerBayul[i]) == true)) {
                DialogControlSetVisible(gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[i]], GameAttributePlayersForTeam(2), true);
                DialogControlSetVisible(gv_TeamSelectDialogPlayerSpellImage1[gv_PlayerBayul[i]], GameAttributePlayersForTeam(2), true);
                DialogControlSetVisible(gv_TeamSelectDialogPlayerSpellImage2[gv_PlayerBayul[i]], GameAttributePlayersForTeam(2), true);
            }

            DialogControlSetVisible(gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[i]], GameAttributePlayersForTeam(3), true);
            DialogControlSetVisible(gv_TeamSelectDialogPlayerBorder[gv_PlayerBayul[i]], PlayerGroupAll(), true);
            DialogControlSetVisible(gv_TeamSelectDialogPlayerSpellImage1[gv_PlayerBayul[i]], GameAttributePlayersForTeam(3), true);
            DialogControlSetVisible(gv_TeamSelectDialogPlayerSpellImage2[gv_PlayerBayul[i]], GameAttributePlayersForTeam(3), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tr6PlayerDialogAddorView_Init () {
    gt_Tr6PlayerDialogAddorView = TriggerCreate("gt_Tr6PlayerDialogAddorView_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 8 - ?????? ?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_Tr8VoteScreenView_Func (bool testConds, bool runActions) {
    int lv_GPlayerNum1;

    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.5, c_timeReal);
    DialogControlFadeTransparency(gv_CharChooseFullDialogImage[0], PlayerGroupAll(), 1.5, 100.0);
    DialogControlSetVisible(gv_CharChooseFullDialogLabel, PlayerGroupAll(), false);
    Wait(1.5, c_timeReal);
    DialogControlSetVisible(gv_CharChooseFullDialogImage[0], PlayerGroupAll(), false);
    Wait(0.5, c_timeReal);
    DialogSetVisible(gv_CharChooseDialog[1], PlayerGroupAll(), true);
    DialogSetVisible(gv_BeforeStartCounterDialog[0], PlayerGroupAll(), true);

    while ((gv_BeforeStartCounterDialogNum > 0)) {
        libNtve_gf_SetDialogItemText(gv_BeforeStartCounterDialogLabel[0], (StringExternal("Param/Value/24BC1DB5") + IntToText(gv_BeforeStartCounterDialogNum) + StringExternal("Param/Value/9138AB48")), PlayerGroupAll());
        gv_BeforeStartCounterDialogNum -= 1;
        if (((gv_ReadyBoolean == 0) || ((gv_GameModeVoteInt[0] > gv_GameModeVoteInt[1]) && ((gv_GameModeVoteInt[0] - gv_GameModeVoteInt[1]) >= 3)) || ((gv_GameModeVoteInt[1] > gv_GameModeVoteInt[0]) && ((gv_GameModeVoteInt[1] - gv_GameModeVoteInt[0]) >= 3)))) {
            gv_BeforeStartCounterDialogNum = 0;
        }
        Wait(1.0, c_timeReal);
    }

    libNtve_gf_SetDialogItemText(gv_BeforeStartCounterDialogLabel[0], (StringExternal("Param/Value/4CA2C74C") + IntToText(gv_BeforeStartCounterDialogNum) + StringExternal("Param/Value/8B9FA8FC")), PlayerGroupAll());
    Wait(1.0, c_timeReal);
    gv_ReadyBoolean = 0;
    SoundPlay(SoundLink("UI_League_Badge_Impact_6Ch_Bell", -1), PlayerGroupAll(), 100.0, 0.0);
    DialogSetVisible(gv_CharChooseDialog[1], PlayerGroupAll(), false);
    DialogSetVisible(gv_BeforeStartCounterDialog[0], PlayerGroupAll(), false);
    DialogSetPosition(gv_BeforeStartCounterDialog[0], c_anchorCenter, 0, -395);
    if ((gv_GameModeVoteInt[0] > gv_GameModeVoteInt[1])) {
        gv_GameModeVoteValue = true;
    }

    for (lv_GPlayerNum1 = 1; lv_GPlayerNum1 <= 8; lv_GPlayerNum1 += 1) {
        if ((PlayerType(gv_PlayerBayul[lv_GPlayerNum1]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[lv_GPlayerNum1]) == c_playerStatusActive)) {
            gv_ReadyBoolean += 1;
            if ((gv_GameModeVoteValue == true)) {
                DialogControlSetVisible(gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[lv_GPlayerNum1]], PlayerGroupAll(), false);
                DialogControlSetVisible(gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[lv_GPlayerNum1]], PlayerGroupAll(), true);
                libNtve_gf_SetDialogItemText(gv_TeamSelectDialogPlayerName[gv_PlayerBayul[lv_GPlayerNum1]], (StringExternal("Param/Value/47A1E486") + PlayerName(gv_PlayerBayul[lv_GPlayerNum1]) + StringExternal("Param/Value/A5530891")), PlayerGroupAll());
            }
        }
    }

    Wait(0.25, c_timeReal);
    DialogSetVisible(gv_CharChooseDialog[0], PlayerGroupAll(), true);
    DialogSetVisible(gv_BeforeStartCounterDialog[0], PlayerGroupAll(), true);
    DialogSetVisible(gv_CharChooseDialog[2], PlayerGroupAll(), true);
    DialogSetVisible(gv_CharChooseDialog[4], PlayerGroupAll(), true);
    DialogSetVisible(gv_TeamSelectDialog[0], PlayerGroupAll(), true);
    DialogSetVisible(gv_TeamSelectDialog[1], PlayerGroupAll(), true);

    if ((gv_GameModeVoteValue == true)) {
        TriggerEnable(gt_TrCharSelectDraft, true);
        TriggerExecute(gt_TrCharSelectDraft, true, false);
    } else {
        TriggerEnable(gt_TrCharSelectBlind, true);
        TriggerExecute(gt_TrCharSelectBlind, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tr8VoteScreenView_Init () {
    gt_Tr8VoteScreenView = TriggerCreate("gt_Tr8VoteScreenView_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ?????? ?????? - ?????? ??????
//--------------------------------------------------------------------------------------------------
static bool lf_CharacterNotChosen(int player_number) {
    int i;
    for (i = 0; i < 4; i += 1) {
        if (gv_Team1CharNum[i] == gv_SelectedCharNum[gv_PlayerBayul[player_number]]) {
            return false;
        }
        if (gv_Team2CharNum[i] == gv_SelectedCharNum[gv_PlayerBayul[player_number]]) {
            return false;
        }
    }
    return true;
}

static void lf_PlayerHeroChoice(int player_number) {
    int flag;
    int team_number;
    int dialog_x_position;
    int player_index_in_team;
    flag = 1;
    team_number = 1;
    if (player_number > 4) {
        team_number = 2;
    }
    dialog_x_position = -365;
    player_index_in_team = player_number - 1;
    if (team_number == 2) {
        dialog_x_position = 365;
        player_index_in_team -= 4;
    }
    // Enable the countdown
    gv_BeforeStartCounterDialogNum = 25;
    DialogSetVisible(gv_BeforeStartCounterDialog[1], PlayerGroupAll(), true);
    DialogSetPosition(gv_BeforeStartCounterDialog[1], c_anchorCenter, dialog_x_position, -375);
    // "[Player]'s turn" text
    libNtve_gf_SetDialogItemText(
        gv_BeforeStartCounterDialogLabel[1],
        (
            StringExternal("Param/Value/1F62248E") +
            TextWithColor(PlayerName(gv_PlayerBayul[player_number]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_PlayerBayul[player_number], false))) +
            TextWithColor(StringExternal("Param/Value/3F436E23"), Color(100.00, 100.00, 100.00))
        ),
        PlayerGroupAll()
    );
    // "Selecting" under the portrait
    SoundPlay(SoundLink("UI_Bnet_PopUp_Generic", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_SetDialogItemText(
        gv_TeamSelectDialogPlayerName[gv_PlayerBayul[player_number]],
        (StringExternal("Param/Value/DBADF006") + PlayerName(gv_PlayerBayul[player_number]) + StringExternal("Param/Value/0FA3FB8C")),
        PlayerGroupAll()
    );
    // Countdown ticks
    gv_GameModeMyTurn[gv_PlayerBayul[player_number]] = true;
    while ((gv_BeforeStartCounterDialogNum > 0)) {
        libNtve_gf_SetDialogItemText(
            gv_BeforeStartCounterDialogLabel[0],
            (StringExternal("Param/Value/583553B0") + IntToText(gv_BeforeStartCounterDialogNum) + StringExternal("Param/Value/0214B204")),
            PlayerGroupAll()
        );
        gv_BeforeStartCounterDialogNum -= 1;
        if (((gv_ReadyClickBoolean[gv_PlayerBayul[player_number]] == true) || (PlayerStatus(gv_PlayerBayul[player_number]) != c_playerStatusActive))) {
            gv_BeforeStartCounterDialogNum = 0;
        }
        Wait(1.0, c_timeReal);
    }
    libNtve_gf_SetDialogItemText(gv_BeforeStartCounterDialogLabel[0], (StringExternal("Param/Value/5C0B98B5") + IntToText(gv_BeforeStartCounterDialogNum) + StringExternal("Param/Value/CEFBE5DF")), PlayerGroupAll());
    Wait(0.5, c_timeReal);
    // Disable the countdown
    DialogSetVisible(gv_BeforeStartCounterDialog[1], PlayerGroupAll(), false);
    // Give a random character if not chosen
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 0)) {
        while ((flag > 0)) {
            gv_SelectedCharNum[gv_PlayerBayul[player_number]] = RandomInt(1, gv_TotalHeroNum);
            if (lf_CharacterNotChosen(player_number)) {
                flag = 0;
                if (team_number == 1) {
                    gv_Team1CharNum[player_index_in_team] = gv_SelectedCharNum[gv_PlayerBayul[player_number]];
                } else {
                    gv_Team2CharNum[player_index_in_team] = gv_SelectedCharNum[gv_PlayerBayul[player_number]];
                }
                PlayerCreateEffectPoint(gv_PlayerBayul[player_number], "HeroOkGi2242", PointFromId(1));
            }
            Wait(0.01, c_timeReal);
        }
    }
    // "Ready" under the portrait
    libNtve_gf_SetDialogItemText(gv_TeamSelectDialogPlayerName[gv_PlayerBayul[player_number]], (StringExternal("Param/Value/0C8DBF4C") + PlayerName(gv_PlayerBayul[player_number]) + StringExternal("Param/Value/7ACF4E49")), PlayerGroupAll());
    // Pass the choice
    gv_GameModeMyTurn[gv_PlayerBayul[player_number]] = false;
}

static void lf_PlayerBan(int player_number, int ban_number) {
    int i;
    int flag;
    int team_number;
    int dialog_x_position;
    int player_index_in_team;
    flag = 1;
    team_number = 1;
    if (player_number > 4) {
        team_number = 2;
    }
    dialog_x_position = -365;
    player_index_in_team = player_number - 1;
    if (team_number == 2) {
        dialog_x_position = 365;
        player_index_in_team -= 4;
    }
    // Enable the countdown
    gv_BeforeStartCounterDialogNum = 25;
    DialogSetVisible(gv_BeforeStartCounterDialog[1], PlayerGroupAll(), true);
    DialogSetPosition(gv_BeforeStartCounterDialog[1], c_anchorCenter, dialog_x_position, -375);
    // "[Player]'s turn" text
    libNtve_gf_SetDialogItemText(
        gv_BeforeStartCounterDialogLabel[1],
        (
            StringExternal("Param/Value/1F62248E") +
            TextWithColor(PlayerName(gv_PlayerBayul[player_number]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_PlayerBayul[player_number], false))) +
            // TextWithColor(StringToText("'s ban"), Color(100.00, 100.00, 100.00))
            TextWithColor(StringExternal("DOCSTR_Banning2"), Color(100.00, 100.00, 100.00))
        ),
        PlayerGroupAll()
    );
    // "Banning" under the portrait
    libNtve_gf_SetDialogItemText(
        gv_TeamSelectDialogPlayerName[gv_PlayerBayul[player_number]],
        (
            StringExternal("Param/Value/DBADF006") + 
            PlayerName(gv_PlayerBayul[player_number]) + 
            // StringToText("(</c><c val=\"ff4444\">Banning</c>)</s>")
            StringExternal("DOCSTR_Banning1")
        ),
        PlayerGroupAll()
    );
    for (i = 0; i <= 4; i += 1) {
        DialogControlSetEnabled(gv_CharChooseWindowRandomBtn[i], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_CharChooseWindowRandomImage[i], PlayerGroupAll(), false);
    }
    // Countdown ticks
    gv_GameModeMyTurn[gv_PlayerBayul[player_number]] = true;
    while ((gv_BeforeStartCounterDialogNum > 0)) {
        libNtve_gf_SetDialogItemText(
            gv_BeforeStartCounterDialogLabel[0],
            (StringExternal("Param/Value/583553B0") + IntToText(gv_BeforeStartCounterDialogNum) + StringExternal("Param/Value/0214B204")),
            PlayerGroupAll()
        );
        gv_BeforeStartCounterDialogNum -= 1;
        if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] != 0) || (PlayerStatus(gv_PlayerBayul[player_number]) != c_playerStatusActive)) {
            gv_BeforeStartCounterDialogNum = 0;
            break;
        }
        Wait(1.0, c_timeReal);
    }
    libNtve_gf_SetDialogItemText(gv_BeforeStartCounterDialogLabel[0], (StringExternal("Param/Value/5C0B98B5") + IntToText(gv_BeforeStartCounterDialogNum) + StringExternal("Param/Value/CEFBE5DF")), PlayerGroupAll());
    Wait(0.05, c_timeReal);
    // Disable the countdown
    DialogSetVisible(gv_BeforeStartCounterDialog[1], PlayerGroupAll(), false);
    // Choose a random unbanned character if time's up
    if ((gv_SelectedCharNum[gv_PlayerBayul[player_number]] == 0)) {
        while ((flag > 0)) {
            gv_SelectedCharNum[gv_PlayerBayul[player_number]] = RandomInt(1, gv_TotalHeroNum);
            gv_CharSelectedName[gv_PlayerBayul[player_number]] = gv_HeroInformation[gv_SelectedCharNum[gv_PlayerBayul[player_number]] - 1].name;
            flag = 0;
            for (i = 0; i < 6; i += 1) {
                if (gv_SelectedCharNum[gv_PlayerBayul[player_number]] == gv_BannedCharNum[i]) {
                    flag = 1;
                    break;
                }
            }
            if (flag == 1) {
                continue;
            }
            Wait(0.01, c_timeReal);
        }
    }
    // Ban it for everyone
    gv_BannedCharNum[ban_number] = gv_SelectedCharNum[gv_PlayerBayul[player_number]];
    DialogControlSetEnabled(gv_CharChooseWindowBtn[gv_BannedCharNum[ban_number] - 1], PlayerGroupAll(), false);
    DialogControlSetEnabled(gv_CharChooseWindowImage[gv_BannedCharNum[ban_number] - 1], PlayerGroupAll(), false);
    // Play the sound
    SoundPlay(SoundLink("Hero62_Death", -1), PlayerGroupAll(), 100.0, 0.0);
    // Display the message for everyone
    UIDisplayMessage(
        PlayerGroupAll(),
        c_messageAreaSubtitle,
        (
            TextWithColor(PlayerName(gv_PlayerBayul[player_number]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_PlayerBayul[player_number], false))) +
            // StringToText(" has banned ") + 
            StringExternal("DOCSTR_Banning3") +
            gv_CharSelectedName[gv_PlayerBayul[player_number]]
        )
    );
    // Reset the chosen character portrait, name and number
    gv_CharSelectedImage[gv_PlayerBayul[player_number]] = "Assets\\InviButton.dds";
    gv_CharSelectedName[gv_PlayerBayul[player_number]] = StringToText("");
    gv_SelectedCharNum[gv_PlayerBayul[player_number]] = 0;
    // Reset the actual portrait dialog
    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[player_number]], gv_CharSelectedImage[gv_PlayerBayul[player_number]], PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerHeroImage[gv_PlayerBayul[player_number]], gv_CharSelectedName[gv_PlayerBayul[player_number]], PlayerGroupAll());
    // "Waiting" under the portrait
    libNtve_gf_SetDialogItemText(
        gv_TeamSelectDialogPlayerName[gv_PlayerBayul[player_number]],
        (StringExternal("Param/Value/47A1E486") + PlayerName(gv_PlayerBayul[player_number]) + StringExternal("Param/Value/A5530891")),
        PlayerGroupAll()
    );
    // Pass the choice
    gv_GameModeMyTurn[gv_PlayerBayul[player_number]] = false;
}

bool gt_TrCharSelectDraft_Func (bool testConds, bool runActions) {
    int i = 1;
    int flag = 1;
    int ban_number;
    int selecting_hero;
    if (!runActions) {
        return true;
    }
    TriggerEnable(TriggerGetCurrent(), false);
    for (i = 0; i <= 4; i += 1) {
        DialogControlSetEnabled(gv_CharChooseWindowRandomBtn[i], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_CharChooseWindowRandomImage[i], PlayerGroupAll(), false);
    }
    // Bans
    SoundPlay(SoundLink("UI_Bnet_PopUp_Generic", -1), PlayerGroupAll(), 100.0, 0.0);
    ban_number = 0;
    for (i = 0; i < 3; i += 1) {
        if ((PlayerType(gv_PlayerBayul[1]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[1]) == c_playerStatusActive)) {
            lf_PlayerBan(1, ban_number);
            ban_number += 1;
        }
        if ((PlayerType(gv_PlayerBayul[5]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[5]) == c_playerStatusActive)) {
            lf_PlayerBan(5, ban_number);
            ban_number += 1;
        }
    }
    // Hero select
    for (i = 0 ; i < 8 ; i += 1 ) {
        selecting_hero = gv_DraftChoiceOrder[i];
        if ((PlayerType(gv_PlayerBayul[selecting_hero]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[selecting_hero]) == c_playerStatusActive)) {
            lf_PlayerHeroChoice(selecting_hero);
        }
    }
    // Character swapping
    SoundPlay(SoundLink("UI_Bnet_GameModeBig", -1), PlayerGroupAll(), 100.0, 0.0);
    DialogControlSetEnabled(gv_CharChooseDialogReadyBtn, PlayerGroupAll(), false);
    gv_BeforeStartCounterDialogNum = 15;
    for (i = 1 ; i <= 8 ; i += 1 ) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            if ((gv_PlayerBayul[i] != gv_PlayerBayul[1]) && (PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), gv_PlayerBayul[i]) == true) && (PlayerStatus(gv_PlayerBayul[1]) == c_playerStatusActive)) {
                DialogControlSetVisible(gv_TeamSelectBtn[0], PlayerGroupSingle(gv_PlayerBayul[i]), true);
            }
            if ((gv_PlayerBayul[i] != gv_PlayerBayul[2]) && (PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), gv_PlayerBayul[i]) == true) && (PlayerStatus(gv_PlayerBayul[2]) == c_playerStatusActive)) {
                DialogControlSetVisible(gv_TeamSelectBtn[1], PlayerGroupSingle(gv_PlayerBayul[i]), true);
            }
            if ((gv_PlayerBayul[i] != gv_PlayerBayul[3]) && (PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), gv_PlayerBayul[i]) == true) && (PlayerStatus(gv_PlayerBayul[3]) == c_playerStatusActive)) {
                DialogControlSetVisible(gv_TeamSelectBtn[2], PlayerGroupSingle(gv_PlayerBayul[i]), true);
            }
            if ((gv_PlayerBayul[i] != gv_PlayerBayul[4]) && (PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), gv_PlayerBayul[i]) == true) && (PlayerStatus(gv_PlayerBayul[4]) == c_playerStatusActive)) {
                DialogControlSetVisible(gv_TeamSelectBtn[3], PlayerGroupSingle(gv_PlayerBayul[i]), true);
            }
            if ((gv_PlayerBayul[i] != gv_PlayerBayul[5]) && (PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), gv_PlayerBayul[i]) == true) && (PlayerStatus(gv_PlayerBayul[5]) == c_playerStatusActive)) {
                DialogControlSetVisible(gv_TeamSelectBtn[4], PlayerGroupSingle(gv_PlayerBayul[i]), true);
            }
            if ((gv_PlayerBayul[i] != gv_PlayerBayul[6]) && (PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), gv_PlayerBayul[i]) == true) && (PlayerStatus(gv_PlayerBayul[6]) == c_playerStatusActive)) {
                DialogControlSetVisible(gv_TeamSelectBtn[5], PlayerGroupSingle(gv_PlayerBayul[i]), true);
            }
            if ((gv_PlayerBayul[i] != gv_PlayerBayul[7]) && (PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), gv_PlayerBayul[i]) == true) && (PlayerStatus(gv_PlayerBayul[7]) == c_playerStatusActive)) {
                DialogControlSetVisible(gv_TeamSelectBtn[6], PlayerGroupSingle(gv_PlayerBayul[i]), true);
            }
            if ((gv_PlayerBayul[i] != gv_PlayerBayul[8]) && (PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), gv_PlayerBayul[i]) == true) && (PlayerStatus(gv_PlayerBayul[8]) == c_playerStatusActive)) {
                DialogControlSetVisible(gv_TeamSelectBtn[7], PlayerGroupSingle(gv_PlayerBayul[i]), true);
            }
        }
    }
    while ((gv_BeforeStartCounterDialogNum > 0)) {
        libNtve_gf_SetDialogItemText(gv_BeforeStartCounterDialogLabel[0], (StringExternal("Param/Value/7179CDFE") + IntToText(gv_BeforeStartCounterDialogNum) + StringExternal("Param/Value/BF891EA0")), PlayerGroupAll());
        gv_BeforeStartCounterDialogNum -= 1;
        Wait(1.0, c_timeReal);
    }
    libNtve_gf_SetDialogItemText(gv_BeforeStartCounterDialogLabel[0], (StringExternal("Param/Value/D720B649") + IntToText(0) + StringExternal("Param/Value/4B1E7C27")), PlayerGroupAll());
    Wait(1.0, c_timeReal);
    // Cleanup
    DialogControlSetEnabled(gv_CharChooseDialogReadyBtn, PlayerGroupAll(), false);
    for (i = 0; i < 8; i += 1) {
        DialogSetVisible(gv_CharChooseDialog[i], PlayerGroupAll(), false);
    }
    DialogSetVisible(gv_TeamSelectDialog[0], PlayerGroupAll(), false);
    DialogSetVisible(gv_TeamSelectDialog[1], PlayerGroupAll(), false);
    DialogSetVisible(gv_BeforeStartCounterDialog[0], PlayerGroupAll(), false);
    DialogControlFadeTransparency(gv_CharChooseFullDialogImage[1], PlayerGroupAll(), 1.0, 100.0);
    SoundPlay(SoundLink("UI_LeaguePromotion_Gold_Impact", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.5, c_timeReal);
    DialogSetVisible(gv_CharChooseFullDialog, PlayerGroupAll(), false);
    TriggerExecute(gt_TrBeforeSpellRandomSelect, false, false);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TrCharSelectDraft_Init () {
    gt_TrCharSelectDraft = TriggerCreate("gt_TrCharSelectDraft_Func");
    TriggerEnable(gt_TrCharSelectDraft, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ?????? ?????? - ????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrCharSelectBlind_Func (bool testConds, bool runActions) {
    int i;
    bool flag = true;
    int[12] random_hero_num;

    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_BeforeStartCounterDialogNum = 83;
    while ((gv_BeforeStartCounterDialogNum > 0)) {
        if ((gv_BeforeStartCounterDialogNum <= 10)) {
            libNtve_gf_SetDialogItemText(gv_BeforeStartCounterDialogLabel[0], (StringExternal("Param/Value/704236E9") + IntToText(gv_BeforeStartCounterDialogNum) + StringExternal("Param/Value/E3AE55D5")), PlayerGroupAll());
            SoundPlay(SoundLink("UI_DoorMenu_ListSelect", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            libNtve_gf_SetDialogItemText(gv_BeforeStartCounterDialogLabel[0], (StringExternal("Param/Value/279CB5D8") + IntToText(gv_BeforeStartCounterDialogNum) + StringExternal("Param/Value/C33FE07E")), PlayerGroupAll());
        }
        gv_BeforeStartCounterDialogNum -= 1;
        if ((gv_ReadyBoolean == 0)) {
            gv_BeforeStartCounterDialogNum = 0;
        }

        Wait(1.0, c_timeReal);
    }
    libNtve_gf_SetDialogItemText(gv_BeforeStartCounterDialogLabel[0], (StringExternal("Param/Value/60B3A502") + IntToText(gv_BeforeStartCounterDialogNum) + StringExternal("Param/Value/9DCA98DA")), PlayerGroupAll());
    SoundPlay(SoundLink("UI_DoorMenu_ListSelect", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    DialogControlSetEnabled(gv_CharChooseDialogReadyBtn, PlayerGroupAll(), false);
    DialogSetVisible(gv_CharChooseDialog[0], PlayerGroupAll(), false);
    DialogSetVisible(gv_CharChooseDialog[2], PlayerGroupAll(), false);
    DialogSetVisible(gv_CharChooseDialog[3], PlayerGroupAll(), false);
    DialogSetVisible(gv_CharChooseDialog[4], PlayerGroupAll(), false);
    DialogSetVisible(gv_CharChooseDialog[5], PlayerGroupAll(), false);
    DialogSetVisible(gv_CharChooseDialog[6], PlayerGroupAll(), false);
    DialogSetVisible(gv_CharChooseDialog[7], PlayerGroupAll(), false);
    DialogSetVisible(gv_TeamSelectDialog[0], PlayerGroupAll(), false);
    DialogSetVisible(gv_TeamSelectDialog[1], PlayerGroupAll(), false);
    DialogSetVisible(gv_BeforeStartCounterDialog[0], PlayerGroupAll(), false);
    DialogControlFadeTransparency(gv_CharChooseFullDialogImage[1], PlayerGroupAll(), 1.0, 100.0);
    SoundPlay(SoundLink("UI_LeaguePromotion_Gold_Impact", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.5, c_timeReal);
    DialogSetVisible(gv_CharChooseFullDialog, PlayerGroupAll(), false);
    for (i = 1; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            if ((gv_SelectedCharNum[gv_PlayerBayul[i]] == 0)) {
                while (flag) {
                    random_hero_num[gv_PlayerBayul[i]] = RandomInt(1, gv_TotalHeroNum);
                    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), gv_PlayerBayul[i]) == true) && ((gv_Team1CharNum[0] != random_hero_num[gv_PlayerBayul[i]]) && (gv_Team1CharNum[1] != random_hero_num[gv_PlayerBayul[i]]) && (gv_Team1CharNum[2] != random_hero_num[gv_PlayerBayul[i]]) && (gv_Team1CharNum[3] != random_hero_num[gv_PlayerBayul[i]]))) {
                        flag = false;
                        gv_SelectedCharNum[gv_PlayerBayul[i]] = random_hero_num[gv_PlayerBayul[i]];
                        gv_Team1CharNum[(i - 1)] = gv_SelectedCharNum[gv_PlayerBayul[i]];
                    }
                    else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), gv_PlayerBayul[i]) == true) && ((gv_Team2CharNum[0] != random_hero_num[gv_PlayerBayul[i]]) && (gv_Team2CharNum[1] != random_hero_num[gv_PlayerBayul[i]]) && (gv_Team2CharNum[2] != random_hero_num[gv_PlayerBayul[i]]) && (gv_Team2CharNum[3] != random_hero_num[gv_PlayerBayul[i]]))) {
                        flag = false;
                        gv_SelectedCharNum[gv_PlayerBayul[i]] = random_hero_num[gv_PlayerBayul[i]];
                        gv_Team2CharNum[(i - 5)] = gv_SelectedCharNum[gv_PlayerBayul[i]];
                    }
                    Wait(0.01, c_timeReal);
                }
            }
        }
        flag = true;
    }
    TriggerExecute(gt_TrBeforeSpellRandomSelect, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrCharSelectBlind_Init () {
    gt_TrCharSelectBlind = TriggerCreate("gt_TrCharSelectBlind_Func");
    TriggerEnable(gt_TrCharSelectBlind, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ?????? ????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrCharSelectPageNext_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_CharChooseDialogNextBtn[0]) || (EventDialogControl() == gv_CharChooseDialogNextBtn[1])))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_CharChooseDialogNextBtn[0])) {
        if ((DialogIsVisible(gv_CharChooseDialog[3], EventPlayer()) == true)) {
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[0], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[1], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_CharChooseDialog[3], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_CharChooseDialog[0], PlayerGroupSingle(EventPlayer()), true);
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[0], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_disabled.dds", PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[1], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
        }
        else if ((DialogIsVisible(gv_CharChooseDialog[5], EventPlayer()) == true)) {
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[0], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[1], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_CharChooseDialog[5], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_CharChooseDialog[3], PlayerGroupSingle(EventPlayer()), true);
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[0], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[1], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
        }
        else if ((DialogIsVisible(gv_CharChooseDialog[6], EventPlayer()) == true)) {
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[0], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[1], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_CharChooseDialog[6], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_CharChooseDialog[5], PlayerGroupSingle(EventPlayer()), true);
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[0], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[1], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
        }
        else if ((DialogIsVisible(gv_CharChooseDialog[7], EventPlayer()) == true)) {
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[0], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[1], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_CharChooseDialog[7], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_CharChooseDialog[6], PlayerGroupSingle(EventPlayer()), true);
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[0], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[1], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
        }
    }
    else if ((EventDialogControl() == gv_CharChooseDialogNextBtn[1])) {
        if ((DialogIsVisible(gv_CharChooseDialog[0], EventPlayer()) == true)) {
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[0], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[1], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_CharChooseDialog[3], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_CharChooseDialog[0], PlayerGroupSingle(EventPlayer()), false);
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[0], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[1], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
        }
        else if ((DialogIsVisible(gv_CharChooseDialog[3], EventPlayer()) == true)) {
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[0], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_CharChooseDialog[5], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_CharChooseDialog[3], PlayerGroupSingle(EventPlayer()), false);
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[0], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[1], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
        }
        else if ((DialogIsVisible(gv_CharChooseDialog[5], EventPlayer()) == true)) {
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[0], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_CharChooseDialog[6], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_CharChooseDialog[5], PlayerGroupSingle(EventPlayer()), false);
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[0], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[1], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
        }
        else if ((DialogIsVisible(gv_CharChooseDialog[6], EventPlayer()) == true)) {
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[1], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetEnabled(gv_CharChooseDialogNextBtn[0], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_CharChooseDialog[7], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_CharChooseDialog[6], PlayerGroupSingle(EventPlayer()), false);
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[0], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_hover.dds", PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImage(gv_CharChooseDialogNextImage[1], "Assets\\Textures\\ui_glues_icons_smallpagearrow_left_disabled.dds", PlayerGroupSingle(EventPlayer()));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrCharSelectPageNext_Init () {
    gt_TrCharSelectPageNext = TriggerCreate("gt_TrCharSelectPageNext_Func");
    TriggerAddEventDialogControl(gt_TrCharSelectPageNext, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ??????(??????)
//--------------------------------------------------------------------------------------------------
bool gt_TrCharSelect_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_CharSelectedDelay[0] == false)) || ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_CharSelectedDelay[1] == false))))) {
            return false;
        }

        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!(((gv_GameModeVoteValue == false) || ((gv_GameModeVoteValue == true) && (gv_GameModeMyTurn[EventPlayer()] == true))))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_CharChooseWindowBtn[0]) || (EventDialogControl() == gv_CharChooseWindowBtn[1]) || (EventDialogControl() == gv_CharChooseWindowBtn[2]) || (EventDialogControl() == gv_CharChooseWindowBtn[3]) || (EventDialogControl() == gv_CharChooseWindowBtn[4]) || (EventDialogControl() == gv_CharChooseWindowBtn[5]) || (EventDialogControl() == gv_CharChooseWindowBtn[6]) || (EventDialogControl() == gv_CharChooseWindowBtn[7]) || (EventDialogControl() == gv_CharChooseWindowBtn[8]) || (EventDialogControl() == gv_CharChooseWindowBtn[9]) || (EventDialogControl() == gv_CharChooseWindowBtn[10]) || (EventDialogControl() == gv_CharChooseWindowBtn[11]) || (EventDialogControl() == gv_CharChooseWindowBtn[12]) || (EventDialogControl() == gv_CharChooseWindowBtn[13]) || (EventDialogControl() == gv_CharChooseWindowBtn[14]) || (EventDialogControl() == gv_CharChooseWindowBtn[15]) || (EventDialogControl() == gv_CharChooseWindowBtn[16]) || (EventDialogControl() == gv_CharChooseWindowBtn[17]) || (EventDialogControl() == gv_CharChooseWindowBtn[18]) || (EventDialogControl() == gv_CharChooseWindowBtn[19]) || (EventDialogControl() == gv_CharChooseWindowBtn[20]) || (EventDialogControl() == gv_CharChooseWindowBtn[21]) || (EventDialogControl() == gv_CharChooseWindowBtn[22]) || (EventDialogControl() == gv_CharChooseWindowBtn[23]) || (EventDialogControl() == gv_CharChooseWindowBtn[24]) || (EventDialogControl() == gv_CharChooseWindowBtn[25]) || (EventDialogControl() == gv_CharChooseWindowBtn[26]) || (EventDialogControl() == gv_CharChooseWindowBtn[27]) || (EventDialogControl() == gv_CharChooseWindowBtn[28]) || (EventDialogControl() == gv_CharChooseWindowBtn[29]) || (EventDialogControl() == gv_CharChooseWindowBtn[30]) || (EventDialogControl() == gv_CharChooseWindowBtn[31]) || (EventDialogControl() == gv_CharChooseWindowBtn[32]) || (EventDialogControl() == gv_CharChooseWindowBtn[33]) || (EventDialogControl() == gv_CharChooseWindowBtn[34]) || (EventDialogControl() == gv_CharChooseWindowBtn[35]) || (EventDialogControl() == gv_CharChooseWindowBtn[36]) || (EventDialogControl() == gv_CharChooseWindowBtn[37]) || (EventDialogControl() == gv_CharChooseWindowBtn[38]) || (EventDialogControl() == gv_CharChooseWindowBtn[39]) || (EventDialogControl() == gv_CharChooseWindowBtn[40]) || (EventDialogControl() == gv_CharChooseWindowBtn[41]) || (EventDialogControl() == gv_CharChooseWindowBtn[42]) || (EventDialogControl() == gv_CharChooseWindowBtn[43]) || (EventDialogControl() == gv_CharChooseWindowBtn[44]) || (EventDialogControl() == gv_CharChooseWindowBtn[45]) || (EventDialogControl() == gv_CharChooseWindowBtn[46]) || (EventDialogControl() == gv_CharChooseWindowBtn[47]) || (EventDialogControl() == gv_CharChooseWindowBtn[48]) || (EventDialogControl() == gv_CharChooseWindowBtn[49]) || (EventDialogControl() == gv_CharChooseWindowBtn[50]) || (EventDialogControl() == gv_CharChooseWindowBtn[51]) || (EventDialogControl() == gv_CharChooseWindowBtn[52]) || (EventDialogControl() == gv_CharChooseWindowBtn[53]) || (EventDialogControl() == gv_CharChooseWindowBtn[54]) || (EventDialogControl() == gv_CharChooseWindowBtn[55]) || (EventDialogControl() == gv_CharChooseWindowBtn[56]) || (EventDialogControl() == gv_CharChooseWindowBtn[57]) || (EventDialogControl() == gv_CharChooseWindowBtn[58]) || (EventDialogControl() == gv_CharChooseWindowBtn[59]) || (EventDialogControl() == gv_CharChooseWindowBtn[60]) || (EventDialogControl() == gv_CharChooseWindowBtn[61]) || (EventDialogControl() == gv_CharChooseWindowBtn[62]) || (EventDialogControl() == gv_CharChooseWindowBtn[63]) || (EventDialogControl() == gv_CharChooseWindowBtn[64]) || (EventDialogControl() == gv_CharChooseWindowBtn[65]) || (EventDialogControl() == gv_CharChooseWindowBtn[66]) || (EventDialogControl() == gv_CharChooseWindowBtn[67]) || (EventDialogControl() == gv_CharChooseWindowBtn[68]) || (EventDialogControl() == gv_CharChooseWindowBtn[69]) || (EventDialogControl() == gv_CharChooseWindowBtn[70]) || (EventDialogControl() == gv_CharChooseWindowBtn[71]) || (EventDialogControl() == gv_CharChooseWindowBtn[72])))) {
            return false;
        }

        if (!((gv_ReadyClickBoolean[EventPlayer()] == false))) {
            return false;
        }

        if (!((gv_ReadyRandomBoolean[EventPlayer()] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_CharSelectedDelay[0] == false)) {
        gv_CharSelectedDelay[0] = true;
    }
    else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_CharSelectedDelay[1] == false)) {
        gv_CharSelectedDelay[1] = true;
    }
    if ((((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_CharSelectedDelay[0] == true)) || ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_CharSelectedDelay[1] == true)))) {
        gf_HrHeroSelect();
        gf_HrHeroTeamSelectSave();
        gf_HrHeroTeamSelectSave2();
        if ((gv_GameModeVoteValue == true)) {
            libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedImage[EventPlayer()], PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedName[EventPlayer()], PlayerGroupAll());
        }
        else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
            libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedImage[EventPlayer()], GameAttributePlayersForTeam(1));
            libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedName[EventPlayer()], GameAttributePlayersForTeam(1));
        }
        else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true)) {
            libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedImage[EventPlayer()], GameAttributePlayersForTeam(2));
            libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedName[EventPlayer()], GameAttributePlayersForTeam(2));
        }
        libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedImage[EventPlayer()], GameAttributePlayersForTeam(3));
        libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedName[EventPlayer()], GameAttributePlayersForTeam(3));
    }

    if ((gv_CharRandomBoolean[EventPlayer()] == true)) {
        gv_CharRandomBoolean[EventPlayer()] = false;
        for (i = 0; i <= 4; i += 1) {
            DialogControlSetEnabled(gv_CharChooseWindowRandomBtn[i], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_CharChooseWindowRandomImage[i], PlayerGroupSingle(EventPlayer()), true);
        }
    }

    Wait(0.2, c_timeReal);
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_CharSelectedDelay[0] == true)) {
        gv_CharSelectedDelay[0] = false;
    }
    else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_CharSelectedDelay[1] == true)) {
        gv_CharSelectedDelay[1] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrCharSelect_Init () {
    gt_TrCharSelect = TriggerCreate("gt_TrCharSelect_Func");
    TriggerAddEventDialogControl(gt_TrCharSelect, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrCharSelectRandom_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_CharSelectedDelay[0] == false)) || ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_CharSelectedDelay[1] == false))))) {
            return false;
        }

        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_CharChooseWindowRandomBtn[0]) || (EventDialogControl() == gv_CharChooseWindowRandomBtn[1]) || (EventDialogControl() == gv_CharChooseWindowRandomBtn[2]) || (EventDialogControl() == gv_CharChooseWindowRandomBtn[3]) || (EventDialogControl() == gv_CharChooseWindowRandomBtn[4])))) {
            return false;
        }

        if (!((gv_ReadyClickBoolean[EventPlayer()] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_CharSelectedDelay[0] == false)) {
        gv_CharSelectedDelay[0] = true;
    }
    else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_CharSelectedDelay[1] == false)) {
        gv_CharSelectedDelay[1] = true;
    }
    if ((((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_CharSelectedDelay[0] == true)) || ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_CharSelectedDelay[1] == true)))) {
        gv_CharSelectedImage[EventPlayer()] = "Assets\\Textures\\btn-tips-tutorial.dds";
        gv_CharSelectedName[EventPlayer()] = StringExternal("Param/Value/3FAF9C55");
        gv_SelectedCharNum[EventPlayer()] = 0;
        gv_CharRandomBoolean[EventPlayer()] = true;
        if ((gv_GameModeVoteValue == true)) {
            libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedImage[EventPlayer()], PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedName[EventPlayer()], PlayerGroupAll());
        }
        else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
            libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedImage[EventPlayer()], GameAttributePlayersForTeam(1));
            libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedName[EventPlayer()], GameAttributePlayersForTeam(1));
        }
        else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true)) {
            libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedImage[EventPlayer()], GameAttributePlayersForTeam(2));
            libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedName[EventPlayer()], GameAttributePlayersForTeam(2));
        }
        libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedImage[EventPlayer()], GameAttributePlayersForTeam(3));
        libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedName[EventPlayer()], GameAttributePlayersForTeam(3));
        gf_HrHeroTeamSelectSave2();
        for (i = 0; i <= 4; i += 1) {
            DialogControlSetEnabled(gv_CharChooseWindowRandomBtn[i], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetEnabled(gv_CharChooseWindowRandomImage[i], PlayerGroupSingle(EventPlayer()), false);
        }
    }

    Wait(0.1, c_timeReal);
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_CharSelectedDelay[0] == true)) {
        gv_CharSelectedDelay[0] = false;
    }
    else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_CharSelectedDelay[1] == true)) {
        gv_CharSelectedDelay[1] = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrCharSelectRandom_Init () {
    gt_TrCharSelectRandom = TriggerCreate("gt_TrCharSelectRandom_Func");
    TriggerAddEventDialogControl(gt_TrCharSelectRandom, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ????????? ????????????
//--------------------------------------------------------------------------------------------------
bool gt_TrDraftSelectRandomRefreash1_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gf_HrDraftSelectRandomRefresh();
    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedImage[EventPlayer()], PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], gv_CharSelectedName[EventPlayer()], PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_TeamSelectDialogPlayerName[EventPlayer()], (StringExternal("Param/Value/C3A850BB") + PlayerName(EventPlayer()) + StringExternal("Param/Value/08307541")), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrDraftSelectRandomRefreash1_Init () {
    gt_TrDraftSelectRandomRefreash1 = TriggerCreate("gt_TrDraftSelectRandomRefreash1_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrDraftSelectRandomRefreash1, c_playerAny, "HeroOkGi2242");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??? ?????? ????????? ?????? ?????? ??????(1)
//--------------------------------------------------------------------------------------------------
bool gt_TrTeamSelectDialogHeroSwap1_Func (bool testConds, bool runActions) {
    int player_to_swap_with;

    player_to_swap_with = gv_PlayerBayul[1];

    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true))) {
            return false;
        }
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerType(player_to_swap_with) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerStatus(player_to_swap_with) == c_playerStatusActive))) {
            return false;
        }
        if (!((EventPlayer() != player_to_swap_with))) {
            return false;
        }
        if (!((EventDialogControl() == gv_TeamSelectBtn[0]))) {
            return false;
        }
        if (!((gv_TeamSelectHeroNothing[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_TeamSelectHeroNothing[0] = true;
    gv_TeamSelectChangeNum[0] = EventPlayer();
    DialogControlSetEnabled(gv_TeamSelectBtn[0], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_TeamSelectBtn[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[3], PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogImage[10], gv_CharSelectedImage[EventPlayer()], PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogImage[10], (StringExternal("Param/Value/8F7AE779") + gv_CharSelectedName[EventPlayer()] + StringExternal("Param/Value/2B3CBFE2")), PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemText(gv_TeamSelectDialogLabel[2], (StringExternal("Param/Value/B0F3A731") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/88823CDE")), PlayerGroupSingle(player_to_swap_with));
    DialogControlSetVisible(gv_TeamSelectDialogImage[8], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[9], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[10], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogLabel[2], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[8], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[9], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetPositionRelative(gv_TeamSelectDialogImage[8], PlayerGroupAll(), c_anchorLeft, gv_TeamSelectDialogPlayerHeroImage[player_to_swap_with], c_anchorLeft, -75, 10);
    SoundPlay(SoundLink("UI_Bnet_PopUpPartyLeave", -1), PlayerGroupSingle(player_to_swap_with), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTeamSelectDialogHeroSwap1_Init () {
    gt_TrTeamSelectDialogHeroSwap1 = TriggerCreate("gt_TrTeamSelectDialogHeroSwap1_Func");
    TriggerAddEventDialogControl(gt_TrTeamSelectDialogHeroSwap1, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??? ?????? ????????? ?????? ?????? ??????(2)
//--------------------------------------------------------------------------------------------------
bool gt_TrTeamSelectDialogHeroSwap2_Func (bool testConds, bool runActions) {
    int player_to_swap_with;

    player_to_swap_with = gv_PlayerBayul[2];

    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true))) {
            return false;
        }
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerType(player_to_swap_with) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerStatus(player_to_swap_with) == c_playerStatusActive))) {
            return false;
        }
        if (!((EventPlayer() != player_to_swap_with))) {
            return false;
        }
        if (!((EventDialogControl() == gv_TeamSelectBtn[1]))) {
            return false;
        }
        if (!((gv_TeamSelectHeroNothing[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_TeamSelectHeroNothing[1] = true;
    gv_TeamSelectChangeNum[1] = EventPlayer();
    DialogControlSetEnabled(gv_TeamSelectBtn[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_TeamSelectBtn[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[3], PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogImage[10], gv_CharSelectedImage[EventPlayer()], PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogImage[10], (StringExternal("Param/Value/997C505C") + gv_CharSelectedName[EventPlayer()] + StringExternal("Param/Value/4AFD709C")), PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemText(gv_TeamSelectDialogLabel[2], (StringExternal("Param/Value/E8DF820D") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/8A1CDD16")), PlayerGroupSingle(player_to_swap_with));
    DialogControlSetVisible(gv_TeamSelectDialogImage[8], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[9], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[10], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogLabel[2], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[8], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[9], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetPositionRelative(gv_TeamSelectDialogImage[8], PlayerGroupAll(), c_anchorLeft, gv_TeamSelectDialogPlayerHeroImage[player_to_swap_with], c_anchorLeft, -75, 10);
    SoundPlay(SoundLink("UI_Bnet_PopUpPartyLeave", -1), PlayerGroupSingle(player_to_swap_with), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTeamSelectDialogHeroSwap2_Init () {
    gt_TrTeamSelectDialogHeroSwap2 = TriggerCreate("gt_TrTeamSelectDialogHeroSwap2_Func");
    TriggerAddEventDialogControl(gt_TrTeamSelectDialogHeroSwap2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??? ?????? ????????? ?????? ?????? ??????(3)
//--------------------------------------------------------------------------------------------------
bool gt_TrTeamSelectDialogHeroSwap3_Func (bool testConds, bool runActions) {
    int player_to_swap_with;

    player_to_swap_with = gv_PlayerBayul[3];

    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true))) {
            return false;
        }
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerType(player_to_swap_with) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerStatus(player_to_swap_with) == c_playerStatusActive))) {
            return false;
        }
        if (!((EventPlayer() != player_to_swap_with))) {
            return false;
        }
        if (!((EventDialogControl() == gv_TeamSelectBtn[2]))) {
            return false;
        }
        if (!((gv_TeamSelectHeroNothing[2] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_TeamSelectHeroNothing[2] = true;
    gv_TeamSelectChangeNum[2] = EventPlayer();
    DialogControlSetEnabled(gv_TeamSelectBtn[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_TeamSelectBtn[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[3], PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogImage[10], gv_CharSelectedImage[EventPlayer()], PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogImage[10], (StringExternal("Param/Value/41304877") + gv_CharSelectedName[EventPlayer()] + StringExternal("Param/Value/176EC555")), PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemText(gv_TeamSelectDialogLabel[2], (StringExternal("Param/Value/76B8C45C") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/C658B722")), PlayerGroupSingle(player_to_swap_with));
    DialogControlSetVisible(gv_TeamSelectDialogImage[8], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[9], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[10], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogLabel[2], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[8], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[9], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetPositionRelative(gv_TeamSelectDialogImage[8], PlayerGroupAll(), c_anchorLeft, gv_TeamSelectDialogPlayerHeroImage[player_to_swap_with], c_anchorLeft, -75, 10);
    SoundPlay(SoundLink("UI_Bnet_PopUpPartyLeave", -1), PlayerGroupSingle(player_to_swap_with), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTeamSelectDialogHeroSwap3_Init () {
    gt_TrTeamSelectDialogHeroSwap3 = TriggerCreate("gt_TrTeamSelectDialogHeroSwap3_Func");
    TriggerAddEventDialogControl(gt_TrTeamSelectDialogHeroSwap3, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??? ?????? ????????? ?????? ?????? ??????(4)
//--------------------------------------------------------------------------------------------------
bool gt_TrTeamSelectDialogHeroSwap4_Func (bool testConds, bool runActions) {
    int player_to_swap_with;

    player_to_swap_with = gv_PlayerBayul[4];

    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true))) {
            return false;
        }
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerType(player_to_swap_with) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerStatus(player_to_swap_with) == c_playerStatusActive))) {
            return false;
        }
        if (!((EventPlayer() != player_to_swap_with))) {
            return false;
        }
        if (!((EventDialogControl() == gv_TeamSelectBtn[3]))) {
            return false;
        }
        if (!((gv_TeamSelectHeroNothing[3] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_TeamSelectHeroNothing[3] = true;
    gv_TeamSelectChangeNum[3] = EventPlayer();
    DialogControlSetEnabled(gv_TeamSelectBtn[3], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_TeamSelectBtn[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[2], PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogImage[10], gv_CharSelectedImage[EventPlayer()], PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogImage[10], (StringExternal("Param/Value/F014D60A") + gv_CharSelectedName[EventPlayer()] + StringExternal("Param/Value/2E687D1E")), PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemText(gv_TeamSelectDialogLabel[2], (StringExternal("Param/Value/1FC70B59") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/84CD97EF")), PlayerGroupSingle(player_to_swap_with));
    DialogControlSetVisible(gv_TeamSelectDialogImage[8], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[9], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[10], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogLabel[2], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[8], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[9], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetPositionRelative(gv_TeamSelectDialogImage[8], PlayerGroupAll(), c_anchorLeft, gv_TeamSelectDialogPlayerHeroImage[player_to_swap_with], c_anchorLeft, -75, 10);
    SoundPlay(SoundLink("UI_Bnet_PopUpPartyLeave", -1), PlayerGroupSingle(player_to_swap_with), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTeamSelectDialogHeroSwap4_Init () {
    gt_TrTeamSelectDialogHeroSwap4 = TriggerCreate("gt_TrTeamSelectDialogHeroSwap4_Func");
    TriggerAddEventDialogControl(gt_TrTeamSelectDialogHeroSwap4, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??? ?????? ????????? ?????? ?????? ??????(5)
//--------------------------------------------------------------------------------------------------
bool gt_TrTeamSelectDialogHeroSwap5_Func (bool testConds, bool runActions) {
    int player_to_swap_with;

    player_to_swap_with = gv_PlayerBayul[5];

    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true))) {
            return false;
        }
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerType(player_to_swap_with) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerStatus(player_to_swap_with) == c_playerStatusActive))) {
            return false;
        }
        if (!((EventPlayer() != player_to_swap_with))) {
            return false;
        }
        if (!((EventDialogControl() == gv_TeamSelectBtn[4]))) {
            return false;
        }
        if (!((gv_TeamSelectHeroNothing[4] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_TeamSelectHeroNothing[4] = true;
    gv_TeamSelectChangeNum[4] = EventPlayer();
    DialogControlSetEnabled(gv_TeamSelectBtn[4], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_TeamSelectBtn[5], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[6], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[7], PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogImage[13], gv_CharSelectedImage[EventPlayer()], PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogImage[13], (StringExternal("Param/Value/1D14E3A5") + gv_CharSelectedName[EventPlayer()] + StringExternal("Param/Value/A81A6602")), PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemText(gv_TeamSelectDialogLabel[3], (StringExternal("Param/Value/C2158CB7") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/5425FB30")), PlayerGroupSingle(player_to_swap_with));
    DialogControlSetVisible(gv_TeamSelectDialogImage[11], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[12], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[13], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogLabel[3], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[10], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[11], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetPositionRelative(gv_TeamSelectDialogImage[11], PlayerGroupAll(), c_anchorLeft, gv_TeamSelectDialogPlayerHeroImage[player_to_swap_with], c_anchorLeft, -75, 10);
    SoundPlay(SoundLink("UI_Bnet_PopUpPartyLeave", -1), PlayerGroupSingle(player_to_swap_with), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTeamSelectDialogHeroSwap5_Init () {
    gt_TrTeamSelectDialogHeroSwap5 = TriggerCreate("gt_TrTeamSelectDialogHeroSwap5_Func");
    TriggerAddEventDialogControl(gt_TrTeamSelectDialogHeroSwap5, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??? ?????? ????????? ?????? ?????? ??????(6)
//--------------------------------------------------------------------------------------------------
bool gt_TrTeamSelectDialogHeroSwap6_Func (bool testConds, bool runActions) {
    int player_to_swap_with;

    player_to_swap_with = gv_PlayerBayul[6];

    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true))) {
            return false;
        }
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerType(player_to_swap_with) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerStatus(player_to_swap_with) == c_playerStatusActive))) {
            return false;
        }
        if (!((EventPlayer() != player_to_swap_with))) {
            return false;
        }
        if (!((EventDialogControl() == gv_TeamSelectBtn[5]))) {
            return false;
        }
        if (!((gv_TeamSelectHeroNothing[5] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_TeamSelectHeroNothing[5] = true;
    gv_TeamSelectChangeNum[5] = EventPlayer();
    DialogControlSetEnabled(gv_TeamSelectBtn[5], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_TeamSelectBtn[4], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[6], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[7], PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogImage[13], gv_CharSelectedImage[EventPlayer()], PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogImage[13], (StringExternal("Param/Value/A86DBDDC") + gv_CharSelectedName[EventPlayer()] + StringExternal("Param/Value/11687509")), PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemText(gv_TeamSelectDialogLabel[3], (StringExternal("Param/Value/F9A401B3") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/507FE0BE")), PlayerGroupSingle(player_to_swap_with));
    DialogControlSetVisible(gv_TeamSelectDialogImage[11], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[12], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[13], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogLabel[3], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[10], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[11], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetPositionRelative(gv_TeamSelectDialogImage[11], PlayerGroupAll(), c_anchorLeft, gv_TeamSelectDialogPlayerHeroImage[player_to_swap_with], c_anchorLeft, -75, 10);
    SoundPlay(SoundLink("UI_Bnet_PopUpPartyLeave", -1), PlayerGroupSingle(player_to_swap_with), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTeamSelectDialogHeroSwap6_Init () {
    gt_TrTeamSelectDialogHeroSwap6 = TriggerCreate("gt_TrTeamSelectDialogHeroSwap6_Func");
    TriggerAddEventDialogControl(gt_TrTeamSelectDialogHeroSwap6, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??? ?????? ????????? ?????? ?????? ??????(7)
//--------------------------------------------------------------------------------------------------
bool gt_TrTeamSelectDialogHeroSwap7_Func (bool testConds, bool runActions) {
    int player_to_swap_with;

    player_to_swap_with = gv_PlayerBayul[7];

    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true))) {
            return false;
        }
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerType(player_to_swap_with) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerStatus(player_to_swap_with) == c_playerStatusActive))) {
            return false;
        }
        if (!((EventPlayer() != player_to_swap_with))) {
            return false;
        }
        if (!((EventDialogControl() == gv_TeamSelectBtn[6]))) {
            return false;
        }
        if (!((gv_TeamSelectHeroNothing[6] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_TeamSelectHeroNothing[6] = true;
    gv_TeamSelectChangeNum[6] = EventPlayer();
    DialogControlSetEnabled(gv_TeamSelectBtn[6], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_TeamSelectBtn[4], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[5], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[7], PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogImage[13], gv_CharSelectedImage[EventPlayer()], PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogImage[13], (StringExternal("Param/Value/D3679C4E") + gv_CharSelectedName[EventPlayer()] + StringExternal("Param/Value/860864D1")), PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemText(gv_TeamSelectDialogLabel[3], (StringExternal("Param/Value/529AA1B5") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/89BEDC42")), PlayerGroupSingle(player_to_swap_with));
    DialogControlSetVisible(gv_TeamSelectDialogImage[11], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[12], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[13], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogLabel[3], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[10], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[11], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetPositionRelative(gv_TeamSelectDialogImage[11], PlayerGroupAll(), c_anchorLeft, gv_TeamSelectDialogPlayerHeroImage[player_to_swap_with], c_anchorLeft, -75, 10);
    SoundPlay(SoundLink("UI_Bnet_PopUpPartyLeave", -1), PlayerGroupSingle(player_to_swap_with), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTeamSelectDialogHeroSwap7_Init () {
    gt_TrTeamSelectDialogHeroSwap7 = TriggerCreate("gt_TrTeamSelectDialogHeroSwap7_Func");
    TriggerAddEventDialogControl(gt_TrTeamSelectDialogHeroSwap7, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??? ?????? ????????? ?????? ?????? ??????(8)
//--------------------------------------------------------------------------------------------------
bool gt_TrTeamSelectDialogHeroSwap8_Func (bool testConds, bool runActions) {
    int player_to_swap_with;

    player_to_swap_with = gv_PlayerBayul[8];

    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true))) {
            return false;
        }
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerType(player_to_swap_with) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerStatus(player_to_swap_with) == c_playerStatusActive))) {
            return false;
        }
        if (!((EventPlayer() != player_to_swap_with))) {
            return false;
        }
        if (!((EventDialogControl() == gv_TeamSelectBtn[7]))) {
            return false;
        }
        if (!((gv_TeamSelectHeroNothing[7] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_TeamSelectHeroNothing[7] = true;
    gv_TeamSelectChangeNum[7] = EventPlayer();
    DialogControlSetEnabled(gv_TeamSelectBtn[7], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_TeamSelectBtn[4], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[5], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[6], PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogImage[13], gv_CharSelectedImage[EventPlayer()], PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogImage[13], (StringExternal("Param/Value/89BC0937") + gv_CharSelectedName[EventPlayer()] + StringExternal("Param/Value/CC2B1018")), PlayerGroupSingle(player_to_swap_with));
    libNtve_gf_SetDialogItemText(gv_TeamSelectDialogLabel[3], (StringExternal("Param/Value/D1B3B6BA") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/5D1B1372")), PlayerGroupSingle(player_to_swap_with));
    DialogControlSetVisible(gv_TeamSelectDialogImage[11], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[12], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogImage[13], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectDialogLabel[3], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[10], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetVisible(gv_TeamSelectBtn[11], PlayerGroupSingle(player_to_swap_with), true);
    DialogControlSetPositionRelative(gv_TeamSelectDialogImage[11], PlayerGroupAll(), c_anchorLeft, gv_TeamSelectDialogPlayerHeroImage[player_to_swap_with], c_anchorLeft, -75, 10);
    SoundPlay(SoundLink("UI_Bnet_PopUpPartyLeave", -1), PlayerGroupSingle(player_to_swap_with), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTeamSelectDialogHeroSwap8_Init () {
    gt_TrTeamSelectDialogHeroSwap8 = TriggerCreate("gt_TrTeamSelectDialogHeroSwap8_Func");
    TriggerAddEventDialogControl(gt_TrTeamSelectDialogHeroSwap8, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??? ?????? ????????? ?????? ?????? ??????(1???)
//--------------------------------------------------------------------------------------------------
bool gt_TrTeamSelectDialogHeroSwapSuggestOkTeam1_Func (bool testConds, bool runActions) {
    int i;

    text[2] hero_name;
    string[2] hero_image;
    int[2] hero_number;
    int player_to_swap_with;

    for (i = 0; i <= 1; i += 1) {
        hero_image[i] = "Assets\\InviButton.dds";
    }

    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true))) {
            return false;
        }
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((EventDialogControl() == gv_TeamSelectBtn[8]))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_TeamSelectBtn[8], PlayerGroupSingle(EventPlayer()), false);
    if ((EventPlayer() == gv_PlayerBayul[1])) {
        player_to_swap_with = gv_TeamSelectChangeNum[0];
        gv_TeamSelectHeroNothing[0] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[0], PlayerGroupAll(), true);
    }
    else if ((EventPlayer() == gv_PlayerBayul[2])) {
        player_to_swap_with = gv_TeamSelectChangeNum[1];
        gv_TeamSelectHeroNothing[1] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[1], PlayerGroupAll(), true);
    }
    else if ((EventPlayer() == gv_PlayerBayul[3])) {
        player_to_swap_with = gv_TeamSelectChangeNum[2];
        gv_TeamSelectHeroNothing[2] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[2], PlayerGroupAll(), true);
    }
    else if ((EventPlayer() == gv_PlayerBayul[4])) {
        player_to_swap_with = gv_TeamSelectChangeNum[3];
        gv_TeamSelectHeroNothing[3] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[3], PlayerGroupAll(), true);
    }

    hero_number[0] = gv_SelectedCharNum[EventPlayer()];
    hero_name[0] = gv_CharSelectedName[EventPlayer()];
    hero_image[0] = gv_CharSelectedImage[EventPlayer()];
    hero_number[1] = gv_SelectedCharNum[player_to_swap_with];
    hero_name[1] = gv_CharSelectedName[player_to_swap_with];
    hero_image[1] = gv_CharSelectedImage[player_to_swap_with];
    gv_SelectedCharNum[EventPlayer()] = hero_number[1];
    gv_CharSelectedName[EventPlayer()] = hero_name[1];
    gv_CharSelectedImage[EventPlayer()] = hero_image[1];
    gv_SelectedCharNum[player_to_swap_with] = hero_number[0];
    gv_CharSelectedName[player_to_swap_with] = hero_name[0];
    gv_CharSelectedImage[player_to_swap_with] = hero_image[0];

    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerHeroImage[player_to_swap_with], hero_image[0], PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerHeroImage[player_to_swap_with], hero_name[0], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], hero_image[1], PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], hero_name[1], PlayerGroupAll());
    DialogControlSetVisible(gv_TeamSelectDialogImage[8], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectDialogImage[9], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectDialogImage[10], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectDialogLabel[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[8], PlayerGroupSingle(EventPlayerPropertyChangeInt()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[9], PlayerGroupSingle(EventPlayerPropertyChangeInt()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[8], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[9], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_TeamSelectBtn[8], PlayerGroupSingle(EventPlayer()), true);
    Wait(1.0, c_timeReal);

    if ((EventPlayer() != gv_PlayerBayul[1]) && (PlayerStatus(gv_PlayerBayul[1]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[0], PlayerGroupSingle(EventPlayer()), true);
    }
    if ((EventPlayer() != gv_PlayerBayul[2]) && (PlayerStatus(gv_PlayerBayul[2]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[1], PlayerGroupSingle(EventPlayer()), true);
    }
    if ((EventPlayer() != gv_PlayerBayul[3]) && (PlayerStatus(gv_PlayerBayul[3]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[2], PlayerGroupSingle(EventPlayer()), true);
    }
    if ((EventPlayer() != gv_PlayerBayul[4]) && (PlayerStatus(gv_PlayerBayul[4]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[3], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((player_to_swap_with != gv_PlayerBayul[1]) && (PlayerStatus(gv_PlayerBayul[1]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[0], PlayerGroupSingle(player_to_swap_with), true);
    }
    if ((player_to_swap_with != gv_PlayerBayul[2]) && (PlayerStatus(gv_PlayerBayul[2]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[1], PlayerGroupSingle(player_to_swap_with), true);
    }
    if ((player_to_swap_with != gv_PlayerBayul[3]) && (PlayerStatus(gv_PlayerBayul[3]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[2], PlayerGroupSingle(player_to_swap_with), true);
    }
    if ((player_to_swap_with != gv_PlayerBayul[4]) && (PlayerStatus(gv_PlayerBayul[4]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[3], PlayerGroupSingle(player_to_swap_with), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTeamSelectDialogHeroSwapSuggestOkTeam1_Init () {
    gt_TrTeamSelectDialogHeroSwapSuggestOkTeam1 = TriggerCreate("gt_TrTeamSelectDialogHeroSwapSuggestOkTeam1_Func");
    TriggerAddEventDialogControl(gt_TrTeamSelectDialogHeroSwapSuggestOkTeam1, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??? ?????? ????????? ?????? ?????? ??????(1???)
//--------------------------------------------------------------------------------------------------
bool gt_TrTeamSelectDialogHeroSwapSuggestNoTeam1_Func (bool testConds, bool runActions) {
    int player_to_swap_with;

    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true))) {
            return false;
        }
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((EventDialogControl() == gv_TeamSelectBtn[9]))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_TeamSelectBtn[9], PlayerGroupSingle(EventPlayer()), false);
    if ((EventPlayer() == gv_PlayerBayul[1])) {
        player_to_swap_with = gv_TeamSelectChangeNum[0];
        gv_TeamSelectHeroNothing[0] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[0], PlayerGroupAll(), true);
    }
    else if ((EventPlayer() == gv_PlayerBayul[2])) {
        player_to_swap_with = gv_TeamSelectChangeNum[1];
        gv_TeamSelectHeroNothing[1] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[1], PlayerGroupAll(), true);
    }
    else if ((EventPlayer() == gv_PlayerBayul[3])) {
        player_to_swap_with = gv_TeamSelectChangeNum[2];
        gv_TeamSelectHeroNothing[2] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[2], PlayerGroupAll(), true);
    }
    else if ((EventPlayer() == gv_PlayerBayul[4])) {
        player_to_swap_with = gv_TeamSelectChangeNum[3];
        gv_TeamSelectHeroNothing[3] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[3], PlayerGroupAll(), true);
    }

    DialogControlSetVisible(gv_TeamSelectDialogImage[8], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectDialogImage[9], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectDialogImage[10], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectDialogLabel[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[8], PlayerGroupSingle(EventPlayerPropertyChangeInt()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[9], PlayerGroupSingle(EventPlayerPropertyChangeInt()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[8], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[9], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_TeamSelectBtn[9], PlayerGroupSingle(EventPlayer()), true);
    Wait(1.0, c_timeReal);

    if ((EventPlayer() != gv_PlayerBayul[1]) && (PlayerStatus(gv_PlayerBayul[1]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[0], PlayerGroupSingle(EventPlayer()), true);
    }
    if ((EventPlayer() != gv_PlayerBayul[2]) && (PlayerStatus(gv_PlayerBayul[2]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[1], PlayerGroupSingle(EventPlayer()), true);
    }
    if ((EventPlayer() != gv_PlayerBayul[3]) && (PlayerStatus(gv_PlayerBayul[3]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[2], PlayerGroupSingle(EventPlayer()), true);
    }
    if ((EventPlayer() != gv_PlayerBayul[4]) && (PlayerStatus(gv_PlayerBayul[4]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[3], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((player_to_swap_with != gv_PlayerBayul[1]) && (PlayerStatus(gv_PlayerBayul[1]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[0], PlayerGroupSingle(player_to_swap_with), true);
    }
    if ((player_to_swap_with != gv_PlayerBayul[2]) && (PlayerStatus(gv_PlayerBayul[2]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[1], PlayerGroupSingle(player_to_swap_with), true);
    }
    if ((player_to_swap_with != gv_PlayerBayul[3]) && (PlayerStatus(gv_PlayerBayul[3]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[2], PlayerGroupSingle(player_to_swap_with), true);
    }
    if ((player_to_swap_with != gv_PlayerBayul[4]) && (PlayerStatus(gv_PlayerBayul[4]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[3], PlayerGroupSingle(player_to_swap_with), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTeamSelectDialogHeroSwapSuggestNoTeam1_Init () {
    gt_TrTeamSelectDialogHeroSwapSuggestNoTeam1 = TriggerCreate("gt_TrTeamSelectDialogHeroSwapSuggestNoTeam1_Func");
    TriggerAddEventDialogControl(gt_TrTeamSelectDialogHeroSwapSuggestNoTeam1, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??? ?????? ????????? ?????? ?????? ??????(2???)
//--------------------------------------------------------------------------------------------------
bool gt_TrTeamSelectDialogHeroSwapSuggestOkTeam2_Func (bool testConds, bool runActions) {
    int i;

    text[2] hero_name;
    string[2] hero_image;
    int[2] hero_number;
    int player_to_swap_with;

    for (i = 0; i <= 1; i += 1) {
        hero_image[i] = "Assets\\InviButton.dds";
    }

    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true))) {
            return false;
        }
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((EventDialogControl() == gv_TeamSelectBtn[10]))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_TeamSelectBtn[10], PlayerGroupSingle(EventPlayer()), false);
    if ((EventPlayer() == gv_PlayerBayul[5])) {
        player_to_swap_with = gv_TeamSelectChangeNum[4];
        gv_TeamSelectHeroNothing[4] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[4], PlayerGroupAll(), true);
    }
    else if ((EventPlayer() == gv_PlayerBayul[6])) {
        player_to_swap_with = gv_TeamSelectChangeNum[5];
        gv_TeamSelectHeroNothing[5] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[5], PlayerGroupAll(), true);
    }
    else if ((EventPlayer() == gv_PlayerBayul[7])) {
        player_to_swap_with = gv_TeamSelectChangeNum[6];
        gv_TeamSelectHeroNothing[6] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[6], PlayerGroupAll(), true);
    }
    else if ((EventPlayer() == gv_PlayerBayul[8])) {
        player_to_swap_with = gv_TeamSelectChangeNum[7];
        gv_TeamSelectHeroNothing[7] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[7], PlayerGroupAll(), true);
    }

    hero_number[0] = gv_SelectedCharNum[EventPlayer()];
    hero_name[0] = gv_CharSelectedName[EventPlayer()];
    hero_image[0] = gv_CharSelectedImage[EventPlayer()];
    hero_number[1] = gv_SelectedCharNum[player_to_swap_with];
    hero_name[1] = gv_CharSelectedName[player_to_swap_with];
    hero_image[1] = gv_CharSelectedImage[player_to_swap_with];
    gv_SelectedCharNum[EventPlayer()] = hero_number[1];
    gv_CharSelectedName[EventPlayer()] = hero_name[1];
    gv_CharSelectedImage[EventPlayer()] = hero_image[1];
    gv_SelectedCharNum[player_to_swap_with] = hero_number[0];
    gv_CharSelectedName[player_to_swap_with] = hero_name[0];
    gv_CharSelectedImage[player_to_swap_with] = hero_image[0];

    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerHeroImage[player_to_swap_with], hero_image[0], PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerHeroImage[player_to_swap_with], hero_name[0], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], hero_image[1], PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], hero_name[1], PlayerGroupAll());
    DialogControlSetVisible(gv_TeamSelectDialogImage[11], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectDialogImage[12], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectDialogImage[13], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectDialogLabel[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[10], PlayerGroupSingle(EventPlayerPropertyChangeInt()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[11], PlayerGroupSingle(EventPlayerPropertyChangeInt()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[10], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[11], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_TeamSelectBtn[10], PlayerGroupSingle(EventPlayer()), true);
    Wait(1.0, c_timeReal);

    if ((EventPlayer() != gv_PlayerBayul[5]) && (PlayerStatus(gv_PlayerBayul[5]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[4], PlayerGroupSingle(EventPlayer()), true);
    }
    if ((EventPlayer() != gv_PlayerBayul[6]) && (PlayerStatus(gv_PlayerBayul[6]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[5], PlayerGroupSingle(EventPlayer()), true);
    }
    if ((EventPlayer() != gv_PlayerBayul[7]) && (PlayerStatus(gv_PlayerBayul[7]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[6], PlayerGroupSingle(EventPlayer()), true);
    }
    if ((EventPlayer() != gv_PlayerBayul[8]) && (PlayerStatus(gv_PlayerBayul[8]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[7], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((player_to_swap_with != gv_PlayerBayul[5]) && (PlayerStatus(gv_PlayerBayul[5]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[4], PlayerGroupSingle(player_to_swap_with), true);
    }
    if ((player_to_swap_with != gv_PlayerBayul[6]) && (PlayerStatus(gv_PlayerBayul[6]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[5], PlayerGroupSingle(player_to_swap_with), true);
    }
    if ((player_to_swap_with != gv_PlayerBayul[7]) && (PlayerStatus(gv_PlayerBayul[7]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[6], PlayerGroupSingle(player_to_swap_with), true);
    }
    if ((player_to_swap_with != gv_PlayerBayul[8]) && (PlayerStatus(gv_PlayerBayul[8]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[7], PlayerGroupSingle(player_to_swap_with), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTeamSelectDialogHeroSwapSuggestOkTeam2_Init () {
    gt_TrTeamSelectDialogHeroSwapSuggestOkTeam2 = TriggerCreate("gt_TrTeamSelectDialogHeroSwapSuggestOkTeam2_Func");
    TriggerAddEventDialogControl(gt_TrTeamSelectDialogHeroSwapSuggestOkTeam2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??? ?????? ????????? ?????? ?????? ??????(2???)
//--------------------------------------------------------------------------------------------------
bool gt_TrTeamSelectDialogHeroSwapSuggestNoTeam2_Func (bool testConds, bool runActions) {
    int player_to_swap_with;

    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true))) {
            return false;
        }
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((EventDialogControl() == gv_TeamSelectBtn[11]))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_TeamSelectBtn[11], PlayerGroupSingle(EventPlayer()), false);
    if ((EventPlayer() == gv_PlayerBayul[5])) {
        player_to_swap_with = gv_TeamSelectChangeNum[4];
        gv_TeamSelectHeroNothing[4] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[4], PlayerGroupAll(), true);
    }
    else if ((EventPlayer() == gv_PlayerBayul[6])) {
        player_to_swap_with = gv_TeamSelectChangeNum[5];
        gv_TeamSelectHeroNothing[5] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[5], PlayerGroupAll(), true);
    }
    else if ((EventPlayer() == gv_PlayerBayul[7])) {
        player_to_swap_with = gv_TeamSelectChangeNum[6];
        gv_TeamSelectHeroNothing[6] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[6], PlayerGroupAll(), true);
    }
    else if ((EventPlayer() == gv_PlayerBayul[8])) {
        player_to_swap_with = gv_TeamSelectChangeNum[7];
        gv_TeamSelectHeroNothing[7] = false;
        DialogControlSetEnabled(gv_TeamSelectBtn[7], PlayerGroupAll(), true);
    }

    DialogControlSetVisible(gv_TeamSelectDialogImage[11], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectDialogImage[12], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectDialogImage[13], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectDialogLabel[3], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[10], PlayerGroupSingle(EventPlayerPropertyChangeInt()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[11], PlayerGroupSingle(EventPlayerPropertyChangeInt()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[10], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_TeamSelectBtn[11], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_TeamSelectBtn[11], PlayerGroupSingle(EventPlayer()), true);
    Wait(1.0, c_timeReal);

    if ((EventPlayer() != gv_PlayerBayul[5]) && (PlayerStatus(gv_PlayerBayul[5]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[4], PlayerGroupSingle(EventPlayer()), true);
    }
    if ((EventPlayer() != gv_PlayerBayul[6]) && (PlayerStatus(gv_PlayerBayul[6]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[5], PlayerGroupSingle(EventPlayer()), true);
    }
    if ((EventPlayer() != gv_PlayerBayul[7]) && (PlayerStatus(gv_PlayerBayul[7]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[6], PlayerGroupSingle(EventPlayer()), true);
    }
    if ((EventPlayer() != gv_PlayerBayul[8]) && (PlayerStatus(gv_PlayerBayul[8]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[7], PlayerGroupSingle(EventPlayer()), true);
    }

    if ((player_to_swap_with != gv_PlayerBayul[5]) && (PlayerStatus(gv_PlayerBayul[5]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[4], PlayerGroupSingle(player_to_swap_with), true);
    }
    if ((player_to_swap_with != gv_PlayerBayul[6]) && (PlayerStatus(gv_PlayerBayul[6]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[5], PlayerGroupSingle(player_to_swap_with), true);
    }
    if ((player_to_swap_with != gv_PlayerBayul[7]) && (PlayerStatus(gv_PlayerBayul[7]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[6], PlayerGroupSingle(player_to_swap_with), true);
    }
    if ((player_to_swap_with != gv_PlayerBayul[8]) && (PlayerStatus(gv_PlayerBayul[8]) == c_playerStatusActive)) {
        DialogControlSetVisible(gv_TeamSelectBtn[7], PlayerGroupSingle(player_to_swap_with), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTeamSelectDialogHeroSwapSuggestNoTeam2_Init () {
    gt_TrTeamSelectDialogHeroSwapSuggestNoTeam2 = TriggerCreate("gt_TrTeamSelectDialogHeroSwapSuggestNoTeam2_Func");
    TriggerAddEventDialogControl(gt_TrTeamSelectDialogHeroSwapSuggestNoTeam2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??????(1)
//--------------------------------------------------------------------------------------------------
bool gt_TrSpellSelect1_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == false))) {
            return false;
        }
        if (!((((EventDialogControl() == gv_CharChooseWindowSpellBtn[0]) && (gv_SelectedSpellNum2[EventPlayer()] != 1)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[1]) && (gv_SelectedSpellNum2[EventPlayer()] != 2)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[2]) && (gv_SelectedSpellNum2[EventPlayer()] != 3)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[3]) && (gv_SelectedSpellNum2[EventPlayer()] != 4)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[4]) && (gv_SelectedSpellNum2[EventPlayer()] != 5)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[5]) && (gv_SelectedSpellNum2[EventPlayer()] != 6)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[6]) && (gv_SelectedSpellNum2[EventPlayer()] != 7)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[7]) && (gv_SelectedSpellNum2[EventPlayer()] != 8)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[8]) && (gv_SelectedSpellNum2[EventPlayer()] != 9)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[9]) && (gv_SelectedSpellNum2[EventPlayer()] != 10)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[10]) && (gv_SelectedSpellNum2[EventPlayer()] != 11)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[11]) && (gv_SelectedSpellNum2[EventPlayer()] != 12))))) {
            return false;
        }
        if (!((gv_SpellToggle[EventPlayer()] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[0])) {
        gv_SelectedSpellImage1[EventPlayer()] = "Assets\\Textures\\btn-research-zerg-cellularreactor.dds";
        gv_SpellToolTip[EventPlayer()][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[0], EventPlayer());
        gv_SelectedSpellNum1[EventPlayer()] = 1;
        gv_SelectedSpellName1[EventPlayer()] = StringExternal("Param/Value/86AF1DCD");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[1])) {
        gv_SelectedSpellImage1[EventPlayer()] = "Assets\\Textures\\btn-tips-hacking.dds";
        gv_SpellToolTip[EventPlayer()][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[1], EventPlayer());
        gv_SelectedSpellNum1[EventPlayer()] = 2;
        gv_SelectedSpellName1[EventPlayer()] = StringExternal("Param/Value/8C41615D");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[2])) {
        gv_SelectedSpellImage1[EventPlayer()] = "Assets\\Textures\\btn-ability-terran-heal-color.dds";
        gv_SpellToolTip[EventPlayer()][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[2], EventPlayer());
        gv_SelectedSpellNum1[EventPlayer()] = 3;
        gv_SelectedSpellName1[EventPlayer()] = StringExternal("Param/Value/A22A0F40");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[3])) {
        gv_SelectedSpellImage1[EventPlayer()] = "Assets\\Textures\\btn-tips-hyperion.dds";
        gv_SpellToolTip[EventPlayer()][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[3], EventPlayer());
        gv_SelectedSpellNum1[EventPlayer()] = 4;
        gv_SelectedSpellName1[EventPlayer()] = StringExternal("Param/Value/E3D54A13");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[4])) {
        gv_SelectedSpellImage1[EventPlayer()] = "Assets\\Textures\\btn-tips-fallenheroes.dds";
        gv_SpellToolTip[EventPlayer()][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[4], EventPlayer());
        gv_SelectedSpellNum1[EventPlayer()] = 5;
        gv_SelectedSpellName1[EventPlayer()] = StringExternal("Param/Value/016587D9");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[5])) {
        gv_SelectedSpellImage1[EventPlayer()] = "Assets\\AddIcon\\btn-custom-protoss-rapiddeployment.dds";
        gv_SpellToolTip[EventPlayer()][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[5], EventPlayer());
        gv_SelectedSpellNum1[EventPlayer()] = 6;
        gv_SelectedSpellName1[EventPlayer()] = StringExternal("Param/Value/F33C1DD0");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[6])) {
        gv_SelectedSpellImage1[EventPlayer()] = "Assets\\Textures\\btn-ability-protoss-shieldcapacitor.dds";
        gv_SpellToolTip[EventPlayer()][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[6], EventPlayer());
        gv_SelectedSpellNum1[EventPlayer()] = 7;
        gv_SelectedSpellName1[EventPlayer()] = StringExternal("Param/Value/1E210721");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[7])) {
        gv_SelectedSpellImage1[EventPlayer()] = "Assets\\Textures\\btn-tips-biosample.dds";
        gv_SpellToolTip[EventPlayer()][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[7], EventPlayer());
        gv_SelectedSpellNum1[EventPlayer()] = 8;
        gv_SelectedSpellName1[EventPlayer()] = StringExternal("Param/Value/5AB58A98");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[8])) {
        gv_SelectedSpellImage1[EventPlayer()] = "Assets\\Textures\\btn-tips-challengecounter.dds";
        gv_SpellToolTip[EventPlayer()][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[8], EventPlayer());
        gv_SelectedSpellNum1[EventPlayer()] = 9;
        gv_SelectedSpellName1[EventPlayer()] = StringExternal("Param/Value/1C50A531");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[9])) {
        gv_SelectedSpellImage1[EventPlayer()] = "Assets\\Textures\\btn-tips-walloffire.dds";
        gv_SpellToolTip[EventPlayer()][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[9], EventPlayer());
        gv_SelectedSpellNum1[EventPlayer()] = 10;
        gv_SelectedSpellName1[EventPlayer()] = StringExternal("Param/Value/23379E13");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[10])) {
        gv_SelectedSpellImage1[EventPlayer()] = "Assets\\Textures\\btn-tips-defierbones.dds";
        gv_SpellToolTip[EventPlayer()][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[10], EventPlayer());
        gv_SelectedSpellNum1[EventPlayer()] = 11;
        gv_SelectedSpellName1[EventPlayer()] = StringExternal("Param/Value/52B81D08");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[11])) {
        gv_SelectedSpellImage1[EventPlayer()] = "Assets\\Textures\\btn-tips-visitthelab.dds";
        gv_SpellToolTip[EventPlayer()][0] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[11], EventPlayer());
        gv_SelectedSpellNum1[EventPlayer()] = 12;
        gv_SelectedSpellName1[EventPlayer()] = StringExternal("Param/Value/2EA9BFAB");
    }

    Wait(0.075, c_timeReal);
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
        libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerSpellImage1[EventPlayer()], gv_SelectedSpellImage1[EventPlayer()], GameAttributePlayersForTeam(1));
        libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerSpellImage1[EventPlayer()], gv_SpellToolTip[EventPlayer()][0], GameAttributePlayersForTeam(1));
    }
    else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true)) {
        libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerSpellImage1[EventPlayer()], gv_SelectedSpellImage1[EventPlayer()], GameAttributePlayersForTeam(2));
        libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerSpellImage1[EventPlayer()], gv_SpellToolTip[EventPlayer()][0], GameAttributePlayersForTeam(2));
    }
    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerSpellImage1[EventPlayer()], gv_SelectedSpellImage1[EventPlayer()], GameAttributePlayersForTeam(3));
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerSpellImage1[EventPlayer()], gv_SpellToolTip[EventPlayer()][0], GameAttributePlayersForTeam(3));
    gv_SpellToggle[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSpellSelect1_Init () {
    gt_TrSpellSelect1 = TriggerCreate("gt_TrSpellSelect1_Func");
    TriggerAddEventDialogControl(gt_TrSpellSelect1, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??????(2)
//--------------------------------------------------------------------------------------------------
bool gt_TrSpellSelect2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == false))) {
            return false;
        }

        if (!((((EventDialogControl() == gv_CharChooseWindowSpellBtn[0]) && (gv_SelectedSpellNum1[EventPlayer()] != 1)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[1]) && (gv_SelectedSpellNum1[EventPlayer()] != 2)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[2]) && (gv_SelectedSpellNum1[EventPlayer()] != 3)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[3]) && (gv_SelectedSpellNum1[EventPlayer()] != 4)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[4]) && (gv_SelectedSpellNum1[EventPlayer()] != 5)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[5]) && (gv_SelectedSpellNum1[EventPlayer()] != 6)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[6]) && (gv_SelectedSpellNum1[EventPlayer()] != 7)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[7]) && (gv_SelectedSpellNum1[EventPlayer()] != 8)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[8]) && (gv_SelectedSpellNum1[EventPlayer()] != 9)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[9]) && (gv_SelectedSpellNum1[EventPlayer()] != 10)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[10]) && (gv_SelectedSpellNum1[EventPlayer()] != 11)) || ((EventDialogControl() == gv_CharChooseWindowSpellBtn[11]) && (gv_SelectedSpellNum1[EventPlayer()] != 12))))) {
            return false;
        }

        if (!((gv_SpellToggle[EventPlayer()] == true))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[0])) {
        gv_SelectedSpellImage2[EventPlayer()] = "Assets\\Textures\\btn-research-zerg-cellularreactor.dds";
        gv_SpellToolTip[EventPlayer()][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[0], EventPlayer());
        gv_SelectedSpellNum2[EventPlayer()] = 1;
        gv_SelectedSpellName2[EventPlayer()] = StringExternal("Param/Value/A16DEE18");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[1])) {
        gv_SelectedSpellImage2[EventPlayer()] = "Assets\\Textures\\btn-tips-hacking.dds";
        gv_SpellToolTip[EventPlayer()][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[1], EventPlayer());
        gv_SelectedSpellNum2[EventPlayer()] = 2;
        gv_SelectedSpellName2[EventPlayer()] = StringExternal("Param/Value/00479CBF");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[2])) {
        gv_SelectedSpellImage2[EventPlayer()] = "Assets\\Textures\\btn-ability-terran-heal-color.dds";
        gv_SpellToolTip[EventPlayer()][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[2], EventPlayer());
        gv_SelectedSpellNum2[EventPlayer()] = 3;
        gv_SelectedSpellName2[EventPlayer()] = StringExternal("Param/Value/667A0310");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[3])) {
        gv_SelectedSpellImage2[EventPlayer()] = "Assets\\Textures\\btn-tips-hyperion.dds";
        gv_SpellToolTip[EventPlayer()][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[3], EventPlayer());
        gv_SelectedSpellNum2[EventPlayer()] = 4;
        gv_SelectedSpellName2[EventPlayer()] = StringExternal("Param/Value/991DEE71");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[4])) {
        gv_SelectedSpellImage2[EventPlayer()] = "Assets\\Textures\\btn-tips-fallenheroes.dds";
        gv_SpellToolTip[EventPlayer()][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[4], EventPlayer());
        gv_SelectedSpellNum2[EventPlayer()] = 5;
        gv_SelectedSpellName2[EventPlayer()] = StringExternal("Param/Value/98053E15");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[5])) {
        gv_SelectedSpellImage2[EventPlayer()] = "Assets\\AddIcon\\btn-custom-protoss-rapiddeployment.dds";
        gv_SpellToolTip[EventPlayer()][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[5], EventPlayer());
        gv_SelectedSpellNum2[EventPlayer()] = 6;
        gv_SelectedSpellName2[EventPlayer()] = StringExternal("Param/Value/22B04456");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[6])) {
        gv_SelectedSpellImage2[EventPlayer()] = "Assets\\Textures\\btn-ability-protoss-shieldcapacitor.dds";
        gv_SpellToolTip[EventPlayer()][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[6], EventPlayer());
        gv_SelectedSpellNum2[EventPlayer()] = 7;
        gv_SelectedSpellName2[EventPlayer()] = StringExternal("Param/Value/1953A138");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[7])) {
        gv_SelectedSpellImage2[EventPlayer()] = "Assets\\Textures\\btn-tips-biosample.dds";
        gv_SpellToolTip[EventPlayer()][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[7], EventPlayer());
        gv_SelectedSpellNum2[EventPlayer()] = 8;
        gv_SelectedSpellName2[EventPlayer()] = StringExternal("Param/Value/5494412A");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[8])) {
        gv_SelectedSpellImage2[EventPlayer()] = "Assets\\Textures\\btn-tips-challengecounter.dds";
        gv_SpellToolTip[EventPlayer()][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[8], EventPlayer());
        gv_SelectedSpellNum2[EventPlayer()] = 9;
        gv_SelectedSpellName2[EventPlayer()] = StringExternal("Param/Value/E67D0CF7");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[9])) {
        gv_SelectedSpellImage2[EventPlayer()] = "Assets\\Textures\\btn-tips-walloffire.dds";
        gv_SpellToolTip[EventPlayer()][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[9], EventPlayer());
        gv_SelectedSpellNum2[EventPlayer()] = 10;
        gv_SelectedSpellName2[EventPlayer()] = StringExternal("Param/Value/368F1D30");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[10])) {
        gv_SelectedSpellImage2[EventPlayer()] = "Assets\\Textures\\btn-tips-defierbones.dds";
        gv_SpellToolTip[EventPlayer()][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[10], EventPlayer());
        gv_SelectedSpellNum2[EventPlayer()] = 11;
        gv_SelectedSpellName2[EventPlayer()] = StringExternal("Param/Value/2DEEBAF2");
    }
    else if ((EventDialogControl() == gv_CharChooseWindowSpellBtn[11])) {
        gv_SelectedSpellImage2[EventPlayer()] = "Assets\\Textures\\btn-tips-visitthelab.dds";
        gv_SpellToolTip[EventPlayer()][1] = libNtve_gf_DialogItemTooltip(gv_CharChooseWindowSpellBtn[11], EventPlayer());
        gv_SelectedSpellNum2[EventPlayer()] = 12;
        gv_SelectedSpellName2[EventPlayer()] = StringExternal("Param/Value/A6003211");
    }

    Wait(0.075, c_timeReal);
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
        libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerSpellImage2[EventPlayer()], gv_SelectedSpellImage2[EventPlayer()], GameAttributePlayersForTeam(1));
        libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerSpellImage2[EventPlayer()], gv_SpellToolTip[EventPlayer()][1], GameAttributePlayersForTeam(1));
    }
    else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true)) {
        libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerSpellImage2[EventPlayer()], gv_SelectedSpellImage2[EventPlayer()], GameAttributePlayersForTeam(2));
        libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerSpellImage2[EventPlayer()], gv_SpellToolTip[EventPlayer()][1], GameAttributePlayersForTeam(2));
    }
    libNtve_gf_SetDialogItemImage(gv_TeamSelectDialogPlayerSpellImage2[EventPlayer()], gv_SelectedSpellImage2[EventPlayer()], GameAttributePlayersForTeam(3));
    libNtve_gf_SetDialogItemTooltip(gv_TeamSelectDialogPlayerSpellImage2[EventPlayer()], gv_SpellToolTip[EventPlayer()][1], GameAttributePlayersForTeam(3));
    gv_SpellToggle[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSpellSelect2_Init () {
    gt_TrSpellSelect2 = TriggerCreate("gt_TrSpellSelect2_Func");
    TriggerAddEventDialogControl(gt_TrSpellSelect2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ??????(?????? ??????)
//--------------------------------------------------------------------------------------------------
bool gt_TrGameModeSelect_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == false))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_GameModeBtn[0]) || (EventDialogControl() == gv_GameModeBtn[1])))) {
            return false;
        }

        if (!((gv_StatusWindowAddDelay[EventPlayer()] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_StatusWindowAddDelay[EventPlayer()] = true;
    DialogControlSetEnabled(gv_GameModeBtn[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_GameModeBtn[1], PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_GameModeBtn[0])) {
        gv_GameModeVoteInt[0] += 1;
        gv_ReadyBoolean -= 1;
        libNtve_gf_SetDialogItemText(gv_GameModeLabel[0], (StringExternal("Param/Value/54434504") + TextWithColor(IntToText(gv_GameModeVoteInt[0]), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/25B9ED84")), PlayerGroupAll());
    }
    else if ((EventDialogControl() == gv_GameModeBtn[1])) {
        gv_GameModeVoteInt[1] += 1;
        gv_ReadyBoolean -= 1;
        libNtve_gf_SetDialogItemText(gv_GameModeLabel[1], (StringExternal("Param/Value/7D9F09B9") + TextWithColor(IntToText(gv_GameModeVoteInt[1]), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/68E29F11")), PlayerGroupAll());
    }

    Wait(0.5, c_timeReal);
    gv_StatusWindowAddDelay[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrGameModeSelect_Init () {
    gt_TrGameModeSelect = TriggerCreate("gt_TrGameModeSelect_Func");
    TriggerAddEventDialogControl(gt_TrGameModeSelect, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ??????(?????? ??????)
//--------------------------------------------------------------------------------------------------
bool gt_TrReadyOkSelect_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == false))) {
            return false;
        }

        if (!((EventDialogControl() == gv_CharChooseDialogReadyBtn))) {
            return false;
        }

        if (!((gv_ReadyClickBoolean[EventPlayer()] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((((gv_SelectedCharNum[EventPlayer()] > 0) && (gv_SelectedSpellNum1[EventPlayer()] > 0) && (gv_SelectedSpellNum2[EventPlayer()] > 0)) || (gv_CharRandomBoolean[EventPlayer()] == true))) {
        DialogControlSetEnabled(gv_CharChooseDialogReadyBtn, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemText(gv_TeamSelectDialogPlayerName[EventPlayer()], (StringExternal("Param/Value/A276AAB5") + PlayerName(EventPlayer()) + StringExternal("Param/Value/42884527")), PlayerGroupAll());
        gv_ReadyBoolean -= 1;
        if ((gv_CharRandomBoolean[EventPlayer()] == false)) {
            gv_ReadyClickBoolean[EventPlayer()] = true;
        }
        else {
            gv_ReadyRandomBoolean[EventPlayer()] = true;
        }
    }
    else {
        SoundPlay(SoundLink("UI_GenericError", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrReadyOkSelect_Init () {
    gt_TrReadyOkSelect = TriggerCreate("gt_TrReadyOkSelect_Func");
    TriggerAddEventDialogControl(gt_TrReadyOkSelect, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ??? ?????? ????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrBeforeSpellRandomSelect_Func (bool testConds, bool runActions) {
    int i;

    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    for (i = 1; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 0) && (gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 0)) {
                gv_SelectedSpellNum1[gv_PlayerBayul[i]] = 10;
                gv_SelectedSpellImage1[gv_PlayerBayul[i]] = "Assets\\Textures\\btn-tips-walloffire.dds";
                gv_SelectedSpellNum2[gv_PlayerBayul[i]] = 9;
                gv_SelectedSpellImage2[gv_PlayerBayul[i]] = "Assets\\Textures\\btn-tips-challengecounter.dds";
            }
            else if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] != 0) && (gv_SelectedSpellNum2[gv_PlayerBayul[i]] == 0)) {
                if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] != 9)) {
                    gv_SelectedSpellNum2[gv_PlayerBayul[i]] = 9;
                    gv_SelectedSpellImage2[gv_PlayerBayul[i]] = "Assets\\Textures\\btn-tips-challengecounter.dds";
                }
                else if ((gv_SelectedSpellNum1[gv_PlayerBayul[i]] == 9)) {
                    gv_SelectedSpellNum2[gv_PlayerBayul[i]] = 10;
                    gv_SelectedSpellImage2[gv_PlayerBayul[i]] = "Assets\\Textures\\btn-tips-walloffire.dds";
                }
            }
        }
    }
    TriggerExecute(gt_TrPlayersAllCreate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrBeforeSpellRandomSelect_Init () {
    gt_TrBeforeSpellRandomSelect = TriggerCreate("gt_TrBeforeSpellRandomSelect_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????? ?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrPlayersAllCreate_Func (bool testConds, bool runActions) {
    int i;

    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_HrCharMake();
    for (i = 1; i <= 4; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_PlayerReadyUnit[gv_PlayerBayul[i]], 0, gv_PlayerBayul[i], PointFromId(194));
            gv_PlayerHero[gv_PlayerBayul[i]] = UnitLastCreated();
            CameraPan(gv_PlayerBayul[i], PointFromId(194), 0.0, -1, 10, false);
            UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[i]], "Toherodamage", gv_PlayerHero[gv_PlayerBayul[i]], 1);
            UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[i]], "SpellDong2423", gv_PlayerHero[gv_PlayerBayul[i]], 2);
            TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp222233322232222", 2);
        }

    }
    for (i = 5; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_PlayerReadyUnit[gv_PlayerBayul[i]], 0, gv_PlayerBayul[i], PointFromId(195));
            gv_PlayerHero[gv_PlayerBayul[i]] = UnitLastCreated();
            CameraPan(gv_PlayerBayul[i], PointFromId(195), 0.0, -1, 10, false);
            UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[i]], "Toherodamage", gv_PlayerHero[gv_PlayerBayul[i]], 1);
            UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[i]], "SpellDong2423", gv_PlayerHero[gv_PlayerBayul[i]], 2);
            TechTreeUpgradeAddLevel(gv_PlayerBayul[i], "SpellUp222233322232222", 2);
        }

    }
    Wait(0.01, c_timeReal);
    gf_HrSpellMake1();
    gf_HrSpellMake2();
    if ((PlayerType(gv_PlayerBayul[1]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[1]) == c_playerStatusActive)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[1]], "Player1Assist2", gv_PlayerHero[gv_PlayerBayul[1]], 1);
        TechTreeUpgradeAddLevel(gv_PlayerBayul[1], "PortalBuy23", 1);
    }

    if ((PlayerType(gv_PlayerBayul[2]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[2]) == c_playerStatusActive)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[2]], "Player1Assist22", gv_PlayerHero[gv_PlayerBayul[2]], 1);
        TechTreeUpgradeAddLevel(gv_PlayerBayul[2], "PortalBuy232", 1);
    }

    if ((PlayerType(gv_PlayerBayul[3]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[3]) == c_playerStatusActive)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[3]], "Player1Assist222", gv_PlayerHero[gv_PlayerBayul[3]], 1);
        TechTreeUpgradeAddLevel(gv_PlayerBayul[3], "PortalBuy2322", 1);
    }

    if ((PlayerType(gv_PlayerBayul[4]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[4]) == c_playerStatusActive)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[4]], "Player1Assist2222", gv_PlayerHero[gv_PlayerBayul[4]], 1);
        TechTreeUpgradeAddLevel(gv_PlayerBayul[4], "PortalBuy23222", 1);
    }

    if ((PlayerType(gv_PlayerBayul[5]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[5]) == c_playerStatusActive)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[5]], "Player1Assist22222", gv_PlayerHero[gv_PlayerBayul[5]], 1);
        TechTreeUpgradeAddLevel(gv_PlayerBayul[5], "PortalBuy232222", 1);
    }

    if ((PlayerType(gv_PlayerBayul[6]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[6]) == c_playerStatusActive)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[6]], "Player1Assist222222", gv_PlayerHero[gv_PlayerBayul[6]], 1);
        TechTreeUpgradeAddLevel(gv_PlayerBayul[6], "PortalBuy2322222", 1);
    }

    if ((PlayerType(gv_PlayerBayul[7]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[7]) == c_playerStatusActive)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[7]], "Player1Assist2222222", gv_PlayerHero[gv_PlayerBayul[7]], 1);
        TechTreeUpgradeAddLevel(gv_PlayerBayul[7], "PortalBuy23222222", 1);
    }

    if ((PlayerType(gv_PlayerBayul[8]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[8]) == c_playerStatusActive)) {
        UnitBehaviorAdd(gv_PlayerHero[gv_PlayerBayul[8]], "Player1Assist22222222", gv_PlayerHero[gv_PlayerBayul[8]], 1);
        TechTreeUpgradeAddLevel(gv_PlayerBayul[8], "PortalBuy232222222", 1);
    }

    Wait(0.01, c_timeReal);
    TriggerEnable(gt_TrGameModeSelect, false);
    TriggerEnable(gt_TrReadyOkSelect, false);
    TriggerEnable(gt_TrCharSelect, false);
    TriggerEnable(gt_TrCharSelectPageNext, false);
    TriggerEnable(gt_TrCharSelectRandom, false);
    TriggerEnable(gt_TrDraftSelectRandomRefreash1, false);
    TriggerEnable(gt_TrSpellSelect1, false);
    TriggerEnable(gt_TrSpellSelect2, false);
    TriggerEnable(gt_TrTeamSelectDialogHeroSwapSuggestNoTeam1, false);
    TriggerEnable(gt_TrTeamSelectDialogHeroSwapSuggestNoTeam2, false);
    TriggerEnable(gt_TrTeamSelectDialogHeroSwapSuggestOkTeam1, false);
    TriggerEnable(gt_TrTeamSelectDialogHeroSwapSuggestOkTeam2, false);
    TriggerEnable(gt_TrTeamSelectDialogHeroSwap1, false);
    TriggerEnable(gt_TrTeamSelectDialogHeroSwap2, false);
    TriggerEnable(gt_TrTeamSelectDialogHeroSwap3, false);
    TriggerEnable(gt_TrTeamSelectDialogHeroSwap4, false);
    TriggerEnable(gt_TrTeamSelectDialogHeroSwap5, false);
    TriggerEnable(gt_TrTeamSelectDialogHeroSwap6, false);
    TriggerEnable(gt_TrTeamSelectDialogHeroSwap7, false);
    TriggerEnable(gt_TrTeamSelectDialogHeroSwap8, false);
    TriggerEnable(gt_TrTeamSelectDialogHeroSwap8, false);
    TriggerExecute(gt_TrRankDialogView, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrPlayersAllCreate_Init () {
    gt_TrPlayersAllCreate = TriggerCreate("gt_TrPlayersAllCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??? ????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrRankDialogView_Func (bool testConds, bool runActions) {
    int i;
    unitref reference;

    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);

    TriggerAddEventTimePeriodic(gt_HeroSelectionLockAction, 0.0625, c_timeGame);
    TriggerEnable(gt_HeroSelectionLockToggle, true);
    TriggerAddEventDialogControl(gt_HeroSelectionLockToggle, c_playerAny, gv_SelectionLockButton, c_triggerControlEventTypeClick);
    TriggerEnable(gt_RemoveObjectivesButton, true);
    TriggerAddEventDialogControl(gt_RemoveObjectivesButton, c_playerAny, gv_RemoveObjectivesButton, c_triggerControlEventTypeClick);
    TriggerEnable(gt_CenterCameraOnHero, true);
    TriggerAddEventDialogControl(gt_CenterCameraOnHero, c_playerAny, gv_CenterCameraOnHeroDummyButton, c_triggerControlEventTypeClick);
    TriggerEnable(gt_SkillPointAllocation, true);
    TriggerEnable(gt_ScoreWindowToggle, true);
    TriggerEnable(gt_ChangeShopPage, true);

    gf_HrScoreDialogMake();
    TriggerAddEventDialogControl(gt_ScoreWindowToggle, c_playerAny, gv_ScoreWindowToggleButton, c_triggerControlEventTypeClick);

    for (i = 1; i <= 8; i += 1) {
        if (PlayerType(gv_PlayerBayul[i]) != c_playerTypeUser) {
            continue;
        }
        if (PlayerStatus(gv_PlayerBayul[i]) != c_playerStatusActive) {
            continue;
        }
        gf_StatWindowUpdatePlayer(gv_PlayerBayul[i]);
    }

    Wait(1.0, c_timeReal);
    UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationImmediate);
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetDragSelectEnabled(PlayerGroupAll(), true);
    DialogSetVisible(gv_BeforeStartCounterWindow, PlayerGroupAll(), true);
    gv_GameStartBoolean = true;

    for (i = 1; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            CameraLockInput(gv_PlayerBayul[i], false);
            UnitControlGroupAddUnit(gv_PlayerBayul[i], 1, gv_PlayerHero[gv_PlayerBayul[i]]);
            UnitSelect(gv_PlayerHero[gv_PlayerBayul[i]], gv_PlayerBayul[i], true);
            DialogControlSetVisible(gv_SkillLearnWindow, PlayerGroupSingle(gv_PlayerBayul[i]), true);
        }
    }

    DialogSetVisible(gv_ScoreDialog[0], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ScoreWindowToggleButton, PlayerGroupAll(), true);
    DialogSetVisible(gv_ScoreDialog[1], PlayerGroupAll(), true);
    DialogControlSetVisible(gv_StatShopDialog, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_SelectionLockButton, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_RemoveObjectivesButton, PlayerGroupAll(), true);
    gf_HrCleanUpHeroSelectDialogs();
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/AD868381"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/7B165D99"), StringExternal("Param/Value/4F1F220A"), "Assets\\AddIcon\\btn-achievement-00-beta.dds");
    UISetGameMenuItemText(PlayerGroupAll(), c_gameMenuDialogGenericButton2, StringExternal("Param/Value/46682880"));
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton2, true);
    TriggerExecute(gt_TrGameStartCounter, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrRankDialogView_Init () {
    gt_TrRankDialogView = TriggerCreate("gt_TrRankDialogView_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ?????? ?????????
//--------------------------------------------------------------------------------------------------
bool gt_TrGameStartCounter_Func (bool testConds, bool runActions) {
    int i;
    unitref reference;

    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);

    gf_CreateObjectives();
    TriggerEnable(gt_MinionObjectiveCompleted, true);

    for (i = 0; i < 11; i += 1) {
        if (!(PlayerStatus(i) == c_playerStatusActive)) {
            continue;
        }
        if (!(PlayerType(i) == c_playerTypeUser)) {
            continue;
        }
        if (PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), i)) {
            continue;
        }
        reference = UnitRefFromUnit(gv_PlayerHero[gv_PlayerBayul[i]]);
        TriggerAddEventUnitProperty(gt_MinionObjectiveCompleted, reference, c_unitPropKills);
        TriggerAddEventUnitDamaged(gt_TrackHeroDamage, reference, c_unitDamageTypeAny, c_unitDamageEither, null);
        TriggerAddEventUnitHealed(gt_TrackHeroHealing, reference, c_unitVitalLife, null);
    }

    while ((gv_BeforeStartCounterWindowVar > 0)) {
        libNtve_gf_SetDialogItemText(gv_BeforeStartCounterWindowNum, (StringExternal("Param/Value/D44BC962") + IntToText(gv_BeforeStartCounterWindowVar) + StringExternal("Param/Value/6FE0D5C4")), PlayerGroupAll());
        gv_BeforeStartCounterWindowVar -= 1;
        Wait(1.0, c_timeReal);
    }
    libNtve_gf_SetDialogItemText(gv_BeforeStartCounterWindowNum, (StringExternal("Param/Value/C901545A") + IntToText(gv_BeforeStartCounterWindowVar) + StringExternal("Param/Value/AA9DB3E2")), PlayerGroupAll());
    Wait(1.0, c_timeReal);
    for (i = 1; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            UnitCreateEffectPoint(gv_PlayerHero[gv_PlayerBayul[i]], "gimoneyg", PointFromId(1));
        }

    }
    DialogSetVisible(gv_BeforeStartCounterWindow, PlayerGroupAll(), false);
    DialogDestroy(gv_BeforeStartCounterWindow);
    gv_BeforeStartCounterWindow = c_invalidDialogId;
    gv_BeforeStartCounterWindowNum = c_invalidDialogControlId;
    gv_BeforeStartCounterWindowVar = 0;
    Wait(0.1, c_timeReal);
    SoundPlay(SoundLink("SystemSound34", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/B12693EF") + TextWithColor(StringExternal("Param/Value/E880ACD8"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/CCA24A39")));
    Wait(0.2, c_timeReal);
    PlayerCreateEffectPoint(11, "MonsterMakeTimerFirstG", PointFromId(1));
    PlayerCreateEffectPoint(11, "MonsterMakeTimerFirstG2", PointFromId(1));
    PlayerCreateEffectPoint(11, "MonsterMakeTimerFirstG22", PointFromId(1));
    PlayerCreateEffectPoint(11, "MonsterMakeTimerFirstG222", PointFromId(1));
    PlayerCreateEffectPoint(11, "MonsterMakeTimerFirstG2222", PointFromId(1));
    PlayerCreateEffectPoint(11, "MonsterMakeTimerD", PointFromId(1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrGameStartCounter_Init () {
    gt_TrGameStartCounter = TriggerCreate("gt_TrGameStartCounter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_CenterCameraOnHero_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == false))) {
            return false;
        }
        if (!((gv_GameStartBoolean == true))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    CameraPan(EventPlayer(), UnitGetPosition(gv_PlayerHero[EventPlayer()]), 0.0, -1, 10.0, false);
    if ((gv_HeroDeathBoolean[EventPlayer()] == false)) {
        UnitClearSelection(EventPlayer());
        UnitSelect(gv_PlayerHero[EventPlayer()], EventPlayer(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CenterCameraOnHero_Init () {
    gt_CenterCameraOnHero = TriggerCreate("gt_CenterCameraOnHero_Func");
    TriggerEnable(gt_CenterCameraOnHero, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ?????? ??????(??????)
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelectionLockToggle_Func (bool testConds, bool runActions) {
    bool any_lock = false;
    if (testConds) {
        if (PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer())) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((gv_HeroSelectionLockEnabled[EventPlayer()] == false)) {
        // PlayerOptionOverride(EventPlayer(), "selectuncontrolable", "0");
        gv_HeroSelectionLockEnabled[EventPlayer()] = true;
        if ((gv_GameStartBoolean == true) && (gv_HeroDeathBoolean[EventPlayer()] == false)) {
            CameraPan(EventPlayer(), UnitGetPosition(gv_PlayerHero[EventPlayer()]), 0.0, -1, 10.0, false);
            UnitClearSelection(EventPlayer());
            UnitSelect(gv_PlayerHero[EventPlayer()], EventPlayer(), true);
        }

        UIClearMessages(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/C5D49D43"));
    }
    else if ((gv_HeroSelectionLockEnabled[EventPlayer()] == true)) {
        // PlayerOptionOverride(EventPlayer(), "selectuncontrolable", "1");
        gv_HeroSelectionLockEnabled[EventPlayer()] = false;
        UIClearMessages(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/97F72AA9"));
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
        if (!(PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
            continue;
        }
        if (PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), PlayerGroupLoopCurrent())) {
            continue;
        }
        if (gv_HeroSelectionLockEnabled[PlayerGroupLoopCurrent()]) {
            any_lock = true;
            break;
        }
    }
    PlayerGroupLoopEnd();

    if (any_lock) {
        TriggerEnable(gt_HeroSelectionLockAction, true);
    } else {
        TriggerEnable(gt_HeroSelectionLockAction, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelectionLockToggle_Init () {
    gt_HeroSelectionLockToggle = TriggerCreate("gt_HeroSelectionLockToggle_Func");
    TriggerEnable(gt_HeroSelectionLockToggle, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelectionLockAction_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (gv_GameStartBoolean == false) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
        if (!(PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
            continue;
        }
        if (PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), PlayerGroupLoopCurrent())) {
            continue;
        }
        if (!(gv_HeroSelectionLockEnabled[PlayerGroupLoopCurrent()])) {
            continue;
        }
        UnitClearSelection(PlayerGroupLoopCurrent());
        UnitSelect(gv_PlayerHero[gv_PlayerBayul[PlayerGroupLoopCurrent()]], PlayerGroupLoopCurrent(), true);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelectionLockAction_Init () {
    gt_HeroSelectionLockAction = TriggerCreate("gt_HeroSelectionLockAction_Func");
    TriggerEnable(gt_HeroSelectionLockAction, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: "Remove objectives" button
//--------------------------------------------------------------------------------------------------
bool gt_RemoveObjectivesButton_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == false))) {
            return false;
        }
        if (!((EventDialogControl() == gv_RemoveObjectivesButton))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    ObjectiveDestroyAll(PlayerGroupSingle(EventPlayer()));
    DialogControlSetVisible(gv_RemoveObjectivesButton, PlayerGroupSingle(EventPlayer()), false);

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveObjectivesButton_Init () {
    gt_RemoveObjectivesButton = TriggerCreate("gt_RemoveObjectivesButton_Func");
    TriggerEnable(gt_RemoveObjectivesButton, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chat command handler
//--------------------------------------------------------------------------------------------------
bool lf_TestModeVotedFor() {
    PlayerGroupLoopBegin(PlayerGroupActive());
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
        if (!(PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
            continue;
        }
        if (PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), PlayerGroupLoopCurrent())) {
            continue;
        }
        if (gv_TestModeVotes[PlayerGroupLoopCurrent()] == false) {
            return false;
        }
    }
    PlayerGroupLoopEnd();
    return true;
}

bool lf_EnoughVotesToKick(int player) {
    int active_players = 0;
    int votes = 0;
    PlayerGroupLoopBegin(PlayerGroupActive());
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
        if (!(PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
            continue;
        }
        if (PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), PlayerGroupLoopCurrent())) {
            continue;
        }
        active_players += 1;
        if (gv_VotedToKick[PlayerGroupLoopCurrent()][player] == true) {
            votes += 1;
        }
    }
    PlayerGroupLoopEnd();

    if (active_players <= 2) {
        return false;
    }

    if (votes == (active_players - 1)) {
        return true;
    }

    return false;
}

bool gt_TrChatCommandHandler_Func (bool testConds, bool runActions) {
    int i;
    int number;
    fixed numberf;
    fixed current_level;
    string command;
    string[5] arguments;
    text message;
    unitref reference;

    if (testConds) {
        if (PlayerType(EventPlayer()) != c_playerTypeUser) {
            return false;
        }

        if ((gv_GameStartBoolean == false) || (gv_GameEndBoolean == true)) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    // Command parsing
    command = StringWord(EventChatMessage(false), 1);
    for (i = 0; i < 5; i += 1) {
        arguments[i] = StringWord(EventChatMessage(false), i + 2);
        if (arguments[i] == "No String") {
            arguments[i] = "";
            break;
        }
    }

    // Here are the commands available to observers
    if (StringEqual(command, "-list", true)) {
        UIDisplayMessage(
            PlayerGroupSingle(EventPlayer()),
            c_messageAreaDebug,
            (  // TODO: Move to external string
                StringExternal("Param/Value/89E47C85") + 
                TextWithColor(StringToText("<Chat commands:><n/> -players: Show the numbered list of all players<n/> -testmode: Vote to enable the test mode. If everyone agrees, singleplayer commands will be enabled<n/> -votekick [X]: Vote to kick player number [X] from the game. Needs everyone else to agree<n/><n/>Singleplayer commands<n/> -minerals [X]: Set your minerals to [X] (default: 10000)<n/> -gas [X]: Set your gas to [X] (default: 100)<n/> -levelup [X]: Your hero instantly gains [X] levels (default: 1)<n/> -testunit: Spawn a test unit at your position<n/> -changehero [X]: Change your hero to hero number [X]. Does not reset stat upgrades"), Color(100.00, 100.00, 50.20)) +
                StringExternal("Param/Value/CC7276AB")
            )
        );
        return true;
    }

    if (StringEqual(command, "-players", true)) {
        message = StringToText("Player list:\n"); // TODO: Move to external string
        PlayerGroupLoopBegin(PlayerGroupActive());
        for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
            if (!(PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
                continue;
            }
            message += IntToText(PlayerGroupLoopCurrent());
            message += StringToText(". ");
            message += TextWithColor(
                PlayerName(EventPlayer()),
                libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))
            );
            message += StringToText("\n");
        }
        PlayerGroupLoopEnd();

        UIDisplayMessage(
            PlayerGroupAll(),
            c_messageAreaSubtitle,
            message
        );
        return true;
    }

    if (StringEqual(command, "-stats", true)) {
        if (StringEqual(arguments[0], "", true)) {
            if (PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer())) {
                return false;
            }
            gf_ShowPlayerStatistics(EventPlayer());
            return true;
        }
        number = StringToInt(arguments[0]);
        if ((number <= 0) || (number >= 9)) {
            return false;
        }
        if (!(PlayerGroupHasPlayer(PlayerGroupActive(), number))) {
            return false;
        }
        gf_ShowPlayerStatistics(number);
        return true;
    }

    if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == false))) {
        return false;
    }

    // Here are the commands available in multiplayer
    if (StringEqual(command, "-testmode", true)) {
        gv_TestModeVotes[EventPlayer()] = true;
        if (lf_TestModeVotedFor()) {
            UIDisplayMessage(
                PlayerGroupAll(),
                c_messageAreaSubtitle,
                StringToText("Test mode activated. Singleplayer commands enabled for everyone") // TODO: Move to external string
            );
        }
        return true;
    }

    if (StringEqual(command, "-votekick", true)) {
        number = StringToInt(arguments[0]);
        if ((number <= 0) || (number >= 11)) {
            return false;
        }
        if (!(PlayerGroupHasPlayer(PlayerGroupActive(), number))) {
            return false;
        }
        if (gv_VotedToKick[EventPlayer()][number] == true) {
            return true;
        }
        gv_VotedToKick[EventPlayer()][number] = true;
        UIDisplayMessage(
            PlayerGroupAll(),
            c_messageAreaSubtitle,
            (
                TextWithColor(
                    PlayerName(EventPlayer()),
                    libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))
                ) +
                StringToText(" has voted to kick ") + // TODO: Move to external string
                TextWithColor(
                    PlayerName(number),
                    libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(number, false))
                )
            )
        );
        if (lf_EnoughVotesToKick(number)) {
            KickFromGame(PlayerGroupSingle(number));
        }
        return true;
    }

    if ((PlayerGroupCount(PlayerGroupActive()) != 1) && !(lf_TestModeVotedFor())) {
        return false;
    }

    // Here are the singleplayer and testmode commands
    if (StringEqual(command, "-minerals", true)) {
        number = StringToInt(arguments[0]);
        if (number == 0) {
            number = 10000;
        }
        PlayerModifyPropertyInt(
            EventPlayer(),
            c_playerPropMinerals,
            c_playerPropOperSetTo,
            number
        );
        return true;
    }

    if (StringEqual(command, "-gas", true)) {
        number = StringToInt(arguments[0]);
        if (number == 0) {
            number = 100;
        }
        PlayerModifyPropertyInt(
            EventPlayer(),
            c_playerPropVespene,
            c_playerPropOperSetTo,
            number
        );
        return true;
    }

    if (StringEqual(command, "-levelup", true)) {
        current_level = UnitGetPropertyFixed(
            gv_PlayerHero[EventPlayer()],
            c_unitPropLevel,
            c_unitPropCurrent
        );
        numberf = StringToFixed(arguments[0]);
        if (numberf == 0.0) {
            numberf = 1.0;
        }
        UnitSetPropertyFixed(
            gv_PlayerHero[EventPlayer()],
            c_unitPropLevel,
            MinF((current_level + numberf), 18.0)
        );
        return true;
    }

    if (StringEqual(command, "-testunit", true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(
            1,
            "Hydralisk",
            0,
            11,
            UnitGetPosition(gv_PlayerHero[EventPlayer()])
        );
        return true;
    }

    if (StringEqual(command, "-changehero", true)) {
        number = 0;
        number = StringToInt(arguments[0]);
        if (number == 0) {
            return false;
        }
        if (gv_HeroDeathBoolean[EventPlayer()]) {
            return false;
        }

        UnitRemove(gv_PlayerHero[EventPlayer()]);
        for (i = 0; i < 4; i += 1) {
            gv_SkillLevels[EventPlayer()][i] = 0;
        }

        gv_HeroReviveCountNum[EventPlayer()][0] = 10;
        gv_HeroReviveCountNum[EventPlayer()][1] = 10;
        gv_PlayerLevel[EventPlayer()][0] = 1;
        gv_HeroKillMoney[EventPlayer()][0] = 60;
        gv_HeroKillMoney[EventPlayer()][1] = 12;
        gv_HeroKillMoney[EventPlayer()][2] = 20;
        gv_AllyGiveMoney[EventPlayer()] = 500;
        gv_AvailableSkillPoints[EventPlayer()] = 1;

        gf_SpawnHero(EventPlayer(), number);
        reference = UnitRefFromUnit(gv_PlayerHero[EventPlayer()]);
        TriggerAddEventUnitProperty(gt_MinionObjectiveCompleted, reference, c_unitPropKills);
        TriggerAddEventUnitDamaged(gt_TrackHeroDamage, reference, c_unitDamageTypeAny, c_unitDamageEither, null);
        TriggerAddEventUnitHealed(gt_TrackHeroHealing, reference, c_unitVitalLife, null);
        gf_HrSkillLearnWindowOpen();
        UnitClearSelection(EventPlayer());
        UnitSelect(gv_PlayerHero[EventPlayer()], EventPlayer(), true);
    }

    return false;
}

//--------------------------------------------------------------------------------------------------
void gt_TrChatCommandHandler_Init () {
    gt_TrChatCommandHandler = TriggerCreate("gt_TrChatCommandHandler_Func");
    TriggerAddEventChatMessage(gt_TrChatCommandHandler, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??? ??????(??????)
//--------------------------------------------------------------------------------------------------
bool gt_Trgametipbtn_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    HelpPanelDisplayPage(PlayerGroupSingle(EventPlayer()), c_helpPanelPageTips);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Trgametipbtn_Init () {
    gt_Trgametipbtn = TriggerCreate("gt_Trgametipbtn_Func");
    TriggerAddEventGameMenuItemSelected(gt_Trgametipbtn, c_playerAny, c_gameMenuDialogGenericButton2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ?????? ??? ?????? (??????)
//--------------------------------------------------------------------------------------------------
bool gt_TrMinionMake_Func (bool testConds, bool runActions) {
    int i;

    if (!runActions) {
        return true;
    }

    if ((gv_GameEndBoolean == false)) {
        for (i = 1; i <= 3; i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverA", 0, 12, PointFromId(123));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(208)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(210)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(46)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(203)), c_orderQueueAddToEnd);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverB", 0, 13, PointFromId(203));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(209)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(210)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(43)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(123)), c_orderQueueAddToEnd);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverA", 0, 12, PointFromId(108));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(204)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(206)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(47)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(124)), c_orderQueueAddToEnd);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PreserverB", 0, 13, PointFromId(124));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(207)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(206)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(48)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(108)), c_orderQueueAddToEnd);
            Wait(0.5, c_timeReal);
        }
        for (i = 1; i <= 3; i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplar", 0, 12, PointFromId(123));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(208)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(210)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(46)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(203)), c_orderQueueAddToEnd);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplar2team", 0, 13, PointFromId(203));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(209)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(210)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(43)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(123)), c_orderQueueAddToEnd);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplar", 0, 12, PointFromId(108));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(204)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(206)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(47)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(124)), c_orderQueueAddToEnd);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HighTemplar2team", 0, 13, PointFromId(124));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(207)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(206)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(48)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(108)), c_orderQueueAddToEnd);
            Wait(0.5, c_timeReal);
        }
        if ((gv_StrongUnitCount == 2)) {
            Wait(0.1, c_timeReal);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sentry", 0, 12, PointFromId(123));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(208)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(210)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(46)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(203)), c_orderQueueAddToEnd);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sentry2team", 0, 13, PointFromId(203));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(209)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(210)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(43)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(123)), c_orderQueueAddToEnd);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sentry", 0, 12, PointFromId(108));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(204)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(206)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(47)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(124)), c_orderQueueAddToEnd);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sentry2team", 0, 13, PointFromId(124));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(207)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(206)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(48)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(108)), c_orderQueueAddToEnd);
            gv_StrongUnitCount = 0;
            Wait(0.5, c_timeReal);
        }
        else {
            gv_StrongUnitCount += 1;
        }
        if ((UnitGroupCount(UnitGroup("FleetBeacon", 13, RegionCircle(PointFromId(155), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sentry", 0, 12, PointFromId(123));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(208)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(210)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(46)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(203)), c_orderQueueAddToEnd);
        }

        if ((UnitGroupCount(UnitGroup("FleetBeacon", 12, RegionCircle(PointFromId(154), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sentry2team", 0, 13, PointFromId(203));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(209)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(210)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(43)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(123)), c_orderQueueAddToEnd);
        }

        if ((UnitGroupCount(UnitGroup("FleetBeacon", 13, RegionCircle(PointFromId(185), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sentry", 0, 12, PointFromId(108));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(204)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(206)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(47)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(124)), c_orderQueueAddToEnd);
        }

        if ((UnitGroupCount(UnitGroup("FleetBeacon", 12, RegionCircle(PointFromId(179), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sentry2team", 0, 13, PointFromId(124));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(207)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(206)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(48)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(108)), c_orderQueueAddToEnd);
        }

        Wait(0.5, c_timeReal);
        if ((UnitGroupCount(UnitGroup("FleetBeacon", 13, RegionCircle(PointFromId(155), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Immortal", 0, 12, PointFromId(123));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(208)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(210)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(46)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(203)), c_orderQueueAddToEnd);
        }

        if ((UnitGroupCount(UnitGroup("FleetBeacon", 12, RegionCircle(PointFromId(154), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Immortal2team", 0, 13, PointFromId(203));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(209)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(210)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(43)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(123)), c_orderQueueAddToEnd);
        }

        if ((UnitGroupCount(UnitGroup("FleetBeacon", 13, RegionCircle(PointFromId(185), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Immortal", 0, 12, PointFromId(108));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(204)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(206)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(47)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(124)), c_orderQueueAddToEnd);
        }

        if ((UnitGroupCount(UnitGroup("FleetBeacon", 12, RegionCircle(PointFromId(179), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Immortal2team", 0, 13, PointFromId(124));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(207)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(206)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(48)), c_orderQueueAddToEnd);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 3), PointFromId(108)), c_orderQueueAddToEnd);
        }

        gv_MinionMonsterStronger[0] += 1;
        gv_MinionMonsterStronger[1] += 1;
        if ((gv_MinionMonsterStronger[0] >= 2) && (gv_MinionMonsterStronger[2] < 100)) {
            gv_MinionMonsterStronger[0] = 0;
            gv_MinionMonsterStronger[2] += 1;
            TechTreeUpgradeAddLevel(12, "PortalBuy22", 1);
            TechTreeUpgradeAddLevel(13, "PortalBuy22", 1);
        }

        if ((gv_MinionMonsterStronger[1] >= 20) && (gv_MinionMonsterStronger[3] < 5)) {
            gv_MinionMonsterStronger[1] = 0;
            gv_MinionMonsterStronger[3] += 1;
            TechTreeUpgradeAddLevel(11, "PortalBuy222", 1);
            TechTreeUpgradeAddLevel(12, "PortalBuy223", 1);
            TechTreeUpgradeAddLevel(13, "PortalBuy223", 1);
        }

        PlayerCreateEffectPoint(11, "MinionMakeTimerG", PointFromId(1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMinionMake_Init () {
    gt_TrMinionMake = TriggerCreate("gt_TrMinionMake_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMinionMake, 11, "MonsterMakeTimerD");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????????
//--------------------------------------------------------------------------------------------------
bool gt_TrHeroLevelUp_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((EventUnitBehavior() == "TestVeterancy2"))) {
            return false;
        }

        if (!((UnitLevel(EventUnit()) > 1))) {
            return false;
        }

        if (!((UnitLevel(EventUnit()) <= 18))) {
            return false;
        }

        if (!((EventUnit() == gv_PlayerHero[EventPlayer()]))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_AvailableSkillPoints[EventPlayer()] += 1;

    if (((UnitLevel(EventUnit()) >= 2) && (UnitLevel(EventUnit()) <= 6))) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 1);
        gv_HeroReviveCountNum[EventPlayer()][1] += 1;
    }
    else if (((UnitLevel(EventUnit()) >= 7) && (UnitLevel(EventUnit()) <= 11))) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 2);
        gv_HeroReviveCountNum[EventPlayer()][1] += 2;
    }
    else if (((UnitLevel(EventUnit()) >= 12) && (UnitLevel(EventUnit()) <= 16))) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 3);
        gv_HeroReviveCountNum[EventPlayer()][1] += 3;
    }
    else if ((UnitLevel(EventUnit()) == 17)) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 4);
        gv_HeroReviveCountNum[EventPlayer()][1] += 4;
    }
    else if ((UnitLevel(EventUnit()) == 18)) {
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 5);
        gv_HeroReviveCountNum[EventPlayer()][1] += 8;
    }

    gv_PlayerLevel[EventPlayer()][0] += 1;
    gv_HeroKillMoney[EventPlayer()][0] += 15;
    gv_HeroKillMoney[EventPlayer()][1] += 4;
    gv_HeroKillMoney[EventPlayer()][2] += 7;
    gv_AllyGiveMoney[EventPlayer()] += 50;
    libNtve_gf_SetDialogItemText(gv_ScoreDialogLevel[EventPlayer()], (StringExternal("Param/Value/6ADB3997") + IntToText(gv_PlayerLevel[EventPlayer()][0]) + StringExternal("Param/Value/DDE5A5FD")), PlayerGroupAll());
    gf_HrSkillLearnWindowOpen();
    gf_HrHeroLevelUpLink();
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellLvUp", 1);
    if ((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)))) == true)) {
        PlayerCreateEffectUnit(EventPlayer(), "ApplyIncapBehavior2222", gv_PlayerHero[EventPlayer()]);
        TextTagCreate((StringExternal("Param/Value/C9DC761E") + TextWithColor(StringExternal("Param/Value/884F1E2C"), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/DA92AFA3")), 35, UnitGetPosition(gv_PlayerHero[EventPlayer()]), (UnitGetHeight(gv_PlayerHero[EventPlayer()]) + 1.0), true, false, PlayerGroupSingle(EventPlayer()));
        TextTagAttachToUnit(TextTagLastCreated(), gv_PlayerHero[EventPlayer()], 1.0);
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
        TextTagFogofWar(TextTagLastCreated(), true);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHeroLevelUp_Init () {
    gt_TrHeroLevelUp = TriggerCreate("gt_TrHeroLevelUp_Func");
    TriggerAddEventUnitGainLevel(gt_TrHeroLevelUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? (?????????F1)
//--------------------------------------------------------------------------------------------------
bool gt_SkillPointAllocation_Func (bool testConds, bool runActions) {
    int i;
    int skill;
    string[4] upgrade_string;
    string[4] skill_hotkeys;

    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == false))) {
            return false;
        }
        if (!((gv_AvailableSkillPoints[EventPlayer()] > 0))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    upgrade_string[0] = "Upgrade your Q skill "; // TODO: Move to external strings
    upgrade_string[1] = "Upgrade your W skill ";
    upgrade_string[2] = "Upgrade your E skill ";
    upgrade_string[3] = "Upgrade your R skill ";

    skill_hotkeys[0] = "[F1]"; // TODO: Move to external strings
    skill_hotkeys[1] = "[F2]";
    skill_hotkeys[2] = "[F3]";
    skill_hotkeys[3] = "[F4]";

    for (i = 0; i < 4; i += 1) {
        if (EventDialogControl() == gv_SkillLearnWindowButton[i]) {
            skill = i;
            break;
        }
    }

    gf_LearnSkill(EventPlayer(), skill);

    if ((gv_SkillLevels[EventPlayer()][skill] == 1)) {
        libNtve_gf_SetDialogItemTooltip(
            gv_SkillLearnWindowButton[skill],
            (
                StringToText("<s val=\"PurchasePanelGroupName\">") + 
                StringToText(upgrade_string[skill]) +
                TextWithColor(StringToText(skill_hotkeys[skill]), Color(100.0, 100.0, 100.0)) +
                StringToText("</s>")
            ),
            PlayerGroupSingle(EventPlayer())
        );
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkillPointAllocation_Init () {
    gt_SkillPointAllocation = TriggerCreate("gt_SkillPointAllocation_Func");
    TriggerEnable(gt_SkillPointAllocation, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ????????? ????????? ?????????
//--------------------------------------------------------------------------------------------------
bool gt_ChangeShopPage_Func (bool testConds, bool runActions) {
    int i;
    int current_page;

    if (testConds) {
        if (!gv_GameStartBoolean) {
            return false;
        }
        if (gv_GameEndBoolean) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    current_page = gv_ActiveShopPage[EventPlayer()];

    if (EventDialogControl() == gv_StatShopNextPageDummyButton) {
        if (current_page == 4) {
            gf_ChangeStatShopPage(EventPlayer(), 0);
            return true;
        }
        gf_ChangeStatShopPage(EventPlayer(), current_page + 1);
        return true;
    }

    for (i = 0; i < 5; i += 1) {
        if (EventDialogControl() == gv_StatShopPageButton[i]) {
            gf_ChangeStatShopPage(EventPlayer(), i);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeShopPage_Init () {
    gt_ChangeShopPage = TriggerCreate("gt_ChangeShopPage_Func");
    TriggerEnable(gt_ChangeShopPage, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ????????? ????????? ???????????????
//--------------------------------------------------------------------------------------------------
static bool lf_StatEligibleForBuying (int stat_index) {
    if (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < gv_StatHowMoney[stat_index][EventPlayer()]) {
        return false;
    }
    if (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < gv_ShopItemParameters[stat_index].gas_cost) {
        return false;
    }
    if (gv_ShopItemParameters[stat_index].alive_only && (gv_HeroDeathBoolean[EventPlayer()] == true)) {
        return false;
    }
    return true;
}

bool gt_TrStatDialogStatIncrease_Func (bool testConds, bool runActions) {
    int i;
    bool flag;
    if (testConds) {
        // Not for observers
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == false))) {
            return false;
        }
        // Only if we're on the stat increase button
        flag = false;
        for (i = 0; i < 30; i += 1) {
            if (EventDialogControl() == gv_StatShopButton[i]) {
                flag = true;
                break;
            }
        }
        if (!flag) {
            return false;
        }
    }
    if (!runActions) {
        return true;
    }
    gv_StatusWindowAddDelay[EventPlayer()] = true;
    // Increase the stat if the criteria are met
    for (i = 0; i < 30; i += 1) {
        if ((EventDialogControl() == gv_StatShopButton[i])) {
            if (!(lf_StatEligibleForBuying(i))) {
                gv_StatusWindowAddDelay[EventPlayer()] = false;
                return false;
            }
            if (i == 26) {
                // Check if there's a ward alive. Should be unnecessary but just in case
                if (!(UnitGroupCount(UnitGroup("Gamsi", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    return false;
                }
            }
            gv_ShopItemParameters[i].increase_function();
        }
    }
    Wait(0.1, c_timeReal);
    gf_StatWindowUpdatePlayer(EventPlayer());
    gv_StatusWindowAddDelay[EventPlayer()] = false;
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TrStatDialogStatIncrease_Init () {
    gt_TrStatDialogStatIncrease = TriggerCreate("gt_TrStatDialogStatIncrease_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????????(??????)
//--------------------------------------------------------------------------------------------------
bool gt_TrHealingPosionUseComplete_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_StatIncreasesBought[EventPlayer()][24] = 0;
    DialogControlSetEnabled(gv_StatusWindowBtn[24], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[24], (StringExternal("Param/Value/96D19A96") + IntToText(gv_StatIncreasesBought[EventPlayer()][24]) + StringExternal("Param/Value/458E87A8")), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHealingPosionUseComplete_Init () {
    gt_TrHealingPosionUseComplete = TriggerCreate("gt_TrHealingPosionUseComplete_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrHealingPosionUseComplete, c_playerAny, "HeroOkGi2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????????(??????)
//--------------------------------------------------------------------------------------------------
bool gt_TrManaPosionUseComplete_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_StatIncreasesBought[EventPlayer()][25] = 0;
    DialogControlSetEnabled(gv_StatusWindowBtn[25], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[25], (StringExternal("Param/Value/696A9ED7") + IntToText(gv_StatIncreasesBought[EventPlayer()][25]) + StringExternal("Param/Value/104CC61A")), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrManaPosionUseComplete_Init () {
    gt_TrManaPosionUseComplete = TriggerCreate("gt_TrManaPosionUseComplete_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrManaPosionUseComplete, c_playerAny, "HeroOkGi22");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ????????????
//--------------------------------------------------------------------------------------------------
bool gt_TrWardUseComplete_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_StatIncreasesBought[EventPlayer()][26] = 0;
    DialogControlSetEnabled(gv_StatusWindowBtn[26], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[26], (StringExternal("Param/Value/D68A9FC5") + IntToText(gv_StatIncreasesBought[EventPlayer()][26]) + StringExternal("Param/Value/C65A8CFA")), PlayerGroupSingle(EventPlayer()));
    gf_StatWindowUpdatePlayer(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrWardUseComplete_Init () {
    gt_TrWardUseComplete = TriggerCreate("gt_TrWardUseComplete_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrWardUseComplete, c_playerAny, "HeroOkGi224");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ????????????
//--------------------------------------------------------------------------------------------------
bool gt_TrWardUseComplete2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_StatIncreasesBought[EventPlayer()][27] = 0;
    DialogControlSetEnabled(gv_StatusWindowBtn[27], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemText(gv_StatShopItemLabel[27], (StringExternal("Param/Value/7D0E738D") + IntToText(gv_StatIncreasesBought[EventPlayer()][27]) + StringExternal("Param/Value/417CE63D")), PlayerGroupSingle(EventPlayer()));
    gf_StatWindowUpdatePlayer(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrWardUseComplete2_Init () {
    gt_TrWardUseComplete2 = TriggerCreate("gt_TrWardUseComplete2_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrWardUseComplete2, c_playerAny, "HeroOkGi223");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ????????????
//--------------------------------------------------------------------------------------------------
bool gt_TrUnitBoodeSet_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_HeroDeathBoolean[EventPlayer()] == false))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "Hero15Skill2Unit")) {
        gf_HrHeroBSpawnH1();
    }
    else if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "Hero61Skill4Unit")) {
        gf_HrHeroBSpawnH2();
    }

    gf_HrAssistSystemAdd2();
    UnitControlGroupAddUnit(EventPlayer(), 2, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrUnitBoodeSet_Init () {
    gt_TrUnitBoodeSet = TriggerCreate("gt_TrUnitBoodeSet_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrUnitBoodeSet, c_playerAny, "NexusExplo22");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? - ????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrTextTailUseCritical_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    TextTagCreate((StringExternal("Param/Value/AF6676A5") + TextWithColor(StringExternal("Param/Value/9D3771A1"), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/0B0E0FAE")), 35, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), (UnitGetHeight(EventPlayerEffectUsedUnit(c_effectUnitTarget)) + 1.0), true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), EventPlayerEffectUsedUnit(c_effectUnitTarget), 2.25);
    TextTagSetVelocity(TextTagLastCreated(), 0.8, 90.0);
    TextTagFogofWar(TextTagLastCreated(), true);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTextTailUseCritical_Init () {
    gt_TrTextTailUseCritical = TriggerCreate("gt_TrTextTailUseCritical_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrTextTailUseCritical, c_playerAny, "CritcalM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? - ?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrTextTailUseHyepi_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }

        if (!((gv_HeroDeathBoolean[EventPlayer()] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    TextTagCreate((StringExternal("Param/Value/7901A076") + TextWithColor(StringExternal("Param/Value/F9C1B0B8"), Color(50.20, 91.37, 100.00)) + StringExternal("Param/Value/7F984D5D")), 35, UnitGetPosition(gv_PlayerHero[EventPlayer()]), (UnitGetHeight(gv_PlayerHero[EventPlayer()]) + 1.0), true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), gv_PlayerHero[EventPlayer()], 1.5);
    TextTagSetVelocity(TextTagLastCreated(), 0.8, 90.0);
    TextTagFogofWar(TextTagLastCreated(), true);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTextTailUseHyepi_Init () {
    gt_TrTextTailUseHyepi = TriggerCreate("gt_TrTextTailUseHyepi_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrTextTailUseHyepi, c_playerAny, "ApplyIncapBehavior24");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? - ???????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrSpellTeleportUse_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    CameraPan(EventPlayer(), UnitGetPosition(gv_PlayerHero[EventPlayer()]), 0.0, -1, 10, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSpellTeleportUse_Init () {
    gt_TrSpellTeleportUse = TriggerCreate("gt_TrSpellTeleportUse_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrSpellTeleportUse, c_playerAny, "TeleportGi22");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? - ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrPortalUse_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
        UnitSetPosition(gv_PlayerHero[EventPlayer()], PointFromId(194), false);
    }
    else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true)) {
        UnitSetPosition(gv_PlayerHero[EventPlayer()], PointFromId(195), false);
    }

    Wait(0.5, c_timeReal);
    CameraPan(EventPlayer(), UnitGetPosition(gv_PlayerHero[EventPlayer()]), 0.0, -1, 10, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrPortalUse_Init () {
    gt_TrPortalUse = TriggerCreate("gt_TrPortalUse_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrPortalUse, c_playerAny, "HeroOkGi32");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ??????????????? ????????? ????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrMissileOutDestroy_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMissileOutDestroy_Init () {
    gt_TrMissileOutDestroy = TriggerCreate("gt_TrMissileOutDestroy_Func");
    TriggerAddEventUnitRegion(gt_TrMissileOutDestroy, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????? R?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrTextTailUseHero5Skill4_Func (bool testConds, bool runActions) {
    const int auto6337BFF8_n = 5;
    int auto6337BFF8_i;

    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }

        if (!((gv_HeroDeathBoolean[EventPlayer()] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    for (auto6337BFF8_i = 1; auto6337BFF8_i <= auto6337BFF8_n; auto6337BFF8_i += 1) {
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
            TextTagCreate((StringExternal("Param/Value/19DBA674") + TextWithColor(StringExternal("Param/Value/1F313057"), Color(100.00, 45.88, 25.10)) + StringExternal("Param/Value/5230DC5C")), 35, UnitGetPosition(gv_PlayerHero[EventPlayer()]), (UnitGetHeight(gv_PlayerHero[EventPlayer()]) + 1.0), true, false, GameAttributePlayersForTeam(1));
        }
        else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true)) {
            TextTagCreate((StringExternal("Param/Value/2471788A") + TextWithColor(StringExternal("Param/Value/80DE3240"), Color(100.00, 45.88, 25.10)) + StringExternal("Param/Value/D3375B17")), 35, UnitGetPosition(gv_PlayerHero[EventPlayer()]), (UnitGetHeight(gv_PlayerHero[EventPlayer()]) + 1.0), true, false, GameAttributePlayersForTeam(2));
        }

        TextTagAttachToUnit(TextTagLastCreated(), gv_PlayerHero[EventPlayer()], 2.5);
        TextTagSetVelocity(TextTagLastCreated(), 0.6, 90.0);
        TextTagFogofWar(TextTagLastCreated(), true);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        Wait(0.75, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTextTailUseHero5Skill4_Init () {
    gt_TrTextTailUseHero5Skill4 = TriggerCreate("gt_TrTextTailUseHero5Skill4_Func");
    TriggerEnable(gt_TrTextTailUseHero5Skill4, false);
    TriggerAddEventPlayerEffectUsed(gt_TrTextTailUseHero5Skill4, c_playerAny, "HeroOkGi343");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????? ????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrTextTailUseHero9AttackImpact_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    TextTagCreate((StringExternal("Param/Value/F05FCD70") + TextWithColor(StringExternal("Param/Value/DE54CFF6"), Color(100.00, 0.00, 50.20)) + StringExternal("Param/Value/1BC1340C")), 35, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), (UnitGetHeight(EventPlayerEffectUsedUnit(c_effectUnitTarget)) + 1.0), true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), EventPlayerEffectUsedUnit(c_effectUnitTarget), 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 0.8, 90.0);
    TextTagFogofWar(TextTagLastCreated(), true);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrTextTailUseHero9AttackImpact_Init () {
    gt_TrTextTailUseHero9AttackImpact = TriggerCreate("gt_TrTextTailUseHero9AttackImpact_Func");
    TriggerEnable(gt_TrTextTailUseHero9AttackImpact, false);
    TriggerAddEventPlayerEffectUsed(gt_TrTextTailUseHero9AttackImpact, c_playerAny, "Hero9PassiveG2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? R?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero10Skill4On_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((gv_SkillLevels[EventPlayer()][c_skillR] == 1)) {
        gv_SkillDPSave[EventPlayer()] = 5;
        gv_SkillRPSave[EventPlayer()] = 5;
    }
    else if ((gv_SkillLevels[EventPlayer()][c_skillR] == 2)) {
        gv_SkillDPSave[EventPlayer()] = 8;
        gv_SkillRPSave[EventPlayer()] = 8;
    }
    else if ((gv_SkillLevels[EventPlayer()][c_skillR] == 3)) {
        gv_SkillDPSave[EventPlayer()] = 11;
        gv_SkillRPSave[EventPlayer()] = 11;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp222233322234", gv_SkillDPSave[EventPlayer()]);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333222342", gv_SkillRPSave[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero10Skill4On_Init () {
    gt_TrHero10Skill4On = TriggerCreate("gt_TrHero10Skill4On_Func");
    TriggerEnable(gt_TrHero10Skill4On, false);
    TriggerAddEventPlayerEffectUsed(gt_TrHero10Skill4On, c_playerAny, "ApplyIncapBehavior2222222225432");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? R?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero10Skill4Off_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpellUp222233322234", (TechTreeUpgradeCount(EventPlayer(), "SpellUp222233322234", c_techCountCompleteOnly) - gv_SkillDPSave[EventPlayer()]));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpellUp2222333222342", (TechTreeUpgradeCount(EventPlayer(), "SpellUp2222333222342", c_techCountCompleteOnly) - gv_SkillRPSave[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero10Skill4Off_Init () {
    gt_TrHero10Skill4Off = TriggerCreate("gt_TrHero10Skill4Off_Func");
    TriggerEnable(gt_TrHero10Skill4Off, false);
    TriggerAddEventPlayerEffectUsed(gt_TrHero10Skill4Off, c_playerAny, "HeroOkGi2352223");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? Q?????? ????????????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero15Skill4Use_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "SpellUp2222333662", c_techCountCompleteOnly) < 100))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333662", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero15Skill4Use_Init () {
    gt_TrHero15Skill4Use = TriggerCreate("gt_TrHero15Skill4Use_Func");
    TriggerEnable(gt_TrHero15Skill4Use, false);
    TriggerAddEventPlayerEffectUsed(gt_TrHero15Skill4Use, c_playerAny, "Hero15Skill1G2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????? ????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero19Death_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    PlayerCreateEffectUnit(EventPlayer(), "Hero19PassiveDeath", gv_PlayerHero[EventPlayer()]);
    TriggerExecute(gt_TrHeroReviveStand, true, true);
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (PlayerStatus(EventPlayer()) == c_playerStatusActive)) {
        UnitSetPosition(gv_PlayerHero[EventPlayer()], PointFromId(194), false);
        UnitRevive(gv_PlayerHero[EventPlayer()]);
        libNtve_gf_MakeUnitInvulnerable(gv_PlayerHero[EventPlayer()], false);
    }
    else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (PlayerStatus(EventPlayer()) == c_playerStatusActive)) {
        UnitSetPosition(gv_PlayerHero[EventPlayer()], PointFromId(195), false);
        UnitRevive(gv_PlayerHero[EventPlayer()]);
        libNtve_gf_MakeUnitInvulnerable(gv_PlayerHero[EventPlayer()], false);
    }

    UnitSetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropEnergyPercent, 100.0);
    Wait(0.1, c_timeReal);
    if ((PlayerStatus(EventPlayer()) == c_playerStatusActive) && (gv_GameEndBoolean == false)) {
        DialogSetVisible(gv_HeroReviveWindow, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_HeroReviveWindowTime[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        PlayerCreateEffectUnit(EventPlayer(), "ApplyIncapBehavior23", gv_PlayerHero[EventPlayer()]);
        CameraPan(EventPlayer(), UnitGetPosition(gv_PlayerHero[EventPlayer()]), 0.0, -1, 10, false);
        Wait(0.1, c_timeReal);
        UnitClearSelection(EventPlayer());
        UnitSelect(gv_PlayerHero[EventPlayer()], EventPlayer(), true);
        libNtve_gf_SetDialogItemText(gv_ScoreDialogName[EventPlayer()], (StringExternal("Param/Value/6810EC64") + PlayerName(EventPlayer()) + StringExternal("Param/Value/B1C60838")), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(gv_ScoreDialogHeroImage[EventPlayer()], Color(100,100,100), PlayerGroupAll());
        DialogControlFadeTransparency(gv_ScoreDialogHeroImage[EventPlayer()], PlayerGroupAll(), 0.0, 0.0);
        DialogControlSetVisible(gv_ScoreDialogReviveTime[EventPlayer()], PlayerGroupAll(), false);
        gv_HeroDeathBoolean[EventPlayer()] = false;
        gv_HeroKillPlayer[EventPlayer()] = 0;
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_HeroAllKill[0] == true)) {
            gv_HeroAllKill[0] = false;
        }
        else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_HeroAllKill[1] == true)) {
            gv_HeroAllKill[1] = false;
        }

        gf_HrHeroPassiveRepair();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero19Death_Init () {
    gt_TrHero19Death = TriggerCreate("gt_TrHero19Death_Func");
    TriggerEnable(gt_TrHero19Death, false);
    TriggerAddEventPlayerEffectUsed(gt_TrHero19Death, c_playerAny, "Hero19PassiveG");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????? R?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero36Skill4RPDown_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }

        if (!((gv_HeroDeathBoolean[EventPlayer()] == false))) {
            return false;
        }

        if (!((gv_SelectedCharNum[EventPlayer()] == 36))) {
            return false;
        }

        if (!((gv_SkillLevels[EventPlayer()][c_skillR] >= 1))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Hero36Skill42", gv_PlayerHero[EventPlayer()], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero36Skill4RPDown_Init () {
    gt_TrHero36Skill4RPDown = TriggerCreate("gt_TrHero36Skill4RPDown_Func");
    TriggerEnable(gt_TrHero36Skill4RPDown, false);
    TriggerAddEventPlayerEffectUsed(gt_TrHero36Skill4RPDown, c_playerAny, "Hero36Skill4G3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? W?????? ?????? ?????? ????????????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero32Skill2Up_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "SpellUp22223339224222", c_techCountCompleteOnly) < 60))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "SpellUp2222333922422", c_techCountCompleteOnly) < 100)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333922422", 4);
    }
    else if ((TechTreeUpgradeCount(EventPlayer(), "SpellUp2222333922422", c_techCountCompleteOnly) == 100) && (TechTreeUpgradeCount(EventPlayer(), "SpellUp22223339224222", c_techCountCompleteOnly) < 60)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp22223339224222", 4);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero32Skill2Up_Init () {
    gt_TrHero32Skill2Up = TriggerCreate("gt_TrHero32Skill2Up_Func");
    TriggerEnable(gt_TrHero32Skill2Up, false);
    TriggerAddEventPlayerEffectUsed(gt_TrHero32Skill2Up, c_playerAny, "Hero32Skill2G22");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? R?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero32Skill4On_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((gv_SkillLevels[EventPlayer()][c_skillR] == 1)) {
        gv_SkillDPSave[EventPlayer()] = 10;
        gv_SkillRPSave[EventPlayer()] = 10;
    }
    else if ((gv_SkillLevels[EventPlayer()][c_skillR] == 2)) {
        gv_SkillDPSave[EventPlayer()] = 17;
        gv_SkillRPSave[EventPlayer()] = 17;
    }
    else if ((gv_SkillLevels[EventPlayer()][c_skillR] == 3)) {
        gv_SkillDPSave[EventPlayer()] = 24;
        gv_SkillRPSave[EventPlayer()] = 24;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp222233322234", gv_SkillDPSave[EventPlayer()]);
    TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333222342", gv_SkillRPSave[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero32Skill4On_Init () {
    gt_TrHero32Skill4On = TriggerCreate("gt_TrHero32Skill4On_Func");
    TriggerEnable(gt_TrHero32Skill4On, false);
    TriggerAddEventPlayerEffectUsed(gt_TrHero32Skill4On, c_playerAny, "Hero32Skill4Dong2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? R?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero32Skill4Off_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpellUp222233322234", (TechTreeUpgradeCount(EventPlayer(), "SpellUp222233322234", c_techCountCompleteOnly) - gv_SkillDPSave[EventPlayer()]));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpellUp2222333222342", (TechTreeUpgradeCount(EventPlayer(), "SpellUp2222333222342", c_techCountCompleteOnly) - gv_SkillRPSave[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero32Skill4Off_Init () {
    gt_TrHero32Skill4Off = TriggerCreate("gt_TrHero32Skill4Off_Func");
    TriggerEnable(gt_TrHero32Skill4Off, false);
    TriggerAddEventPlayerEffectUsed(gt_TrHero32Skill4Off, c_playerAny, "Hero32Skill4exit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? R?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero39Skill4On_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((gv_Hero39Skill4Save == 0)) {
        CinematicFade(false, 0.25, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    }

    gv_Hero39Skill4Save += 1;
    Wait(0.25, c_timeReal);
    if ((gv_Hero39Skill4Save == 1)) {
        CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 100.0, false);
    }

    gv_Hero39Skill4Save -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero39Skill4On_Init () {
    gt_TrHero39Skill4On = TriggerCreate("gt_TrHero39Skill4On_Func");
    TriggerEnable(gt_TrHero39Skill4On, false);
    TriggerAddEventPlayerEffectUsed(gt_TrHero39Skill4On, c_playerAny, "Hero39Skill4G");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????? Q?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero59Skill1Use_Func (bool testConds, bool runActions) {
    fixed attacker_facing;
    point attacker_position;

    attacker_facing = UnitGetFacing(EventUnitDamageSourceUnit());

    if (testConds) {
        if (!((PlayerType(EventUnitDamageSourcePlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((UnitGetType(EventUnitDamageSourceUnit()) == "Hero59"))) {
            return false;
        }
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    attacker_position = UnitGetPosition(EventUnitDamageSourceUnit());
    if ((attacker_facing > 180.0)) {
        attacker_facing -= 180.0;
    }
    else {
        attacker_facing += 180.0;
    }

    if ((UnitIsAlive(EventUnitDamageSourceUnit()) == true)) {
        UnitSetPosition(EventUnitDamageSourceUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, UnitGetPosition(EventUnit())), false);
    }

    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(attacker_position, 2.0, UnitGetPosition(EventUnit())), false);
    }

    Wait(0.04, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(attacker_position, 1.5, UnitGetPosition(EventUnit())), false);
    }

    Wait(0.04, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(attacker_position, 1.0, UnitGetPosition(EventUnit())), false);
    }

    Wait(0.04, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(attacker_position, 0.5, UnitGetPosition(EventUnit())), false);
    }

    Wait(0.04, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), attacker_position, false);
    }

    Wait(0.04, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnitDamageSourceUnit()), 1.5, UnitGetPosition(EventUnit())), false);
    }

    Wait(0.04, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnitDamageSourceUnit()), 2.0, UnitGetPosition(EventUnit())), false);
    }

    Wait(0.04, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnitDamageSourceUnit()), 2.5, UnitGetPosition(EventUnit())), false);
    }

    Wait(0.04, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnitDamageSourceUnit()), 3.0, UnitGetPosition(EventUnit())), false);
    }

    Wait(0.04, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnitDamageSourceUnit()), 3.5, UnitGetPosition(EventUnit())), false);
    }

    Wait(0.04, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnitDamageSourceUnit()), 4.0, UnitGetPosition(EventUnit())), false);
    }

    Wait(0.04, c_timeGame);
    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitCreateEffectPoint(EventUnit(), "Hero59Skill1Tele", libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnitDamageSourceUnit()), 4.5, UnitGetPosition(EventUnit())));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero59Skill1Use_Init () {
    gt_TrHero59Skill1Use = TriggerCreate("gt_TrHero59Skill1Use_Func");
    TriggerEnable(gt_TrHero59Skill1Use, false);
    TriggerAddEventUnitDamaged(gt_TrHero59Skill1Use, null, c_unitDamageTypeSplash, c_unitDamageEither, "Hero59Skill1Mo");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? E?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero62Skill3Start_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TrHero62Skill3On, true);
    gv_Hero62Skill3Save += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero62Skill3Start_Init () {
    gt_TrHero62Skill3Start = TriggerCreate("gt_TrHero62Skill3Start_Func");
    TriggerEnable(gt_TrHero62Skill3Start, false);
    TriggerAddEventPlayerEffectUsed(gt_TrHero62Skill3Start, c_playerAny, "Hero62Skill3G");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? E?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero62Skill3On_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "Hero62Skill3") == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Hero62"))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) - (EventUnitDamageAmount() / 2.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero62Skill3On_Init () {
    gt_TrHero62Skill3On = TriggerCreate("gt_TrHero62Skill3On_Func");
    TriggerEnable(gt_TrHero62Skill3On, false);
    TriggerAddEventUnitDamaged(gt_TrHero62Skill3On, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? E?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero62Skill3End_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((gv_Hero62Skill3Save < 2))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TrHero62Skill3On, false);
    gv_Hero62Skill3Save -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero62Skill3End_Init () {
    gt_TrHero62Skill3End = TriggerCreate("gt_TrHero62Skill3End_Func");
    TriggerEnable(gt_TrHero62Skill3End, false);
    TriggerAddEventPlayerEffectUsed(gt_TrHero62Skill3End, c_playerAny, "Hero62Skill3G2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero66PassiveOn_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "SpellUp222233322722322", c_techCountCompleteOnly) == 4)) {
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "DefensePower", gv_PlayerHero[EventPlayer()], 3);
        TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp222233322234", 3);
    }
    else if ((TechTreeUpgradeCount(EventPlayer(), "SpellUp222233322722322", c_techCountCompleteOnly) == 8)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333227223222", 1);
    }
    else if ((TechTreeUpgradeCount(EventPlayer(), "SpellUp222233322722322", c_techCountCompleteOnly) == 12)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp22223332272232222", 1);
    }
    else if ((TechTreeUpgradeCount(EventPlayer(), "SpellUp222233322722322", c_techCountCompleteOnly) == 16)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp222233322722322222", 1);
    }
    else if ((TechTreeUpgradeCount(EventPlayer(), "SpellUp222233322722322", c_techCountCompleteOnly) == 24) && (TechTreeUpgradeCount(EventPlayer(), "SpellUp2222333227223222222", c_techCountCompleteOnly) == 0)) {
        TechTreeUpgradeAddLevel(EventPlayer(), "SpellUp2222333227223222222", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero66PassiveOn_Init () {
    gt_TrHero66PassiveOn = TriggerCreate("gt_TrHero66PassiveOn_Func");
    TriggerEnable(gt_TrHero66PassiveOn, false);
    TriggerAddEventPlayerEffectUsed(gt_TrHero66PassiveOn, c_playerAny, "Hero66Passive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHero66PassiveOn2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), UnitGetPosition(EventUnitDamageSourceUnit()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHero66PassiveOn2_Init () {
    gt_TrHero66PassiveOn2 = TriggerCreate("gt_TrHero66PassiveOn2_Func");
    TriggerEnable(gt_TrHero66PassiveOn2, false);
    TriggerAddEventUnitDamaged(gt_TrHero66PassiveOn2, null, c_unitDamageTypeSplash, c_unitDamageEither, "Hero72Skill4MD");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ??????/??????(??????)
//--------------------------------------------------------------------------------------------------
bool gt_ScoreWindowToggle_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_ScoreDialog[0], EventPlayer()) == true)) {
        DialogSetVisible(gv_ScoreDialog[0], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetPosition(gv_ScoreWindowToggleButton, PlayerGroupSingle(EventPlayer()), c_anchorTopRight, 10, 50);
        libNtve_gf_SetDialogItemText(gv_ScoreWindowToggleButton, StringToText("Open score [TAB]"), PlayerGroupSingle(EventPlayer()));
    }
    else if ((DialogIsVisible(gv_ScoreDialog[0], EventPlayer()) == false)) {
        DialogSetVisible(gv_ScoreDialog[0], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetPosition(gv_ScoreWindowToggleButton, PlayerGroupSingle(EventPlayer()), c_anchorTopRight, 10, 510);
        libNtve_gf_SetDialogItemText(gv_ScoreWindowToggleButton, StringToText("Close score [TAB]"), PlayerGroupSingle(EventPlayer()));
        for (i = 1; i <= 8; i += 1) {
            if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
                libNtve_gf_SetDialogItemText(gv_ScoreDialogFarming[gv_PlayerBayul[i]], (StringExternal("Param/Value/2083DE81") + IntToText(libNtve_gf_UnitGetPropertyKills(gv_PlayerHero[gv_PlayerBayul[i]], c_unitPropCurrent)) + StringExternal("Param/Value/6003B0CC")), PlayerGroupAll());
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreWindowToggle_Init () {
    gt_ScoreWindowToggle = TriggerCreate("gt_ScoreWindowToggle_Func");
    TriggerEnable(gt_ScoreWindowToggle, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ???????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrMinionNotStop_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!(((EventPlayer() == 12) || (EventPlayer() == 13)))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "PreserverA") || (UnitGetType(EventUnit()) == "PreserverB") || (UnitGetType(EventUnit()) == "HighTemplar") || (UnitGetType(EventUnit()) == "HighTemplar2team") || (UnitGetType(EventUnit()) == "Sentry") || (UnitGetType(EventUnit()) == "Sentry2team") || (UnitGetType(EventUnit()) == "Immortal") || (UnitGetType(EventUnit()) == "Immortal2team")))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == 12)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(266)), c_orderQueueReplace);
    }
    else if ((EventPlayer() == 13)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(293)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMinionNotStop_Init () {
    gt_TrMinionNotStop = TriggerCreate("gt_TrMinionNotStop_Func");
    TriggerAddEventUnitDamaged(gt_TrMinionNotStop, null, c_unitDamageTypeAny, c_unitDamageEither, "NoMung");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ??????1
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterMake1_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(gv_MonsterBirdGroup[0], c_unitCountAlive) == 0)) {
        UnitCreate(1, "Inunit6", c_unitCreateIgnorePlacement, 11, PointFromId(554), 270.0);
        UnitGroupAdd(gv_MonsterBirdGroup[0], UnitLastCreated());
        UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(554), 270.0);
        gv_MonsterBirdPing1[0] = UnitLastCreated();
    }

    if ((UnitGroupCount(gv_MonsterBirdGroup[1], c_unitCountAlive) == 0)) {
        UnitCreate(1, "Inunit6", c_unitCreateIgnorePlacement, 11, PointFromId(555), 90.0);
        UnitGroupAdd(gv_MonsterBirdGroup[1], UnitLastCreated());
        UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(555), 270.0);
        gv_MonsterBirdPing1[1] = UnitLastCreated();
    }

    if ((UnitGroupCount(gv_MonsterDogGroup[0], c_unitCountAlive) == 0)) {
        UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(560), 250.0);
        UnitGroupAdd(gv_MonsterDogGroup[0], UnitLastCreated());
        UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(561), 260.0);
        UnitGroupAdd(gv_MonsterDogGroup[0], UnitLastCreated());
        UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(562), 280.0);
        UnitGroupAdd(gv_MonsterDogGroup[0], UnitLastCreated());
        UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(563), 290.0);
        UnitGroupAdd(gv_MonsterDogGroup[0], UnitLastCreated());
        UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(561), 270.0);
        gv_MonsterDogPing1[0] = UnitLastCreated();
    }

    if ((UnitGroupCount(gv_MonsterDogGroup[1], c_unitCountAlive) == 0)) {
        UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(556), 110.0);
        UnitGroupAdd(gv_MonsterDogGroup[1], UnitLastCreated());
        UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(557), 100.0);
        UnitGroupAdd(gv_MonsterDogGroup[1], UnitLastCreated());
        UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(558), 80.0);
        UnitGroupAdd(gv_MonsterDogGroup[1], UnitLastCreated());
        UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(559), 70.0);
        UnitGroupAdd(gv_MonsterDogGroup[1], UnitLastCreated());
        UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(558), 270.0);
        gv_MonsterDogPing1[1] = UnitLastCreated();
    }

    if ((UnitGroupCount(gv_MonsterCowGroup[0], c_unitCountAlive) == 0)) {
        UnitCreate(1, "Inunit8", c_unitCreateIgnorePlacement, 11, PointFromId(214), 360.0);
        UnitGroupAdd(gv_MonsterCowGroup[0], UnitLastCreated());
        UnitCreate(1, "Inunit8", c_unitCreateIgnorePlacement, 11, PointFromId(234), 360.0);
        UnitGroupAdd(gv_MonsterCowGroup[0], UnitLastCreated());
        UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(234), 270.0);
        gv_MonsterCowPing1[0] = UnitLastCreated();
    }

    if ((UnitGroupCount(gv_MonsterCowGroup[1], c_unitCountAlive) == 0)) {
        UnitCreate(1, "Inunit8", c_unitCreateIgnorePlacement, 11, PointFromId(157), 180.0);
        UnitGroupAdd(gv_MonsterCowGroup[1], UnitLastCreated());
        UnitCreate(1, "Inunit8", c_unitCreateIgnorePlacement, 11, PointFromId(158), 180.0);
        UnitGroupAdd(gv_MonsterCowGroup[1], UnitLastCreated());
        UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(157), 270.0);
        gv_MonsterCowPing1[1] = UnitLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterMake1_Init () {
    gt_TrMonsterMake1 = TriggerCreate("gt_TrMonsterMake1_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterMake1, 11, "MonsterMakeTimerFirstMake");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ??????2
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterMake2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(gv_MonsterIceBugGroup[0], c_unitCountAlive) == 0)) {
        UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(570), 315.0);
        UnitGroupAdd(gv_MonsterIceBugGroup[0], UnitLastCreated());
        UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(571), 315.0);
        UnitGroupAdd(gv_MonsterIceBugGroup[0], UnitLastCreated());
        UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(570), 270.0);
        gv_MonsterIceBugPing1[0] = UnitLastCreated();
    }

    if ((UnitGroupCount(gv_MonsterIceBugGroup[1], c_unitCountAlive) == 0)) {
        UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(572), 225.0);
        UnitGroupAdd(gv_MonsterIceBugGroup[1], UnitLastCreated());
        UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(573), 225.0);
        UnitGroupAdd(gv_MonsterIceBugGroup[1], UnitLastCreated());
        UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(573), 270.0);
        gv_MonsterIceBugPing1[1] = UnitLastCreated();
    }

    if ((UnitGroupCount(gv_MonsterIceBugGroup[2], c_unitCountAlive) == 0)) {
        UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(574), 45.0);
        UnitGroupAdd(gv_MonsterIceBugGroup[2], UnitLastCreated());
        UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(575), 45.0);
        UnitGroupAdd(gv_MonsterIceBugGroup[2], UnitLastCreated());
        UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(574), 270.0);
        gv_MonsterIceBugPing1[2] = UnitLastCreated();
    }

    if ((UnitGroupCount(gv_MonsterIceBugGroup[3], c_unitCountAlive) == 0)) {
        UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(576), 135.0);
        UnitGroupAdd(gv_MonsterIceBugGroup[3], UnitLastCreated());
        UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(577), 135.0);
        UnitGroupAdd(gv_MonsterIceBugGroup[3], UnitLastCreated());
        UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(577), 270.0);
        gv_MonsterIceBugPing1[3] = UnitLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterMake2_Init () {
    gt_TrMonsterMake2 = TriggerCreate("gt_TrMonsterMake2_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterMake2, 11, "MonsterMakeTimerFirstMake2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ??????3
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterMake3_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(gv_MonsterGalicGroup[0], c_unitCountAlive) == 0)) {
        UnitCreate(1, "Inunit", c_unitCreateIgnorePlacement, 11, PointFromId(548), 45.0);
        UnitGroupAdd(gv_MonsterGalicGroup[0], UnitLastCreated());
        UnitCreate(1, "Inunit2", c_unitCreateIgnorePlacement, 11, PointFromId(549), 45.0);
        UnitGroupAdd(gv_MonsterGalicGroup[0], UnitLastCreated());
        UnitCreate(1, "Inunit2", c_unitCreateIgnorePlacement, 11, PointFromId(550), 45.0);
        UnitGroupAdd(gv_MonsterGalicGroup[0], UnitLastCreated());
        UnitCreate(1, "MonsterDumit2", c_unitCreateIgnorePlacement, 11, PointFromId(548), 270.0);
        gv_MonsterGalicPing1[0] = UnitLastCreated();
    }

    if ((UnitGroupCount(gv_MonsterGalicGroup[1], c_unitCountAlive) == 0)) {
        UnitCreate(1, "Inunit", c_unitCreateIgnorePlacement, 11, PointFromId(551), 225.0);
        UnitGroupAdd(gv_MonsterGalicGroup[1], UnitLastCreated());
        UnitCreate(1, "Inunit2", c_unitCreateIgnorePlacement, 11, PointFromId(552), 225.0);
        UnitGroupAdd(gv_MonsterGalicGroup[1], UnitLastCreated());
        UnitCreate(1, "Inunit2", c_unitCreateIgnorePlacement, 11, PointFromId(553), 225.0);
        UnitGroupAdd(gv_MonsterGalicGroup[1], UnitLastCreated());
        UnitCreate(1, "MonsterDumit2", c_unitCreateIgnorePlacement, 11, PointFromId(551), 270.0);
        gv_MonsterGalicPing1[1] = UnitLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterMake3_Init () {
    gt_TrMonsterMake3 = TriggerCreate("gt_TrMonsterMake3_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterMake3, 11, "MonsterMakeTimerFirstMake22");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ??????4
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterMake4_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(gv_MonsterScorpionGroup[0], c_unitCountAlive) == 0)) {
        UnitCreate(1, "Inunit5", c_unitCreateIgnorePlacement, 11, PointFromId(564), 325.0);
        UnitGroupAdd(gv_MonsterScorpionGroup[0], UnitLastCreated());
        UnitCreate(1, "Inunit4", c_unitCreateIgnorePlacement, 11, PointFromId(565), 325.0);
        UnitGroupAdd(gv_MonsterScorpionGroup[0], UnitLastCreated());
        UnitCreate(1, "Inunit4", c_unitCreateIgnorePlacement, 11, PointFromId(566), 325.0);
        UnitGroupAdd(gv_MonsterScorpionGroup[0], UnitLastCreated());
        UnitCreate(1, "MonsterDumit2", c_unitCreateIgnorePlacement, 11, PointFromId(564), 270.0);
        gv_MonsterScorpionPing1[0] = UnitLastCreated();
    }

    if ((UnitGroupCount(gv_MonsterScorpionGroup[1], c_unitCountAlive) == 0)) {
        UnitCreate(1, "Inunit5", c_unitCreateIgnorePlacement, 11, PointFromId(567), 145.0);
        UnitGroupAdd(gv_MonsterScorpionGroup[1], UnitLastCreated());
        UnitCreate(1, "Inunit4", c_unitCreateIgnorePlacement, 11, PointFromId(568), 145.0);
        UnitGroupAdd(gv_MonsterScorpionGroup[1], UnitLastCreated());
        UnitCreate(1, "Inunit4", c_unitCreateIgnorePlacement, 11, PointFromId(569), 145.0);
        UnitGroupAdd(gv_MonsterScorpionGroup[1], UnitLastCreated());
        UnitCreate(1, "MonsterDumit2", c_unitCreateIgnorePlacement, 11, PointFromId(567), 270.0);
        gv_MonsterScorpionPing1[1] = UnitLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterMake4_Init () {
    gt_TrMonsterMake4 = TriggerCreate("gt_TrMonsterMake4_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterMake4, 11, "MonsterMakeTimerFirstMake222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ??????(??????)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterMake5_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(gv_MonsterBossGroup[0], c_unitCountAlive) == 0)) {
        UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 11, PointFromId(578), 270.0);
        UnitGroupAdd(gv_MonsterBossGroup[0], UnitLastCreated());
        UnitCreate(1, "MonsterDumit3", c_unitCreateIgnorePlacement, 11, PointFromId(578), 270.0);
        gv_MonsterIceBossPing1[0] = UnitLastCreated();
    }

    if ((UnitGroupCount(gv_MonsterBossGroup[1], c_unitCountAlive) == 0)) {
        UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 11, PointFromId(579), 270.0);
        UnitGroupAdd(gv_MonsterBossGroup[1], UnitLastCreated());
        UnitCreate(1, "MonsterDumit3", c_unitCreateIgnorePlacement, 11, PointFromId(579), 270.0);
        gv_MonsterIceBossPing1[1] = UnitLastCreated();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterMake5_Init () {
    gt_TrMonsterMake5 = TriggerCreate("gt_TrMonsterMake5_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterMake5, 11, "MonsterMakeTimerFirstMake2222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBuffPickUp_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Inunit") || (UnitGetType(EventUnit()) == "Inunit5") || (UnitGetType(EventUnit()) == "SpineCrawler") || (UnitGetType(EventUnit()) == "SporeCrawler")))) {
            return false;
        }

        if (!((EventPlayer() == 11))) {
            return false;
        }

        if (!((PlayerType(libNtve_gf_KillingPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Inunit")) {
        gf_HrMonsterBuffPickUp1();
    }
    else if ((UnitGetType(EventUnit()) == "Inunit5")) {
        gf_HrMonsterBuffPickUp2();
    }
    else if ((UnitGetType(EventUnit()) == "SpineCrawler")) {
        gf_HrMonsterBuffPickUp3();
    }
    else if ((UnitGetType(EventUnit()) == "SporeCrawler")) {
        gf_HrMonsterBuffPickUp4();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBuffPickUp_Init () {
    gt_TrMonsterBuffPickUp = TriggerCreate("gt_TrMonsterBuffPickUp_Func");
    TriggerAddEventUnitDied(gt_TrMonsterBuffPickUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ?????? ???
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBuffEnd1_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_HeroBuffIng[EventPlayer()][0] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBuffEnd1_Init () {
    gt_TrMonsterBuffEnd1 = TriggerCreate("gt_TrMonsterBuffEnd1_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterBuffEnd1, c_playerAny, "HeroOkGi22232222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ?????? ???
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBuffEnd2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_HeroBuffIng[EventPlayer()][1] = 0;
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpellUp2222333222332", (TechTreeUpgradeCount(EventPlayer(), "SpellUp2222333222332", c_techCountCompleteOnly) - 2));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpellUp2222333222332222", (TechTreeUpgradeCount(EventPlayer(), "SpellUp2222333222332222", c_techCountCompleteOnly) - 2));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpellUp2222333222332222222", (TechTreeUpgradeCount(EventPlayer(), "SpellUp2222333222332222222", c_techCountCompleteOnly) - 2));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpellUp2222333222332222222222", (TechTreeUpgradeCount(EventPlayer(), "SpellUp2222333222332222222222", c_techCountCompleteOnly) - 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBuffEnd2_Init () {
    gt_TrMonsterBuffEnd2 = TriggerCreate("gt_TrMonsterBuffEnd2_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterBuffEnd2, c_playerAny, "HeroOkGi2223222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ?????? ???
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBuffEnd3_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpellUp2222333222322", (TechTreeUpgradeCount(EventPlayer(), "SpellUp2222333222322", c_techCountCompleteOnly) - 3));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpellUp222233322232", (TechTreeUpgradeCount(EventPlayer(), "SpellUp222233322232", c_techCountCompleteOnly) - 3));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpellUp2222333222323", (TechTreeUpgradeCount(EventPlayer(), "SpellUp2222333222323", c_techCountCompleteOnly) - 3));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpellUp22223332223", (TechTreeUpgradeCount(EventPlayer(), "SpellUp22223332223", c_techCountCompleteOnly) - 3));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpellUp222233322233", (TechTreeUpgradeCount(EventPlayer(), "SpellUp222233322233", c_techCountCompleteOnly) - 3));
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SpellUp2222333222333", (TechTreeUpgradeCount(EventPlayer(), "SpellUp2222333222333", c_techCountCompleteOnly) - 3));
    UnitBehaviorRemove(gv_PlayerHero[EventPlayer()], "SpellDong24", 3);
    UnitBehaviorRemove(gv_PlayerHero[EventPlayer()], "SpellDong24233", 3);
    if ((gv_SelectedCharNum[EventPlayer()] == 71)) {
        UnitBehaviorRemove(gv_PlayerHero[EventPlayer()], "Hero71Passive", 3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBuffEnd3_Init () {
    gt_TrMonsterBuffEnd3 = TriggerCreate("gt_TrMonsterBuffEnd3_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterBuffEnd3, c_playerAny, "HeroOkGi222322");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ??????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackBird1_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterBirdGroup[0], EventUnit()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(107), 8.0)) == true))) {
            return false;
        }
        if (!((gv_MonsterBirdSwitch[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterBirdSwitch[0] = true;
    if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterBirdGroup[0], 1), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterBirdGroup[0], 1)) == true)) {
        UnitBehaviorRemove(UnitGroupUnit(gv_MonsterBirdGroup[0], 1), "Notauto", 1);
    }

    UnitGroupIssueOrder(gv_MonsterBirdGroup[0], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterBirdGroup[0], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(554)), c_orderQueueAddToEnd);
    gv_MonsterBirdSwitch[0] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackBird1_Init () {
    gt_TrMonsterAttackBird1 = TriggerCreate("gt_TrMonsterAttackBird1_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackBird1, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ??????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackBird2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterBirdGroup[1], EventUnit()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(127), 8.0)) == true))) {
            return false;
        }
        if (!((gv_MonsterBirdSwitch[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterBirdSwitch[1] = true;
    if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterBirdGroup[1], 1), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterBirdGroup[1], 1)) == true)) {
        UnitBehaviorRemove(UnitGroupUnit(gv_MonsterBirdGroup[1], 1), "Notauto", 1);
    }
    UnitGroupIssueOrder(gv_MonsterBirdGroup[1], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterBirdGroup[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(555)), c_orderQueueAddToEnd);
    gv_MonsterBirdSwitch[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackBird2_Init () {
    gt_TrMonsterAttackBird2 = TriggerCreate("gt_TrMonsterAttackBird2_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackBird2, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ???????????????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackBird1_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterBirdGroup[0], EventUnit()) == true))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }
        if (!((gv_MonsterBirdSwitch[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterBirdSwitch[0] = true;
    if ((UnitGroupCount(gv_MonsterBirdGroup[0], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterBirdGroup[0], 1));
        UnitGroupIssueOrder(gv_MonsterBirdGroup[0], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(554)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterBirdSwitch[0] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackBird1_Init () {
    gt_TrMonsterBackBird1 = TriggerCreate("gt_TrMonsterBackBird1_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackBird1, null, PointFromId(107), 8.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ???????????????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackBird2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterBirdGroup[1], EventUnit()) == true))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }
        if (!((gv_MonsterBirdSwitch[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterBirdSwitch[1] = true;
    if ((UnitGroupCount(gv_MonsterBirdGroup[1], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterBirdGroup[1], 1));
        UnitGroupIssueOrder(gv_MonsterBirdGroup[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(555)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterBirdSwitch[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackBird2_Init () {
    gt_TrMonsterBackBird2 = TriggerCreate("gt_TrMonsterBackBird2_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackBird2, null, PointFromId(127), 8.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ??????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackDog1_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterDogGroup[0], EventUnit()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(132), 8.0)) == true))) {
            return false;
        }
        if (!((gv_MonsterDogSwitch[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterDogSwitch[0] = true;
    for (i = 1; i <= 4; i += 1) {
        if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterDogGroup[0], i), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterDogGroup[0], i)) == true)) {
            UnitBehaviorRemove(UnitGroupUnit(gv_MonsterDogGroup[0], i), "Notauto", 1);
        }

    }
    UnitGroupIssueOrder(gv_MonsterDogGroup[0], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterDogGroup[0], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(561)), c_orderQueueAddToEnd);
    gv_MonsterDogSwitch[0] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackDog1_Init () {
    gt_TrMonsterAttackDog1 = TriggerCreate("gt_TrMonsterAttackDog1_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackDog1, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ??????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackDog2_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterDogGroup[1], EventUnit()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(133), 8.0)) == true))) {
            return false;
        }
        if (!((gv_MonsterDogSwitch[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterDogSwitch[1] = true;
    for (i = 1; i <= 4; i += 1) {
        if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterDogGroup[1], i), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterDogGroup[1], i)) == true)) {
            UnitBehaviorRemove(UnitGroupUnit(gv_MonsterDogGroup[1], i), "Notauto", 1);
        }

    }
    UnitGroupIssueOrder(gv_MonsterDogGroup[1], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterDogGroup[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(558)), c_orderQueueAddToEnd);
    gv_MonsterDogSwitch[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackDog2_Init () {
    gt_TrMonsterAttackDog2 = TriggerCreate("gt_TrMonsterAttackDog2_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackDog2, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ???????????????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackDog1_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterDogGroup[0], EventUnit()) == true))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }
        if (!((gv_MonsterDogSwitch[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterDogSwitch[0] = true;
    if ((UnitGroupCount(gv_MonsterDogGroup[0], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[0], 1));
        UnitGroupIssueOrder(gv_MonsterDogGroup[0], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(560)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterDogGroup[0], c_unitCountAlive) == 2)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[0], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[0], 2));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[0], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(560)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[0], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(561)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterDogGroup[0], c_unitCountAlive) == 3)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[0], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[0], 2));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[0], 3));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[0], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(560)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[0], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(561)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[0], 3), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(562)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterDogGroup[0], c_unitCountAlive) == 4)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[0], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[0], 2));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[0], 3));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[0], 4));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[0], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(560)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[0], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(561)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[0], 3), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(562)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[0], 4), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(563)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterDogSwitch[0] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackDog1_Init () {
    gt_TrMonsterBackDog1 = TriggerCreate("gt_TrMonsterBackDog1_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackDog1, null, PointFromId(132), 8.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ???????????????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackDog2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterDogGroup[1], EventUnit()) == true))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }
        if (!((gv_MonsterDogSwitch[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterDogSwitch[1] = true;
    if ((UnitGroupCount(gv_MonsterDogGroup[1], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[1], 1));
        UnitGroupIssueOrder(gv_MonsterDogGroup[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(556)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterDogGroup[1], c_unitCountAlive) == 2)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[1], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[1], 2));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[1], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(556)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[1], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(557)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterDogGroup[1], c_unitCountAlive) == 3)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[1], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[1], 2));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[1], 3));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[1], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(556)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[1], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(557)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[1], 3), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(558)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterDogGroup[1], c_unitCountAlive) == 4)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[1], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[1], 2));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[1], 3));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterDogGroup[1], 4));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[1], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(556)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[1], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(557)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[1], 3), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(558)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterDogGroup[1], 4), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(559)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterDogSwitch[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackDog2_Init () {
    gt_TrMonsterBackDog2 = TriggerCreate("gt_TrMonsterBackDog2_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackDog2, null, PointFromId(133), 8.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??? ??????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackCow1_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterCowGroup[0], EventUnit()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(98), 7.0)) == true))) {
            return false;
        }
        if (!((gv_MonsterCowSwitch[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterCowSwitch[0] = true;
    for (i = 1; i <= 2; i += 1) {
        if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterCowGroup[0], i), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterCowGroup[0], i)) == true)) {
            UnitBehaviorRemove(UnitGroupUnit(gv_MonsterCowGroup[0], i), "Notauto", 1);
        }
    }

    UnitGroupIssueOrder(gv_MonsterCowGroup[0], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterCowGroup[0], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(234)), c_orderQueueAddToEnd);
    gv_MonsterCowSwitch[0] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackCow1_Init () {
    gt_TrMonsterAttackCow1 = TriggerCreate("gt_TrMonsterAttackCow1_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackCow1, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??? ??????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackCow2_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterCowGroup[1], EventUnit()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(102), 7.0)) == true))) {
            return false;
        }
        if (!((gv_MonsterCowSwitch[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterCowSwitch[1] = true;
    for (i = 1; i <= 2; i += 1) {
        if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterCowGroup[1], i), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterCowGroup[1], i)) == true)) {
            UnitBehaviorRemove(UnitGroupUnit(gv_MonsterCowGroup[1], i), "Notauto", 1);
        }
    }

    UnitGroupIssueOrder(gv_MonsterCowGroup[1], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterCowGroup[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(157)), c_orderQueueAddToEnd);
    gv_MonsterCowSwitch[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackCow2_Init () {
    gt_TrMonsterAttackCow2 = TriggerCreate("gt_TrMonsterAttackCow2_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackCow2, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??? ???????????????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackCow1_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterCowGroup[0], EventUnit()) == true))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }
        if (!((gv_MonsterCowSwitch[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterCowSwitch[0] = true;
    if ((UnitGroupCount(gv_MonsterCowGroup[0], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterCowGroup[0], 1));
        UnitGroupIssueOrder(gv_MonsterCowGroup[0], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(234)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterCowGroup[0], c_unitCountAlive) == 2)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterCowGroup[0], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterCowGroup[0], 2));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterCowGroup[0], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(214)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterCowGroup[0], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(234)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterCowSwitch[0] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackCow1_Init () {
    gt_TrMonsterBackCow1 = TriggerCreate("gt_TrMonsterBackCow1_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackCow1, null, PointFromId(98), 7.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??? ???????????????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackCow2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterCowGroup[1], EventUnit()) == true))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }
        if (!((gv_MonsterCowSwitch[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterCowSwitch[1] = true;
    if ((UnitGroupCount(gv_MonsterCowGroup[1], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterCowGroup[1], 1));
        UnitGroupIssueOrder(gv_MonsterCowGroup[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(157)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterCowGroup[1], c_unitCountAlive) == 2)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterCowGroup[1], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterCowGroup[1], 2));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterCowGroup[1], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(157)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterCowGroup[1], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(158)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterCowSwitch[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackCow2_Init () {
    gt_TrMonsterBackCow2 = TriggerCreate("gt_TrMonsterBackCow2_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackCow2, null, PointFromId(102), 7.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackGalic1_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterGalicGroup[0], EventUnit()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(134), 7.0)) == true))) {
            return false;
        }
        if (!((gv_MonsterGalicSwitch[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterGalicSwitch[0] = true;
    for (i = 1; i <= 3; i += 1) {
        if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterGalicGroup[0], i), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterGalicGroup[0], i)) == true)) {
            UnitBehaviorRemove(UnitGroupUnit(gv_MonsterGalicGroup[0], i), "Notauto", 1);
        }
    }

    UnitGroupIssueOrder(gv_MonsterGalicGroup[0], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterGalicGroup[0], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(548)), c_orderQueueAddToEnd);
    gv_MonsterGalicSwitch[0] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackGalic1_Init () {
    gt_TrMonsterAttackGalic1 = TriggerCreate("gt_TrMonsterAttackGalic1_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackGalic1, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackGalic2_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterGalicGroup[1], EventUnit()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(135), 7.0)) == true))) {
            return false;
        }
        if (!((gv_MonsterGalicSwitch[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterGalicSwitch[1] = true;
    for (i = 1; i <= 3; i += 1) {
        if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterGalicGroup[1], i), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterGalicGroup[1], i)) == true)) {
            UnitBehaviorRemove(UnitGroupUnit(gv_MonsterGalicGroup[1], i), "Notauto", 1);
        }
    }

    UnitGroupIssueOrder(gv_MonsterGalicGroup[1], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterGalicGroup[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(551)), c_orderQueueAddToEnd);
    gv_MonsterGalicSwitch[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackGalic2_Init () {
    gt_TrMonsterAttackGalic2 = TriggerCreate("gt_TrMonsterAttackGalic2_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackGalic2, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ???????????????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackGalic1_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterGalicGroup[0], EventUnit()) == true))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }
        if (!((gv_MonsterGalicSwitch[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterGalicSwitch[0] = true;
    if ((UnitGroupCount(gv_MonsterGalicGroup[0], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterGalicGroup[0], 1));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterGalicGroup[0], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(548)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterGalicGroup[0], c_unitCountAlive) == 2)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterGalicGroup[0], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterGalicGroup[0], 2));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterGalicGroup[0], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(548)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterGalicGroup[0], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(549)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterGalicGroup[0], c_unitCountAlive) == 3)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterGalicGroup[0], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterGalicGroup[0], 2));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterGalicGroup[0], 3));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterGalicGroup[0], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(548)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterGalicGroup[0], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(549)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterGalicGroup[0], 3), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(550)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterGalicSwitch[0] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackGalic1_Init () {
    gt_TrMonsterBackGalic1 = TriggerCreate("gt_TrMonsterBackGalic1_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackGalic1, null, PointFromId(134), 7.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ???????????????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackGalic2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterGalicGroup[1], EventUnit()) == true))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }
        if (!((gv_MonsterGalicSwitch[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterGalicSwitch[1] = true;
    if ((UnitGroupCount(gv_MonsterGalicGroup[1], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterGalicGroup[1], 1));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterGalicGroup[1], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(551)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterGalicGroup[1], c_unitCountAlive) == 2)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterGalicGroup[1], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterGalicGroup[1], 2));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterGalicGroup[1], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(551)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterGalicGroup[1], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(552)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterGalicGroup[1], c_unitCountAlive) == 3)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterGalicGroup[1], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterGalicGroup[1], 2));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterGalicGroup[1], 3));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterGalicGroup[1], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(551)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterGalicGroup[1], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(552)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterGalicGroup[1], 3), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(553)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterGalicSwitch[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackGalic2_Init () {
    gt_TrMonsterBackGalic2 = TriggerCreate("gt_TrMonsterBackGalic2_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackGalic2, null, PointFromId(135), 7.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ??????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackScorpion1_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterScorpionGroup[0], EventUnit()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(137), 8.0)) == true))) {
            return false;
        }
        if (!((gv_MonsterScorpionSwitch[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterScorpionSwitch[0] = true;
    for (i = 1; i <= 3; i += 1) {
        if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterScorpionGroup[0], i), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterScorpionGroup[0], i)) == true)) {
            UnitBehaviorRemove(UnitGroupUnit(gv_MonsterScorpionGroup[0], i), "Notauto", 1);
        }
    }

    UnitGroupIssueOrder(gv_MonsterScorpionGroup[0], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterScorpionGroup[0], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(564)), c_orderQueueAddToEnd);
    gv_MonsterScorpionSwitch[0] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackScorpion1_Init () {
    gt_TrMonsterAttackScorpion1 = TriggerCreate("gt_TrMonsterAttackScorpion1_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackScorpion1, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ??????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackScorpion2_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterScorpionGroup[1], EventUnit()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(138), 8.0)) == true))) {
            return false;
        }
        if (!((gv_MonsterScorpionSwitch[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterScorpionSwitch[1] = true;
    for (i = 1; i <= 3; i += 1) {
        if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterScorpionGroup[1], i), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterScorpionGroup[1], i)) == true)) {
            UnitBehaviorRemove(UnitGroupUnit(gv_MonsterScorpionGroup[1], i), "Notauto", 1);
        }
    }

    UnitGroupIssueOrder(gv_MonsterScorpionGroup[1], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterScorpionGroup[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(567)), c_orderQueueAddToEnd);
    gv_MonsterScorpionSwitch[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackScorpion2_Init () {
    gt_TrMonsterAttackScorpion2 = TriggerCreate("gt_TrMonsterAttackScorpion2_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackScorpion2, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ???????????????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackScorpion1_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterScorpionGroup[0], EventUnit()) == true))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }
        if (!((gv_MonsterScorpionSwitch[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterScorpionSwitch[0] = true;
    if ((UnitGroupCount(gv_MonsterScorpionGroup[0], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterScorpionGroup[0], 1));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterScorpionGroup[0], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(564)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterScorpionGroup[0], c_unitCountAlive) == 2)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterScorpionGroup[0], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterScorpionGroup[0], 2));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterScorpionGroup[0], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(564)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterScorpionGroup[0], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(565)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterScorpionGroup[0], c_unitCountAlive) == 3)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterScorpionGroup[0], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterScorpionGroup[0], 2));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterScorpionGroup[0], 3));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterScorpionGroup[0], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(564)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterScorpionGroup[0], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(565)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterScorpionGroup[0], 3), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(566)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterScorpionSwitch[0] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackScorpion1_Init () {
    gt_TrMonsterBackScorpion1 = TriggerCreate("gt_TrMonsterBackScorpion1_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackScorpion1, null, PointFromId(137), 8.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ???????????????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackScorpion2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterScorpionGroup[1], EventUnit()) == true))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }
        if (!((gv_MonsterScorpionSwitch[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterScorpionSwitch[1] = true;
    if ((UnitGroupCount(gv_MonsterScorpionGroup[1], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterScorpionGroup[1], 1));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterScorpionGroup[1], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(567)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterScorpionGroup[1], c_unitCountAlive) == 2)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterScorpionGroup[1], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterScorpionGroup[1], 2));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterScorpionGroup[1], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(567)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterScorpionGroup[1], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(568)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterScorpionGroup[1], c_unitCountAlive) == 3)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterScorpionGroup[1], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterScorpionGroup[1], 2));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterScorpionGroup[1], 3));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterScorpionGroup[1], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(567)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterScorpionGroup[1], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(568)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterScorpionGroup[1], 3), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(569)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterScorpionSwitch[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackScorpion2_Init () {
    gt_TrMonsterBackScorpion2 = TriggerCreate("gt_TrMonsterBackScorpion2_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackScorpion2, null, PointFromId(138), 8.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??????(???-???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackIceBug1_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterIceBugGroup[0], EventUnit()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(141), 8.0)) == true))) {
            return false;
        }
        if (!((gv_MonsterIceBugSwitch[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterIceBugSwitch[0] = true;
    for (i = 1; i <= 2; i += 1) {
        if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterIceBugGroup[0], i), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterIceBugGroup[0], i)) == true)) {
            UnitBehaviorRemove(UnitGroupUnit(gv_MonsterIceBugGroup[0], i), "Notauto", 1);
        }
    }

    UnitGroupIssueOrder(gv_MonsterIceBugGroup[0], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterIceBugGroup[0], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(570)), c_orderQueueAddToEnd);
    gv_MonsterIceBugSwitch[0] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackIceBug1_Init () {
    gt_TrMonsterAttackIceBug1 = TriggerCreate("gt_TrMonsterAttackIceBug1_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackIceBug1, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??????(???-???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackIceBug2_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterIceBugGroup[1], EventUnit()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(145), 8.0)) == true))) {
            return false;
        }
        if (!((gv_MonsterIceBugSwitch[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterIceBugSwitch[1] = true;
    for (i = 1; i <= 2; i += 1) {
        if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterIceBugGroup[1], i), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterIceBugGroup[1], i)) == true)) {
            UnitBehaviorRemove(UnitGroupUnit(gv_MonsterIceBugGroup[1], i), "Notauto", 1);
        }
    }

    UnitGroupIssueOrder(gv_MonsterIceBugGroup[1], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterIceBugGroup[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(570)), c_orderQueueAddToEnd);
    gv_MonsterIceBugSwitch[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackIceBug2_Init () {
    gt_TrMonsterAttackIceBug2 = TriggerCreate("gt_TrMonsterAttackIceBug2_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackIceBug2, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??????(??????-???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackIceBug3_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterIceBugGroup[2], EventUnit()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(146), 8.0)) == true))) {
            return false;
        }
        if (!((gv_MonsterIceBugSwitch[2] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterIceBugSwitch[2] = true;
    for (i = 1; i <= 2; i += 1) {
        if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterIceBugGroup[2], i), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterIceBugGroup[2], i)) == true)) {
            UnitBehaviorRemove(UnitGroupUnit(gv_MonsterIceBugGroup[2], i), "Notauto", 1);
        }
    }

    UnitGroupIssueOrder(gv_MonsterIceBugGroup[2], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterIceBugGroup[2], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(570)), c_orderQueueAddToEnd);
    gv_MonsterIceBugSwitch[2] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackIceBug3_Init () {
    gt_TrMonsterAttackIceBug3 = TriggerCreate("gt_TrMonsterAttackIceBug3_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackIceBug3, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??????(??????-???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackIceBug4_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterIceBugGroup[3], EventUnit()) == true))) {
            return false;
        }
        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionCircle(PointFromId(147), 8.0)) == true))) {
            return false;
        }
        if (!((gv_MonsterIceBugSwitch[3] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterIceBugSwitch[3] = true;
    for (i = 1; i <= 2; i += 1) {
        if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterIceBugGroup[3], i), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterIceBugGroup[3], i)) == true)) {
            UnitBehaviorRemove(UnitGroupUnit(gv_MonsterIceBugGroup[3], i), "Notauto", 1);
        }

    }
    UnitGroupIssueOrder(gv_MonsterIceBugGroup[3], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterIceBugGroup[3], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(570)), c_orderQueueAddToEnd);
    gv_MonsterIceBugSwitch[3] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackIceBug4_Init () {
    gt_TrMonsterAttackIceBug4 = TriggerCreate("gt_TrMonsterAttackIceBug4_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackIceBug4, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ???????????????(???-???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackIceBug1_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterIceBugGroup[0], EventUnit()) == true))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }
        if (!((gv_MonsterIceBugSwitch[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterIceBugSwitch[0] = true;
    if ((UnitGroupCount(gv_MonsterIceBugGroup[0], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterIceBugGroup[0], 1));
        UnitGroupIssueOrder(gv_MonsterIceBugGroup[0], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(570)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterIceBugGroup[0], c_unitCountAlive) == 2)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterIceBugGroup[0], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterIceBugGroup[0], 2));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterIceBugGroup[0], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(570)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterIceBugGroup[0], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(571)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterIceBugSwitch[0] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackIceBug1_Init () {
    gt_TrMonsterBackIceBug1 = TriggerCreate("gt_TrMonsterBackIceBug1_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackIceBug1, null, PointFromId(141), 8.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ???????????????(???-???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackIceBug2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterIceBugGroup[1], EventUnit()) == true))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }
        if (!((gv_MonsterIceBugSwitch[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterIceBugSwitch[1] = true;
    if ((UnitGroupCount(gv_MonsterIceBugGroup[1], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterIceBugGroup[1], 1));
        UnitGroupIssueOrder(gv_MonsterIceBugGroup[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(572)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterIceBugGroup[1], c_unitCountAlive) == 2)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterIceBugGroup[1], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterIceBugGroup[1], 2));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterIceBugGroup[1], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(572)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterIceBugGroup[1], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(573)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterIceBugSwitch[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackIceBug2_Init () {
    gt_TrMonsterBackIceBug2 = TriggerCreate("gt_TrMonsterBackIceBug2_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackIceBug2, null, PointFromId(145), 8.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ???????????????(??????-???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackIceBug3_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterIceBugGroup[2], EventUnit()) == true))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }
        if (!((gv_MonsterIceBugSwitch[2] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterIceBugSwitch[2] = true;
    if ((UnitGroupCount(gv_MonsterIceBugGroup[2], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterIceBugGroup[2], 1));
        UnitGroupIssueOrder(gv_MonsterIceBugGroup[2], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(574)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterIceBugGroup[2], c_unitCountAlive) == 2)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterIceBugGroup[2], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterIceBugGroup[2], 2));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterIceBugGroup[2], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(574)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterIceBugGroup[2], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(575)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterIceBugSwitch[2] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackIceBug3_Init () {
    gt_TrMonsterBackIceBug3 = TriggerCreate("gt_TrMonsterBackIceBug3_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackIceBug3, null, PointFromId(146), 8.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ???????????????(??????-???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackIceBug4_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterIceBugGroup[3], EventUnit()) == true))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }
        if (!((gv_MonsterIceBugSwitch[3] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterIceBugSwitch[3] = true;
    if ((UnitGroupCount(gv_MonsterIceBugGroup[3], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterIceBugGroup[3], 1));
        UnitGroupIssueOrder(gv_MonsterIceBugGroup[3], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(576)), c_orderQueueReplace);
    }
    else if ((UnitGroupCount(gv_MonsterIceBugGroup[3], c_unitCountAlive) == 2)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterIceBugGroup[3], 1));
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterIceBugGroup[3], 2));
        UnitIssueOrder(UnitGroupUnit(gv_MonsterIceBugGroup[3], 1), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(576)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupUnit(gv_MonsterIceBugGroup[3], 2), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(577)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterIceBugSwitch[3] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackIceBug4_Init () {
    gt_TrMonsterBackIceBug4 = TriggerCreate("gt_TrMonsterBackIceBug4_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackIceBug4, null, PointFromId(147), 8.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ??????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackBoss1_Func (bool testConds, bool runActions) {
    int index_in_group = 1;

    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterBossGroup[0], EventUnit()) == true))) {
            return false;
        }
        if (!((gv_MonsterIceBossSwitch[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterIceBossSwitch[0] = true;
    if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterBossGroup[0], 1), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterBossGroup[0], index_in_group)) == true)) {
        UnitBehaviorRemove(UnitGroupUnit(gv_MonsterBossGroup[0], 1), "Notauto", 1);
    }

    UnitGroupIssueOrder(gv_MonsterBossGroup[0], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterBossGroup[0], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(578)), c_orderQueueAddToEnd);
    gv_MonsterIceBossSwitch[0] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackBoss1_Init () {
    gt_TrMonsterAttackBoss1 = TriggerCreate("gt_TrMonsterAttackBoss1_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackBoss1, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ??????(??????)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterAttackBoss2_Func (bool testConds, bool runActions) {
    int index_in_group = 1;

    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }
        if (!((UnitHasBehavior(EventUnit(), "Notauto") == true))) {
            return false;
        }
        if (!((UnitGroupHasUnit(gv_MonsterBossGroup[1], EventUnit()) == true))) {
            return false;
        }
        if (!((gv_MonsterIceBossSwitch[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterIceBossSwitch[1] = true;
    if ((UnitHasBehavior(UnitGroupUnit(gv_MonsterBossGroup[1], 1), "Notauto") == true) && (UnitIsAlive(UnitGroupUnit(gv_MonsterBossGroup[1], index_in_group)) == true)) {
        UnitBehaviorRemove(UnitGroupUnit(gv_MonsterBossGroup[1], 1), "Notauto", 1);
    }

    UnitGroupIssueOrder(gv_MonsterBossGroup[1], OrderTargetingPoint(AbilityCommand("attack", 0), EventUnitDamageSourcePoint()), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_MonsterBossGroup[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(579)), c_orderQueueAddToEnd);
    gv_MonsterIceBossSwitch[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterAttackBoss2_Init () {
    gt_TrMonsterAttackBoss2 = TriggerCreate("gt_TrMonsterAttackBoss2_Func");
    TriggerAddEventUnitDamaged(gt_TrMonsterAttackBoss2, null, c_unitDamageTypeAny, c_unitDamageEither, "ToHeroDamage2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ???????????????(???)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackBoss1_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_MonsterBossGroup[0], EventUnit()) == true))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }

        if (!((gv_MonsterIceBossSwitch[0] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterIceBossSwitch[0] = true;
    if ((UnitGroupCount(gv_MonsterBossGroup[0], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterBossGroup[0], 1));
        UnitGroupIssueOrder(gv_MonsterBossGroup[0], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(578)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterIceBossSwitch[0] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackBoss1_Init () {
    gt_TrMonsterBackBoss1 = TriggerCreate("gt_TrMonsterBackBoss1_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackBoss1, null, PointFromId(148), 9.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ???????????????(??????)
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBackBoss2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((EventPlayer() == 11))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_MonsterBossGroup[1], EventUnit()) == true))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "Notauto") == false))) {
            return false;
        }

        if (!((gv_MonsterIceBossSwitch[1] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_MonsterIceBossSwitch[1] = true;
    if ((UnitGroupCount(gv_MonsterBossGroup[1], c_unitCountAlive) == 1)) {
        PlayerCreateEffectUnit(11, "ApplyIncapBehavior22222223", UnitGroupUnit(gv_MonsterBossGroup[1], 1));
        UnitGroupIssueOrder(gv_MonsterBossGroup[1], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(579)), c_orderQueueReplace);
    }

    Wait(2.0, c_timeReal);
    gv_MonsterIceBossSwitch[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBackBoss2_Init () {
    gt_TrMonsterBackBoss2 = TriggerCreate("gt_TrMonsterBackBoss2_Func");
    TriggerAddEventUnitRangePoint(gt_TrMonsterBackBoss2, null, PointFromId(149), 9.0, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ?????? ????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterRegenTimerStart_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }

        if (!((EventPlayer() == 11))) {
            return false;
        }

        if (!((((UnitGetType(EventUnit()) == "Inunit6") && (((UnitGroupCount(gv_MonsterBirdGroup[0], c_unitCountAlive) == 0) && (gv_RegenNewTimerBirdBoolean[0] == false)) || ((UnitGroupCount(gv_MonsterBirdGroup[1], c_unitCountAlive) == 0) && (gv_RegenNewTimerBirdBoolean[1] == false)))) || ((UnitGetType(EventUnit()) == "Inunit3") && (((UnitGroupCount(gv_MonsterDogGroup[0], c_unitCountAlive) == 0) && (gv_RegenNewTimerDogBoolean[0] == false)) || ((UnitGroupCount(gv_MonsterDogGroup[1], c_unitCountAlive) == 0) && (gv_RegenNewTimerDogBoolean[1] == false)))) || ((UnitGetType(EventUnit()) == "Inunit8") && (((UnitGroupCount(gv_MonsterCowGroup[0], c_unitCountAlive) == 0) && (gv_RegenNewTimerCowBoolean[0] == false)) || ((UnitGroupCount(gv_MonsterCowGroup[1], c_unitCountAlive) == 0) && (gv_RegenNewTimerCowBoolean[1] == false)))) || ((UnitGetType(EventUnit()) == "Inunit7") && (((UnitGroupCount(gv_MonsterIceBugGroup[0], c_unitCountAlive) == 0) && (gv_RegenNewTimerIceBugBoolean[0] == false)) || ((UnitGroupCount(gv_MonsterIceBugGroup[1], c_unitCountAlive) == 0) && (gv_RegenNewTimerIceBugBoolean[1] == false)) || ((UnitGroupCount(gv_MonsterIceBugGroup[2], c_unitCountAlive) == 0) && (gv_RegenNewTimerIceBugBoolean[2] == false)) || ((UnitGroupCount(gv_MonsterIceBugGroup[3], c_unitCountAlive) == 0) && (gv_RegenNewTimerIceBugBoolean[3] == false)))) || (((UnitGetType(EventUnit()) == "Inunit") || (UnitGetType(EventUnit()) == "Inunit2")) && (((UnitGroupCount(gv_MonsterGalicGroup[0], c_unitCountAlive) == 0) && (gv_RegenNewTimerGalicBoolean[0] == false)) || ((UnitGroupCount(gv_MonsterGalicGroup[1], c_unitCountAlive) == 0) && (gv_RegenNewTimerGalicBoolean[1] == false)))) || (((UnitGetType(EventUnit()) == "Inunit5") || (UnitGetType(EventUnit()) == "Inunit4")) && (((UnitGroupCount(gv_MonsterScorpionGroup[0], c_unitCountAlive) == 0) && (gv_RegenNewTimerScorpionBoolean[0] == false)) || ((UnitGroupCount(gv_MonsterScorpionGroup[1], c_unitCountAlive) == 0) && (gv_RegenNewTimerScorpionBoolean[1] == false)))) || (((UnitGetType(EventUnit()) == "SpineCrawler") || (UnitGetType(EventUnit()) == "SporeCrawler")) && (((UnitGroupCount(gv_MonsterBossGroup[0], c_unitCountAlive) == 0) && (gv_RegenNewTimerIceBossBoolean[0] == false)) || ((UnitGroupCount(gv_MonsterBossGroup[1], c_unitCountAlive) == 0) && (gv_RegenNewTimerIceBossBoolean[1] == false))))))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Inunit6")) {
        gf_HrMonsterBirdRegenTimerStart();
    }
    else if ((UnitGetType(EventUnit()) == "Inunit3")) {
        gf_HrMonsterDogRegenTimerStart();
    }
    else if ((UnitGetType(EventUnit()) == "Inunit8")) {
        gf_HrMonsterCowRegenTimerStart();
    }
    else if ((UnitGetType(EventUnit()) == "Inunit7")) {
        gf_HrMonsterIceBugRegenTimerStart();
    }
    else if (((UnitGetType(EventUnit()) == "Inunit") || (UnitGetType(EventUnit()) == "Inunit2"))) {
        gf_HrMonsterGarlicRegenTimerStart();
    }
    else if (((UnitGetType(EventUnit()) == "Inunit5") || (UnitGetType(EventUnit()) == "Inunit4"))) {
        gf_HrMonsterScorpionRegenTimerStart();
    }
    else if (((UnitGetType(EventUnit()) == "SpineCrawler") || (UnitGetType(EventUnit()) == "SporeCrawler"))) {
        gf_HrMonsterBossRegenTimerStart();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterRegenTimerStart_Init () {
    gt_TrMonsterRegenTimerStart = TriggerCreate("gt_TrMonsterRegenTimerStart_Func");
    TriggerAddEventUnitDied(gt_TrMonsterRegenTimerStart, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterBirdRegen_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(554))) {
        gv_RegenNewTimerBirdBoolean[0] = false;
        if ((UnitGroupCount(gv_MonsterBirdGroup[0], c_unitCountAlive) == 0)) {
            UnitCreate(1, "Inunit6", c_unitCreateIgnorePlacement, 11, PointFromId(554), 270.0);
            UnitGroupAdd(gv_MonsterBirdGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking23223", 11, gv_RegenNewTimerBirdStrong[0]);
            UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(554), 270.0);
            gv_MonsterBirdPing1[0] = UnitLastCreated();
        }
    }
    else if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(555))) {
        gv_RegenNewTimerBirdBoolean[1] = false;
        if ((UnitGroupCount(gv_MonsterBirdGroup[1], c_unitCountAlive) == 0)) {
            UnitCreate(1, "Inunit6", c_unitCreateIgnorePlacement, 11, PointFromId(555), 90.0);
            UnitGroupAdd(gv_MonsterBirdGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking23223", 11, gv_RegenNewTimerBirdStrong[1]);
            UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(555), 270.0);
            gv_MonsterBirdPing1[1] = UnitLastCreated();
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterBirdRegen_Init () {
    gt_TrMonsterBirdRegen = TriggerCreate("gt_TrMonsterBirdRegen_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterBirdRegen, 11, "MonsterMakeTimerG2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterDogRegen_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(560))) {
        gv_RegenNewTimerDogBoolean[0] = false;
        if ((UnitGroupCount(gv_MonsterDogGroup[0], c_unitCountAlive) == 0)) {
            UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(560), 250.0);
            UnitGroupAdd(gv_MonsterDogGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232232", 11, gv_RegenNewTimerDogStrong[0]);
            UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(561), 260.0);
            UnitGroupAdd(gv_MonsterDogGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232232", 11, gv_RegenNewTimerDogStrong[0]);
            UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(562), 280.0);
            UnitGroupAdd(gv_MonsterDogGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232232", 11, gv_RegenNewTimerDogStrong[0]);
            UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(563), 290.0);
            UnitGroupAdd(gv_MonsterDogGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232232", 11, gv_RegenNewTimerDogStrong[0]);
            UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(561), 270.0);
            gv_MonsterDogPing1[0] = UnitLastCreated();
        }

    }
    else if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(556))) {
        gv_RegenNewTimerDogBoolean[1] = false;
        if ((UnitGroupCount(gv_MonsterDogGroup[1], c_unitCountAlive) == 0)) {
            UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(556), 110.0);
            UnitGroupAdd(gv_MonsterDogGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232232", 11, gv_RegenNewTimerDogStrong[1]);
            UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(557), 100.0);
            UnitGroupAdd(gv_MonsterDogGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232232", 11, gv_RegenNewTimerDogStrong[1]);
            UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(558), 80.0);
            UnitGroupAdd(gv_MonsterDogGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232232", 11, gv_RegenNewTimerDogStrong[1]);
            UnitCreate(1, "Inunit3", c_unitCreateIgnorePlacement, 11, PointFromId(559), 70.0);
            UnitGroupAdd(gv_MonsterDogGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232232", 11, gv_RegenNewTimerDogStrong[1]);
            UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(558), 270.0);
            gv_MonsterDogPing1[1] = UnitLastCreated();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterDogRegen_Init () {
    gt_TrMonsterDogRegen = TriggerCreate("gt_TrMonsterDogRegen_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterDogRegen, 11, "MonsterMakeTimerG22");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterCowRegen_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(214))) {
        gv_RegenNewTimerCowBoolean[0] = false;
        if ((UnitGroupCount(gv_MonsterCowGroup[0], c_unitCountAlive) == 0)) {
            UnitCreate(1, "Inunit8", c_unitCreateIgnorePlacement, 11, PointFromId(214), 360.0);
            UnitGroupAdd(gv_MonsterCowGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking2322322", 11, gv_RegenNewTimerCowStrong[0]);
            UnitCreate(1, "Inunit8", c_unitCreateIgnorePlacement, 11, PointFromId(234), 360.0);
            UnitGroupAdd(gv_MonsterCowGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking2322322", 11, gv_RegenNewTimerCowStrong[0]);
            UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(234), 270.0);
            gv_MonsterCowPing1[0] = UnitLastCreated();
        }

    }
    else if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(157))) {
        gv_RegenNewTimerCowBoolean[1] = false;
        if ((UnitGroupCount(gv_MonsterCowGroup[1], c_unitCountAlive) == 0)) {
            UnitCreate(1, "Inunit8", c_unitCreateIgnorePlacement, 11, PointFromId(157), 180.0);
            UnitGroupAdd(gv_MonsterCowGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking2322322", 11, gv_RegenNewTimerCowStrong[1]);
            UnitCreate(1, "Inunit8", c_unitCreateIgnorePlacement, 11, PointFromId(158), 180.0);
            UnitGroupAdd(gv_MonsterCowGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking2322322", 11, gv_RegenNewTimerCowStrong[1]);
            UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(157), 270.0);
            gv_MonsterCowPing1[1] = UnitLastCreated();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterCowRegen_Init () {
    gt_TrMonsterCowRegen = TriggerCreate("gt_TrMonsterCowRegen_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterCowRegen, 11, "MonsterMakeTimerG23");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterGalicRegen_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(548))) {
        gv_RegenNewTimerGalicBoolean[0] = false;
        if ((UnitGroupCount(gv_MonsterGalicGroup[0], c_unitCountAlive) == 0)) {
            UnitCreate(1, "Inunit", c_unitCreateIgnorePlacement, 11, PointFromId(548), 45.0);
            UnitGroupAdd(gv_MonsterGalicGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232232222", 11, gv_RegenNewTimerGalicStrong[0]);
            UnitCreate(1, "Inunit2", c_unitCreateIgnorePlacement, 11, PointFromId(549), 45.0);
            UnitGroupAdd(gv_MonsterGalicGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking2322322222", 11, gv_RegenNewTimerGalicStrong[0]);
            UnitCreate(1, "Inunit2", c_unitCreateIgnorePlacement, 11, PointFromId(550), 45.0);
            UnitGroupAdd(gv_MonsterGalicGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking2322322222", 11, gv_RegenNewTimerGalicStrong[0]);
            UnitCreate(1, "MonsterDumit2", c_unitCreateIgnorePlacement, 11, PointFromId(548), 270.0);
            gv_MonsterGalicPing1[0] = UnitLastCreated();
        }
    }
    else if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(551))) {
        gv_RegenNewTimerGalicBoolean[1] = false;
        if ((UnitGroupCount(gv_MonsterGalicGroup[1], c_unitCountAlive) == 0)) {
            UnitCreate(1, "Inunit", c_unitCreateIgnorePlacement, 11, PointFromId(551), 225.0);
            UnitGroupAdd(gv_MonsterGalicGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232232222", 11, gv_RegenNewTimerGalicStrong[1]);
            UnitCreate(1, "Inunit2", c_unitCreateIgnorePlacement, 11, PointFromId(552), 225.0);
            UnitGroupAdd(gv_MonsterGalicGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking2322322222", 11, gv_RegenNewTimerGalicStrong[1]);
            UnitCreate(1, "Inunit2", c_unitCreateIgnorePlacement, 11, PointFromId(553), 225.0);
            UnitGroupAdd(gv_MonsterGalicGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking2322322222", 11, gv_RegenNewTimerGalicStrong[1]);
            UnitCreate(1, "MonsterDumit2", c_unitCreateIgnorePlacement, 11, PointFromId(551), 270.0);
            gv_MonsterGalicPing1[1] = UnitLastCreated();
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterGalicRegen_Init () {
    gt_TrMonsterGalicRegen = TriggerCreate("gt_TrMonsterGalicRegen_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterGalicRegen, 11, "MonsterMakeTimerG2322");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterScorpionRegen_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(564))) {
        gv_RegenNewTimerScorpionBoolean[0] = false;
        if ((UnitGroupCount(gv_MonsterScorpionGroup[0], c_unitCountAlive) == 0)) {
            UnitCreate(1, "Inunit5", c_unitCreateIgnorePlacement, 11, PointFromId(564), 325.0);
            UnitGroupAdd(gv_MonsterScorpionGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking23223222222", 11, gv_RegenNewTimerScorpionStrong[0]);
            UnitCreate(1, "Inunit4", c_unitCreateIgnorePlacement, 11, PointFromId(565), 325.0);
            UnitGroupAdd(gv_MonsterScorpionGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232232222222", 11, gv_RegenNewTimerScorpionStrong[0]);
            UnitCreate(1, "Inunit4", c_unitCreateIgnorePlacement, 11, PointFromId(566), 325.0);
            UnitGroupAdd(gv_MonsterScorpionGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232232222222", 11, gv_RegenNewTimerScorpionStrong[0]);
            UnitCreate(1, "MonsterDumit2", c_unitCreateIgnorePlacement, 11, PointFromId(564), 270.0);
            gv_MonsterScorpionPing1[0] = UnitLastCreated();
        }
    }
    else if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(567))) {
        gv_RegenNewTimerScorpionBoolean[1] = false;
        if ((UnitGroupCount(gv_MonsterScorpionGroup[1], c_unitCountAlive) == 0)) {
            UnitCreate(1, "Inunit5", c_unitCreateIgnorePlacement, 11, PointFromId(567), 315.0);
            UnitGroupAdd(gv_MonsterScorpionGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking23223222222", 11, gv_RegenNewTimerScorpionStrong[1]);
            UnitCreate(1, "Inunit4", c_unitCreateIgnorePlacement, 11, PointFromId(568), 315.0);
            UnitGroupAdd(gv_MonsterScorpionGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232232222222", 11, gv_RegenNewTimerScorpionStrong[1]);
            UnitCreate(1, "Inunit4", c_unitCreateIgnorePlacement, 11, PointFromId(569), 315.0);
            UnitGroupAdd(gv_MonsterScorpionGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232232222222", 11, gv_RegenNewTimerScorpionStrong[1]);
            UnitCreate(1, "MonsterDumit2", c_unitCreateIgnorePlacement, 11, PointFromId(567), 270.0);
            gv_MonsterScorpionPing1[1] = UnitLastCreated();
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterScorpionRegen_Init () {
    gt_TrMonsterScorpionRegen = TriggerCreate("gt_TrMonsterScorpionRegen_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterScorpionRegen, 11, "MonsterMakeTimerG23222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterIceBugRegen_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(570))) {
        gv_RegenNewTimerIceBugBoolean[0] = false;
        if ((UnitGroupCount(gv_MonsterIceBugGroup[0], c_unitCountAlive) == 0)) {
            UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(570), 315.0);
            UnitGroupAdd(gv_MonsterIceBugGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking23223222", 11, gv_RegenNewTimerIceBugStrong[0]);
            UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(571), 315.0);
            UnitGroupAdd(gv_MonsterIceBugGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking23223222", 11, gv_RegenNewTimerIceBugStrong[0]);
            UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(570), 270.0);
            gv_MonsterIceBugPing1[0] = UnitLastCreated();
        }

    }
    else if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(573))) {
        gv_RegenNewTimerIceBugBoolean[1] = false;
        if ((UnitGroupCount(gv_MonsterIceBugGroup[1], c_unitCountAlive) == 0)) {
            UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(572), 225.0);
            UnitGroupAdd(gv_MonsterIceBugGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking23223222", 11, gv_RegenNewTimerIceBugStrong[1]);
            UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(573), 225.0);
            UnitGroupAdd(gv_MonsterIceBugGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking23223222", 11, gv_RegenNewTimerIceBugStrong[1]);
            UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(573), 270.0);
            gv_MonsterIceBugPing1[1] = UnitLastCreated();
        }

    }
    else if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(574))) {
        gv_RegenNewTimerIceBugBoolean[2] = false;
        if ((UnitGroupCount(gv_MonsterIceBugGroup[2], c_unitCountAlive) == 0)) {
            UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(574), 45.0);
            UnitGroupAdd(gv_MonsterIceBugGroup[2], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking23223222", 11, gv_RegenNewTimerIceBugStrong[2]);
            UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(575), 45.0);
            UnitGroupAdd(gv_MonsterIceBugGroup[2], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking23223222", 11, gv_RegenNewTimerIceBugStrong[2]);
            UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(574), 270.0);
            gv_MonsterIceBugPing1[2] = UnitLastCreated();
        }

    }
    else if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(577))) {
        gv_RegenNewTimerIceBugBoolean[3] = false;
        if ((UnitGroupCount(gv_MonsterIceBugGroup[3], c_unitCountAlive) == 0)) {
            UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(576), 135.0);
            UnitGroupAdd(gv_MonsterIceBugGroup[3], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking23223222", 11, gv_RegenNewTimerIceBugStrong[3]);
            UnitCreate(1, "Inunit7", c_unitCreateIgnorePlacement, 11, PointFromId(577), 135.0);
            UnitGroupAdd(gv_MonsterIceBugGroup[3], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking23223222", 11, gv_RegenNewTimerIceBugStrong[3]);
            UnitCreate(1, "MonsterDumit", c_unitCreateIgnorePlacement, 11, PointFromId(577), 270.0);
            gv_MonsterIceBugPing1[3] = UnitLastCreated();
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterIceBugRegen_Init () {
    gt_TrMonsterIceBugRegen = TriggerCreate("gt_TrMonsterIceBugRegen_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterIceBugRegen, 11, "MonsterMakeTimerG232");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrMonsterIceBossRegen_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(578))) {
        gv_RegenNewTimerIceBossBoolean[0] = false;
        if ((UnitGroupCount(gv_MonsterBossGroup[0], c_unitCountAlive) == 0)) {
            UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 11, PointFromId(578), 270.0);
            UnitGroupAdd(gv_MonsterBossGroup[0], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking2322332", 11, gv_RegenNewTimerIceBossStrong[0]);
            gv_MonsterKillOnlyOne[0] = false;
            UnitCreate(1, "MonsterDumit3", c_unitCreateIgnorePlacement, 11, PointFromId(578), 270.0);
            gv_MonsterIceBossPing1[0] = UnitLastCreated();
        }

    }
    else if ((EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(579))) {
        gv_RegenNewTimerIceBossBoolean[1] = false;
        if ((UnitGroupCount(gv_MonsterBossGroup[1], c_unitCountAlive) == 0)) {
            UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 11, PointFromId(579), 270.0);
            UnitGroupAdd(gv_MonsterBossGroup[1], UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PhotonAttacking232233", 11, gv_RegenNewTimerIceBossStrong[0]);
            gv_MonsterKillOnlyOne[1] = false;
            UnitCreate(1, "MonsterDumit3", c_unitCreateIgnorePlacement, 11, PointFromId(579), 270.0);
            gv_MonsterIceBossPing1[1] = UnitLastCreated();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrMonsterIceBossRegen_Init () {
    gt_TrMonsterIceBossRegen = TriggerCreate("gt_TrMonsterIceBossRegen_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrMonsterIceBossRegen, 11, "MonsterMakeTimerG232222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ????????????(?????? ??????)
//--------------------------------------------------------------------------------------------------
bool gt_TrBuildingDestroyMoojuck_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!(((EventPlayer() == 12) || (EventPlayer() == 13)))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == 12) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(66.5, 105.5))) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(116), false);
    }
    else if ((EventPlayer() == 12) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(66.5, 53.5))) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(115), false);
    }
    else if ((EventPlayer() == 13) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(141.5, 105.5))) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(117), false);
    }
    else if ((EventPlayer() == 13) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(141.5, 53.5))) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(118), false);
    }
    else if ((EventPlayer() == 12) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(50.5, 97.5))) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(111), false);
    }
    else if ((EventPlayer() == 12) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(50.5, 61.5))) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(110), false);
    }
    else if ((EventPlayer() == 13) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(157.5, 97.5))) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(114), false);
    }
    else if ((EventPlayer() == 13) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(157.5, 61.5))) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(113), false);
    }
    else if ((EventPlayer() == 12) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(82.5, 113.5))) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(131), false);
    }
    else if ((EventPlayer() == 12) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(82.5, 45.5))) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(712), false);
    }
    else if ((EventPlayer() == 13) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(125.5, 113.5))) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(128), false);
    }
    else if ((EventPlayer() == 13) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(125.5, 45.5))) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(713), false);
    }

    if ((EventPlayer() == 12)) {
        UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/554903D0") + TextWithColor(StringExternal("Param/Value/D7C5D449"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/4389ADE9") + StringExternal("Param/Value/4B35A0A9")));
        UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/33F64C5F") + StringExternal("Param/Value/5C0DE2AD") + TextWithColor(StringExternal("Param/Value/7BD6DAF3"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/758A5E38") + StringExternal("Param/Value/88EAA7E1")));
        UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaSubtitle, (StringExternal("Param/Value/4E4FC1AD") + TextWithColor(StringExternal("Param/Value/D1BDDFA4"), Color(0.00, 87.45, 100.00)) + StringExternal("Param/Value/D37FBC4E")));
        for (i = 5; i <= 8; i += 1) {
            if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(gv_PlayerBayul[i], c_playerPropMinerals, c_playerPropOperAdd, 125);
            }

        }
    }
    else if ((EventPlayer() == 13)) {
        UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/9FC8ECA9") + StringExternal("Param/Value/B6D5F31F") + TextWithColor(StringExternal("Param/Value/AFC7623E"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/EE0053EA") + StringExternal("Param/Value/4C324B50")));
        UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/57A7370D") + TextWithColor(StringExternal("Param/Value/4B04EABB"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/19160477") + StringExternal("Param/Value/F6B86899")));
        UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaSubtitle, (StringExternal("Param/Value/60AE3D8B") + TextWithColor(StringExternal("Param/Value/CB5ACB70"), Color(0.00, 87.45, 100.00)) + StringExternal("Param/Value/97116942")));
        for (i = 1; i <= 4; i += 1) {
            if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(gv_PlayerBayul[i], c_playerPropMinerals, c_playerPropOperAdd, 125);
            }
        }
    }
    if ((EventPlayer() == 12) && (UnitGroupCount(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("FleetBeacon", 12, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 2)) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(109), false);
    }
    else if ((EventPlayer() == 13) && (UnitGroupCount(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("FleetBeacon", 13, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 2)) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(112), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrBuildingDestroyMoojuck_Init () {
    gt_TrBuildingDestroyMoojuck = TriggerCreate("gt_TrBuildingDestroyMoojuck_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrBuildingDestroyMoojuck, c_playerAny, "HeroOkGi42");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ????????? ????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrSinhoBuildingReviveTimerStart_Func (bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == 12) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(48.5, 94.5))) {
        PlayerCreateEffectPoint(12, "FleetBaeconRegenG", Point(48.5, 94.5));
    }
    else if ((EventPlayer() == 12) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(48.5, 64.5))) {
        PlayerCreateEffectPoint(12, "FleetBaeconRegenG", Point(48.5, 64.5));
    }
    else if ((EventPlayer() == 13) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(159.5, 94.5))) {
        PlayerCreateEffectPoint(13, "FleetBaeconRegenG", Point(159.5, 94.5));
    }
    else if ((EventPlayer() == 13) && (EventPlayerEffectUsedPoint(c_effectLocationSourcePoint) == Point(159.5, 64.5))) {
        PlayerCreateEffectPoint(13, "FleetBaeconRegenG", Point(159.5, 64.5));
    }

    if ((EventPlayer() == 12)) {
        UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/D883BAF6") + TextWithColor(StringExternal("Param/Value/233EBE34"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/3BD40790") + StringExternal("Param/Value/9A8717D9")));
        UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/2AAB09B3") + StringExternal("Param/Value/AE6F4A0E") + TextWithColor(StringExternal("Param/Value/9043322D"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/11E48D90") + StringExternal("Param/Value/8B4C8174")));
        if ((UnitGroupCount(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2)) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), false);
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 2), false);
        }
        else if ((UnitGroupCount(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), false);
        }
    }
    else if ((EventPlayer() == 13)) {
        UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/DC8D25DF") + StringExternal("Param/Value/7C2C1533") + TextWithColor(StringExternal("Param/Value/438D9005"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/60A29C26") + StringExternal("Param/Value/13F499C4")));
        UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/F57284C2") + TextWithColor(StringExternal("Param/Value/4CA705AC"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/8F492D0A") + StringExternal("Param/Value/96E73B87")));
        if ((UnitGroupCount(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2)) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), false);
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 2), false);
        }
        else if ((UnitGroupCount(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), false);
        }
    }

    if ((EventPlayer() == 12) && (UnitGroupCount(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("FleetBeacon", 12, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 2)) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(109), false);
    }
    else if ((EventPlayer() == 13) && (UnitGroupCount(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("FleetBeacon", 13, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 2)) {
        libNtve_gf_MakeUnitInvulnerable(UnitFromId(112), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSinhoBuildingReviveTimerStart_Init () {
    gt_TrSinhoBuildingReviveTimerStart = TriggerCreate("gt_TrSinhoBuildingReviveTimerStart_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrSinhoBuildingReviveTimerStart, 12, "HeroOkGi4");
    TriggerAddEventPlayerEffectUsed(gt_TrSinhoBuildingReviveTimerStart, 13, "HeroOkGi4");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ?????????
//--------------------------------------------------------------------------------------------------
bool gt_TrSinhoBuildingRevive_Func (bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == 12) && (EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == Point(48.5, 94.5))) {
        SoundPlay(SoundLink("UI_TransmissionStart", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/74C97010") + TextWithColor(StringExternal("Param/Value/8FC032A7"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/86D47115") + StringExternal("Param/Value/D4D2F8EC")));
        UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/D90377DA") + StringExternal("Param/Value/DD679A31") + TextWithColor(StringExternal("Param/Value/341F376D"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/4E2EB84D") + StringExternal("Param/Value/A05D630F")));
        Wait(10.0, c_timeReal);
        UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/466E0963") + TextWithColor(StringExternal("Param/Value/20D5B31B"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/A8AA38A9") + StringExternal("Param/Value/BB72122A")));
        UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/AEE63BFA") + StringExternal("Param/Value/A6DA1DA9") + TextWithColor(StringExternal("Param/Value/D9A14FC4"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/48755640") + StringExternal("Param/Value/692DFDC9")));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FleetBeacon", c_unitCreateIgnorePlacement, 12, Point(48.5, 94.5));
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        if ((UnitGroupCount(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2) && (UnitGroupCount(UnitGroup("FleetBeacon", 12, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2)) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), true);
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 2), true);
        }
        else if ((UnitGroupCount(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) && (UnitGroupCount(UnitGroup("FleetBeacon", 12, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2)) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), true);
        }

        if ((UnitGroupCount(UnitGroup("FleetBeacon", 12, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2)) {
            libNtve_gf_MakeUnitInvulnerable(UnitFromId(109), true);
        }

    }
    else if ((EventPlayer() == 12) && (EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == Point(48.5, 64.5))) {
        SoundPlay(SoundLink("UI_TransmissionStart", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/24AB9FBB") + TextWithColor(StringExternal("Param/Value/E1F65C19"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/6B4768CF") + StringExternal("Param/Value/58A21422")));
        UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/C5CBF063") + StringExternal("Param/Value/EF2C7C37") + TextWithColor(StringExternal("Param/Value/39404D05"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/E0992432") + StringExternal("Param/Value/A8A7F12D")));
        Wait(10.0, c_timeReal);
        UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/BB958EA7") + TextWithColor(StringExternal("Param/Value/E6BFDC6F"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/1B6F91D7") + StringExternal("Param/Value/DD612E62")));
        UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/A8EDCDC8") + StringExternal("Param/Value/47709144") + TextWithColor(StringExternal("Param/Value/B5795E82"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/19C53978") + StringExternal("Param/Value/A417CEB4")));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FleetBeacon", c_unitCreateIgnorePlacement, 12, Point(48.5, 64.5));
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        if ((UnitGroupCount(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2) && (UnitGroupCount(UnitGroup("FleetBeacon", 12, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2)) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), true);
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 2), true);
        }
        else if ((UnitGroupCount(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) && (UnitGroupCount(UnitGroup("FleetBeacon", 12, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2)) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 12, RegionCircle(PointFromId(293), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), true);
        }

        if ((UnitGroupCount(UnitGroup("FleetBeacon", 12, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2)) {
            libNtve_gf_MakeUnitInvulnerable(UnitFromId(109), true);
        }

    }
    else if ((EventPlayer() == 13) && (EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == Point(159.5, 94.5))) {
        SoundPlay(SoundLink("UI_TransmissionStart", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/509F60A9") + TextWithColor(StringExternal("Param/Value/EE1163E4"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/E2ACBF00") + StringExternal("Param/Value/C214E262")));
        UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/1C529DC2") + StringExternal("Param/Value/74290F19") + TextWithColor(StringExternal("Param/Value/E9BE5F3D"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/626ED85D") + StringExternal("Param/Value/16953F6A")));
        Wait(10.0, c_timeReal);
        UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/7964C599") + TextWithColor(StringExternal("Param/Value/1909E8DA"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/CB218ED9") + StringExternal("Param/Value/F27F9CD7")));
        UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/C97DEA3B") + StringExternal("Param/Value/8BDF95CB") + TextWithColor(StringExternal("Param/Value/5085E4B2"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/58BE1C2A") + StringExternal("Param/Value/CAC49F91")));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FleetBeacon", c_unitCreateIgnorePlacement, 13, Point(159.5, 94.5));
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        if ((UnitGroupCount(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2) && (UnitGroupCount(UnitGroup("FleetBeacon", 13, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2)) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), true);
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 2), true);
        }
        else if ((UnitGroupCount(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) && (UnitGroupCount(UnitGroup("FleetBeacon", 13, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2)) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), true);
        }

        if ((UnitGroupCount(UnitGroup("FleetBeacon", 13, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2)) {
            libNtve_gf_MakeUnitInvulnerable(UnitFromId(112), true);
        }

    }
    else if ((EventPlayer() == 13) && (EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == Point(159.5, 64.5))) {
        SoundPlay(SoundLink("UI_TransmissionStart", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/74D03530") + TextWithColor(StringExternal("Param/Value/E47B9ADD"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/58152283") + StringExternal("Param/Value/DA6E0B72")));
        UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/9CF2DE13") + StringExternal("Param/Value/4A4818D9") + TextWithColor(StringExternal("Param/Value/DF335561"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/0275C334") + StringExternal("Param/Value/920B88D8")));
        Wait(10.0, c_timeReal);
        UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/4C21F8DE") + TextWithColor(StringExternal("Param/Value/0532123E"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/4478E34D") + StringExternal("Param/Value/EABB4FA4")));
        UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/DF06825F") + StringExternal("Param/Value/05A062EB") + TextWithColor(StringExternal("Param/Value/4DC4748C"), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/FF0A82EE") + StringExternal("Param/Value/53E8D3ED")));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FleetBeacon", c_unitCreateIgnorePlacement, 13, Point(159.5, 64.5));
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
        if ((UnitGroupCount(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2) && (UnitGroupCount(UnitGroup("FleetBeacon", 13, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2)) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), true);
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 2), true);
        }
        else if ((UnitGroupCount(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) && (UnitGroupCount(UnitGroup("FleetBeacon", 13, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2)) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupUnit(UnitGroup("PhotonCannon", 13, RegionCircle(PointFromId(266), 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), true);
        }

        if ((UnitGroupCount(UnitGroup("FleetBeacon", 13, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 2)) {
            libNtve_gf_MakeUnitInvulnerable(UnitFromId(112), true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSinhoBuildingRevive_Init () {
    gt_TrSinhoBuildingRevive = TriggerCreate("gt_TrSinhoBuildingRevive_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrSinhoBuildingRevive, 12, "FleetBaeconRegenG2");
    TriggerAddEventPlayerEffectUsed(gt_TrSinhoBuildingRevive, 13, "FleetBaeconRegenG2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHeroDeath_Func (bool testConds, bool runActions) {
    int bounty;
    int killing_player;

    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((EventUnit() == gv_PlayerHero[EventPlayer()]))) {
            return false;
        }
        if (!((gv_HeroDeathBoolean[EventPlayer()] == false))) {
            return false;
        }
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_HeroDeathBoolean[EventPlayer()] = true;
    if ((UnitGetType(EventUnit()) == "Hero19")) {
        libNtve_gf_MakeUnitInvulnerable(gv_PlayerHero[EventPlayer()], true);
        UnitRevive(gv_PlayerHero[EventPlayer()]);
        UnitBehaviorAdd(gv_PlayerHero[EventPlayer()], "Hero19Passive", gv_PlayerHero[EventPlayer()], 1);
        UnitSetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropEnergyPercent, 100.0);
        UnitClearSelection(EventPlayer());
        UnitSelect(gv_PlayerHero[EventPlayer()], EventPlayer(), true);
    }

    Wait(0.05, c_timeReal);
    if ((PlayerType(libNtve_gf_KillingPlayer()) == c_playerTypeUser)) {
        killing_player = libNtve_gf_KillingPlayer();
    }
    else if ((PlayerType(libNtve_gf_KillingPlayer()) == c_playerTypeHostile) && (PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
        if ((PlayerStatus(gv_PlayerBayul[5]) == c_playerStatusActive) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist32223") == true)) {
            killing_player = gv_PlayerBayul[5];
        }
        else if ((PlayerStatus(gv_PlayerBayul[6]) == c_playerStatusActive) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist322223") == true)) {
            killing_player = gv_PlayerBayul[6];
        }
        else if ((PlayerStatus(gv_PlayerBayul[7]) == c_playerStatusActive) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist3222223") == true)) {
            killing_player = gv_PlayerBayul[7];
        }
        else if ((PlayerStatus(gv_PlayerBayul[8]) == c_playerStatusActive) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist32222222") == true)) {
                killing_player = gv_PlayerBayul[8];
            }
        else {
            killing_player = 13;
        }
    }
    else if ((PlayerType(libNtve_gf_KillingPlayer()) == c_playerTypeHostile) && (PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true)) {
        if ((PlayerStatus(gv_PlayerBayul[1]) == c_playerStatusActive) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist4") == true)) {
            killing_player = gv_PlayerBayul[1];
        }
        else if ((PlayerStatus(gv_PlayerBayul[2]) == c_playerStatusActive) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist33") == true)) {
            killing_player = gv_PlayerBayul[2];
        }
        else if ((PlayerStatus(gv_PlayerBayul[3]) == c_playerStatusActive) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist323") == true)) {
            killing_player = gv_PlayerBayul[3];
        }
        else if ((PlayerStatus(gv_PlayerBayul[4]) == c_playerStatusActive) && (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist3223") == true)) {
            killing_player = gv_PlayerBayul[4];
        } else {
            killing_player = 12;
        }
    }
    else {
        killing_player = libNtve_gf_KillingPlayer();
    }

    gv_HeroKillPlayer[EventPlayer()] = killing_player;
    if (((gv_HeroBuffIng[EventPlayer()][0] >= 1) || (gv_HeroBuffIng[EventPlayer()][1] >= 1))) {
        gf_HrHeroBuffPut();
    }

    if (((gv_SelectedCharNum[EventPlayer()] == 24) || (gv_SelectedCharNum[EventPlayer()] == 54))) {
        gf_HrHeroSkillIncreaseEffect2();
    }

    if ((gv_HeroFirstKill == false) && (PlayerType(killing_player) == c_playerTypeUser)) {
        gv_HeroFirstKill = true;
        gv_HeroNonStopKill[killing_player] += 1;
        UnitBehaviorAdd(gv_PlayerHero[killing_player], "PlayerGKill2", gv_PlayerHero[killing_player], 1);
        SoundPlay(SoundLink("SystemSound", -1), PlayerGroupAll(), 200.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/05F62168") + TextWithColor(StringExternal("Param/Value/30CA022A"), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/483452C5")));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/F0789BD4") + TextWithColor(PlayerName(killing_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(killing_player, false))) + StringExternal("Param/Value/B26CD418") + TextWithColor(UnitTypeGetName(UnitGetType(gv_PlayerHero[killing_player])), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/461FD990") + StringExternal("Param/Value/1EE0001D") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/20DC55D5") + TextWithColor(UnitTypeGetName(UnitGetType(gv_PlayerHero[EventPlayer()])), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/3667E8C1") + StringExternal("Param/Value/E3F67346")));
        UnitBehaviorAdd(gv_PlayerHero[killing_player], "PlayerGKill", gv_PlayerHero[killing_player], 1);
        bounty += 100;
    }
    else if ((gv_HeroFirstKill == true) && (PlayerType(killing_player) == c_playerTypeUser)) {
        gv_HeroNonStopKill[killing_player] += 1;
        UnitBehaviorAdd(gv_PlayerHero[killing_player], "PlayerGKill2", gv_PlayerHero[killing_player], 1);
        if ((gv_HeroNonStopKill[killing_player] >= 2) && (gv_HeroDeathBoolean[killing_player] == false)) {
            gf_HrHeroAddKillMessage();
        } else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/CC7197B9") + TextWithColor(PlayerName(killing_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(killing_player, false))) + StringExternal("Param/Value/6EFE0FE7") + TextWithColor(UnitTypeGetName(UnitGetType(gv_PlayerHero[killing_player])), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/B485FF4F") + StringExternal("Param/Value/927B1316") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/F22C6985") + TextWithColor(UnitTypeGetName(UnitGetType(gv_PlayerHero[EventPlayer()])), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/3081669B") + StringExternal("Param/Value/7C3AB27A")));
        }
        UnitBehaviorAdd(gv_PlayerHero[killing_player], "PlayerGKill", gv_PlayerHero[killing_player], 1);
    } else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/4705CBEA") + TextWithColor(PlayerName(killing_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(killing_player, false))) + StringExternal("Param/Value/E07DC5E9") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/6B4135A4") + TextWithColor(UnitTypeGetName(UnitGetType(gv_PlayerHero[EventPlayer()])), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/120F00B3") + StringExternal("Param/Value/D963676D")));
    }

    if ((PlayerType(killing_player) == c_playerTypeUser)) {
        gv_PlayerLevel[killing_player][1] += 1;
        if (((gv_SelectedSpellNum1[gv_HeroKillPlayer[EventPlayer()]] == 4) || (gv_SelectedSpellNum2[gv_HeroKillPlayer[EventPlayer()]] == 4)) && (UnitHasBehavior(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "SpellDong4") == true)) {
            UnitCreateEffectUnit(gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]], "Spelldong22", gv_PlayerHero[gv_HeroKillPlayer[EventPlayer()]]);
        }

        if (((gv_HeroNonStopKill[EventPlayer()] >= 2) && (gv_HeroNonStopKill[EventPlayer()] <= 5))) {
            bounty += (25 * (gv_HeroNonStopKill[EventPlayer()] - 1));
        }
        else if ((gv_HeroNonStopKill[EventPlayer()] >= 6)) {
            bounty += (25 * (gv_HeroNonStopKill[EventPlayer()] + 1));
        }

        if ((gv_PlayerLevel[EventPlayer()][0] > gv_PlayerLevel[killing_player][0])) {
            UIDisplayMessage(PlayerGroupSingle(killing_player), c_messageAreaSubtitle, (StringExternal("Param/Value/FAB94D7C") + TextWithColor(StringExternal("Param/Value/E161D6C8"), Color(0.00, 87.45, 100.00)) + TextWithColor(IntToText((gv_HeroKillMoney[EventPlayer()][0] + gv_HeroKillMoney[EventPlayer()][1] + bounty)), Color(0.00, 87.45, 100.00)) + TextWithColor(StringExternal("Param/Value/089F3CD4"), Color(0.00, 87.45, 100.00)) + StringExternal("Param/Value/2D044E80")));
            PlayerModifyPropertyInt(killing_player, c_playerPropMinerals, c_playerPropOperAdd, (gv_HeroKillMoney[EventPlayer()][1] + bounty));
        } else {
            UIDisplayMessage(PlayerGroupSingle(killing_player), c_messageAreaSubtitle, (StringExternal("Param/Value/FB1959EE") + TextWithColor(StringExternal("Param/Value/772AC933"), Color(0.00, 87.45, 100.00)) + TextWithColor(IntToText((gv_HeroKillMoney[EventPlayer()][0] + bounty)), Color(0.00, 87.45, 100.00)) + TextWithColor(StringExternal("Param/Value/FABCA002"), Color(0.00, 87.45, 100.00)) + StringExternal("Param/Value/3453FA0E")));
            PlayerModifyPropertyInt(killing_player, c_playerPropMinerals, c_playerPropOperAdd, bounty);
        }

        if (((gv_SelectedCharNum[killing_player] == 32) || (gv_SelectedCharNum[killing_player] == 46) || (gv_SelectedCharNum[killing_player] == 66) || (gv_SelectedCharNum[killing_player] == 70))) {
            gf_HrHeroSkillIncreaseEffect();
        }

        PlayerCreateEffectUnit(EventPlayer(), "HeroKillMo", gv_PlayerHero[killing_player]);
        libNtve_gf_SetDialogItemText(gv_ScoreDialogTotalScore[killing_player], (StringExternal("Param/Value/6B201FB2") + IntToText(gv_PlayerLevel[killing_player][1]) + StringExternal("Param/Value/D24522CA") + IntToText(gv_PlayerLevel[killing_player][2]) + StringExternal("Param/Value/B3E4C0D7") + IntToText(gv_PlayerLevel[killing_player][3]) + StringExternal("Param/Value/0D0DA65C")), PlayerGroupAll());
    }

    gv_HeroNonStopKill[EventPlayer()] = 0;
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), killing_player) == true)) {
        gv_PlayerProfileTeamKillNum[0] += 1;
        libNtve_gf_SetDialogItemText(gv_ScoreDialogTextB[4], (StringExternal("Param/Value/46715145") + IntToText(gv_PlayerProfileTeamKillNum[0]) + StringExternal("Param/Value/211C87AC")), PlayerGroupAll());
    }
    else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), killing_player) == true)) {
        gv_PlayerProfileTeamKillNum[1] += 1;
        libNtve_gf_SetDialogItemText(gv_ScoreDialogTextB[5], (StringExternal("Param/Value/1CD6E931") + IntToText(gv_PlayerProfileTeamKillNum[1]) + StringExternal("Param/Value/B521C143")), PlayerGroupAll());
    }

    gv_PlayerLevel[EventPlayer()][2] += 1;
    libNtve_gf_SetDialogItemText(gv_ScoreDialogTotalScore[EventPlayer()], (StringExternal("Param/Value/4C5AC417") + IntToText(gv_PlayerLevel[EventPlayer()][1]) + StringExternal("Param/Value/E32F94F1") + IntToText(gv_PlayerLevel[EventPlayer()][2]) + StringExternal("Param/Value/784ECCE0") + IntToText(gv_PlayerLevel[EventPlayer()][3]) + StringExternal("Param/Value/43A6870C")), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_ScoreDialogName[EventPlayer()], (StringExternal("Param/Value/70CACF72") + PlayerName(EventPlayer()) + StringExternal("Param/Value/152670BB")), PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(gv_ScoreDialogHeroImage[EventPlayer()], Color(100.00, 0.00, 0.00), PlayerGroupAll());
    DialogControlFadeTransparency(gv_ScoreDialogHeroImage[EventPlayer()], PlayerGroupAll(), 0.0, 50.0);
    DialogControlSetVisible(gv_ScoreDialogReviveTime[EventPlayer()], PlayerGroupAll(), true);
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && ((UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist3222") == true) || (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist32222") == true) || (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist322222") == true) || (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist3222222") == true))) {
        gf_HrAssistantBonusTeam2();
    }
    else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && ((UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist") == true) || (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist3") == true) || (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist32") == true) || (UnitHasBehavior(gv_PlayerHero[EventPlayer()], "Player1Assist322") == true))) {
        gf_HrAssistantBonusTeam1();
    }

    if ((((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[1]] == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[2]] == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[3]] == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[4]] == true) && (gv_HeroAllKill[0] == false) && (PlayerGroupCount(gv_TeamPlayerGroup[0]) >= 2)) || ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[5]] == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[6]] == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[7]] == true) && (gv_HeroDeathBoolean[gv_PlayerBayul[8]] == true) && (gv_HeroAllKill[1] == false) && (PlayerGroupCount(gv_TeamPlayerGroup[1]) >= 2)))) {
        gf_HrHeroAllKillMessage();
    }

    if ((UnitGetType(EventUnit()) != "Hero19")) {
        TriggerExecute(gt_TrHeroReviveStand, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHeroDeath_Init () {
    gt_TrHeroDeath = TriggerCreate("gt_TrHeroDeath_Func");
    TriggerAddEventUnitDied(gt_TrHeroDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrHeroReviveStand_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_HeroReviveWindow, PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_HeroReviveWindowTime[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
    gv_HeroReviveCountNum[EventPlayer()][0] = gv_HeroReviveCountNum[EventPlayer()][1];
    if (((gv_StatIncreasesBought[EventPlayer()][28] != 0) || (gv_StatIncreasesBought[EventPlayer()][29] != 0))) {
        gf_HrItemUseComplete();
    }

    while ((gv_HeroReviveCountNum[EventPlayer()][0] > 0)) {
        libNtve_gf_SetDialogItemText(gv_HeroReviveWindowTime[EventPlayer()], (StringExternal("Param/Value/A7788B65") + IntToText(gv_HeroReviveCountNum[EventPlayer()][0]) + StringExternal("Param/Value/220CEBD0")), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_ScoreDialogReviveTime[EventPlayer()], (StringExternal("Param/Value/1831C539") + TextWithColor(IntToText(gv_HeroReviveCountNum[EventPlayer()][0]), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/47B532D3")), PlayerGroupAll());
        gv_HeroReviveCountNum[EventPlayer()][0] -= 1;
        Wait(1.0, c_timeReal);
    }
    libNtve_gf_SetDialogItemText(gv_HeroReviveWindowTime[EventPlayer()], (StringExternal("Param/Value/9E9D9A06") + IntToText(gv_HeroReviveCountNum[EventPlayer()][0]) + StringExternal("Param/Value/90BBD409")), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemText(gv_ScoreDialogReviveTime[EventPlayer()], (StringExternal("Param/Value/9FFA7755") + TextWithColor(IntToText(gv_HeroReviveCountNum[EventPlayer()][0]), Color(100.00, 100.00, 100.00)) + StringExternal("Param/Value/F90F65FE")), PlayerGroupAll());
    gv_HeroReviveCountNum[EventPlayer()][0] = gv_HeroReviveCountNum[EventPlayer()][1];
    if ((UnitGetType(gv_PlayerHero[EventPlayer()]) != "Hero19")) {
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (PlayerStatus(EventPlayer()) == c_playerStatusActive)) {
            UnitSetPosition(gv_PlayerHero[EventPlayer()], PointFromId(194), false);
            UnitRevive(gv_PlayerHero[EventPlayer()]);
        }
        else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (PlayerStatus(EventPlayer()) == c_playerStatusActive)) {
            UnitSetPosition(gv_PlayerHero[EventPlayer()], PointFromId(195), false);
            UnitRevive(gv_PlayerHero[EventPlayer()]);
        }
        UnitSetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropLifePercent, 100.0);
        if (gv_HeroInformation[gv_SelectedCharNum[EventPlayer()] - 1].ability_resource != c_abilityResourceHeat) {
            UnitSetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropEnergyPercent, 100.0);
        } else {
            UnitSetPropertyFixed(gv_PlayerHero[EventPlayer()], c_unitPropEnergyPercent, 0.0);
        }
        Wait(0.1, c_timeReal);
        if ((PlayerStatus(EventPlayer()) == c_playerStatusActive) && (gv_GameEndBoolean == false)) {
            DialogSetVisible(gv_HeroReviveWindow, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_HeroReviveWindowTime[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
            PlayerCreateEffectUnit(EventPlayer(), "ApplyIncapBehavior23", gv_PlayerHero[EventPlayer()]);
            CameraPan(EventPlayer(), UnitGetPosition(gv_PlayerHero[EventPlayer()]), 0.0, -1, 10, false);
            Wait(0.1, c_timeReal);
            UnitClearSelection(EventPlayer());
            UnitSelect(gv_PlayerHero[EventPlayer()], EventPlayer(), true);
            libNtve_gf_SetDialogItemText(gv_ScoreDialogName[EventPlayer()], (StringExternal("Param/Value/4D982F7B") + PlayerName(EventPlayer()) + StringExternal("Param/Value/B1D555C7")), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_ScoreDialogHeroImage[EventPlayer()], Color(100,100,100), PlayerGroupAll());
            DialogControlFadeTransparency(gv_ScoreDialogHeroImage[EventPlayer()], PlayerGroupAll(), 0.0, 0.0);
            DialogControlSetVisible(gv_ScoreDialogReviveTime[EventPlayer()], PlayerGroupAll(), false);
            gv_HeroDeathBoolean[EventPlayer()] = false;
            if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_HeroAllKill[0] == true)) {
                gv_HeroAllKill[0] = false;
            }
            else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_HeroAllKill[1] == true)) {
                gv_HeroAllKill[1] = false;
            }

            gf_HrHeroPassiveRepair();
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrHeroReviveStand_Init () {
    gt_TrHeroReviveStand = TriggerCreate("gt_TrHeroReviveStand_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ??????(1???)
//--------------------------------------------------------------------------------------------------
bool gt_TrNexusDestroyTeam1_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_GameEndBoolean = true;
    TriggerEnable(gt_TrNexusDestroyTeam2, false);
    TriggerStop(gt_TrMinionMake);
    for (i = 1; i <= 4; i += 1) {
        ObjectiveSetState(gv_PlayerObjectives[i + 4][c_primaryObjectiveDestroyNexus], c_objectiveStateCompleted);
        ObjectiveSetState(gv_PlayerObjectives[i][c_primaryObjectiveDestroyNexus], c_objectiveStateFailed);
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetDragSelectEnabled(PlayerGroupAll(), false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton1, false);
    DialogSetVisible(gv_ScoreDialog[0], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ScoreWindowToggleButton, PlayerGroupAll(), false);
    DialogSetVisible(gv_ScoreDialog[1], PlayerGroupAll(), false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationDefault);
    DialogControlSetVisible(gv_StatShopDialog, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_SelectionLockButton, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_RemoveObjectivesButton, PlayerGroupAll(), false);
    DialogSetVisible(gv_HeroReviveWindow, PlayerGroupAll(), false);

    for (i = 1; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            CameraLockInput(gv_PlayerBayul[i], true);
            CameraPan(gv_PlayerBayul[i], PointFromId(293), 0.0, -1, 10, false);
            CameraShakeStart(gv_PlayerBayul[i], c_cameraPositionTarget, c_cameraDirectionXYZ, 1.0, 1.5, 100.0, 2.5);
            DialogControlSetVisible(gv_HeroReviveWindowTime[gv_PlayerBayul[i]], PlayerGroupSingle(gv_PlayerBayul[i]), false);
            gv_AvailableSkillPoints[gv_PlayerBayul[i]] = 0;
            libNtve_gf_MakeUnitUncommandable(gv_PlayerHero[gv_PlayerBayul[i]], true);
            gf_ShowPlayerStatistics(i);
        }
    }

    DialogControlSetVisible(gv_SkillLearnWindow, PlayerGroupAll(), false);
    Wait(6.0, c_timeReal);
    SoundPlay(SoundLink("SystemSound332", -1), GameAttributePlayersForTeam(2), 200.0, 0.0);
    SoundPlay(SoundLink("SystemSound3322", -1), GameAttributePlayersForTeam(1), 200.0, 0.0);
    Wait(2.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDebug);

    for (i = 5; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser)) {
            GameOver(gv_PlayerBayul[i], c_gameOverVictory, true, true);
        }
    }

    for (i = 1; i <= 4; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser)) {
            GameOver(gv_PlayerBayul[i], c_gameOverDefeat, true, true);
        }
    }

    for (i = 9; i <= 10; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser)) {
            GameOver(gv_PlayerBayul[i], c_gameOverTie, true, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrNexusDestroyTeam1_Init () {
    gt_TrNexusDestroyTeam1 = TriggerCreate("gt_TrNexusDestroyTeam1_Func");
    TriggerAddEventUnitDied(gt_TrNexusDestroyTeam1, UnitRefFromUnit(UnitFromId(109)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ????????? ??????(2???)
//--------------------------------------------------------------------------------------------------
bool gt_TrNexusDestroyTeam2_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_GameEndBoolean = true;
    TriggerEnable(gt_TrNexusDestroyTeam1, false);
    TriggerStop(gt_TrMinionMake);
    for (i = 1; i <= 4; i += 1) {
        ObjectiveSetState(gv_PlayerObjectives[i][c_primaryObjectiveDestroyNexus], c_objectiveStateCompleted);
        ObjectiveSetState(gv_PlayerObjectives[i + 4][c_primaryObjectiveDestroyNexus], c_objectiveStateFailed);
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetDragSelectEnabled(PlayerGroupAll(), false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton1, false);
    DialogSetVisible(gv_ScoreDialog[0], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ScoreWindowToggleButton, PlayerGroupAll(), false);
    DialogSetVisible(gv_ScoreDialog[1], PlayerGroupAll(), false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationDefault);
    DialogControlSetVisible(gv_StatShopDialog, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_SelectionLockButton, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_RemoveObjectivesButton, PlayerGroupAll(), false);
    DialogSetVisible(gv_HeroReviveWindow, PlayerGroupAll(), false);

    for (i = 1; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            CameraLockInput(gv_PlayerBayul[i], true);
            CameraPan(gv_PlayerBayul[i], PointFromId(266), 0.0, -1, 10, false);
            CameraShakeStart(gv_PlayerBayul[i], c_cameraPositionTarget, c_cameraDirectionXYZ, 1.0, 1.5, 100.0, 2.5);
            DialogControlSetVisible(gv_HeroReviveWindowTime[gv_PlayerBayul[i]], PlayerGroupSingle(gv_PlayerBayul[i]), false);
            gv_AvailableSkillPoints[gv_PlayerBayul[i]] = 0;
            libNtve_gf_MakeUnitUncommandable(gv_PlayerHero[gv_PlayerBayul[i]], true);
            gf_ShowPlayerStatistics(i);
        }
    }

    DialogControlSetVisible(gv_SkillLearnWindow, PlayerGroupAll(), false);
    Wait(6.0, c_timeReal);
    SoundPlay(SoundLink("SystemSound332", -1), GameAttributePlayersForTeam(1), 200.0, 0.0);
    SoundPlay(SoundLink("SystemSound3322", -1), GameAttributePlayersForTeam(2), 200.0, 0.0);
    Wait(2.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDebug);

    for (i = 1; i <= 4; i += 1 ) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser)) {
            GameOver(gv_PlayerBayul[i], c_gameOverVictory, true, true);
        }
    }

    for (i = 5; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser)) {
            GameOver(gv_PlayerBayul[i], c_gameOverDefeat, true, true);
        }
    }

    for (i = 9; i <= 10; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser)) {
            GameOver(gv_PlayerBayul[i], c_gameOverTie, true, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrNexusDestroyTeam2_Init () {
    gt_TrNexusDestroyTeam2 = TriggerCreate("gt_TrNexusDestroyTeam2_Func");
    TriggerAddEventUnitDied(gt_TrNexusDestroyTeam2, UnitRefFromUnit(UnitFromId(112)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ?????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrSurrenderSignOk_Func (bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_SurrenderPossibleBoolean[0] == false)) {
        gv_SurrenderPossibleBoolean[0] = true;
        UISetGameMenuItemVisible(GameAttributePlayersForTeam(1), c_gameMenuDialogGenericButton1, true);
        gv_PlayerOutSurrenderPossible[0] = true;
    }

    if ((gv_SurrenderPossibleBoolean[1] == false)) {
        gv_SurrenderPossibleBoolean[1] = true;
        UISetGameMenuItemVisible(GameAttributePlayersForTeam(2), c_gameMenuDialogGenericButton1, true);
        gv_PlayerOutSurrenderPossible[1] = true;
    }

    TriggerEnable(gt_TrSurrenderSystemStartBtn, true);
    TriggerEnable(gt_TrSurrenderOkTeam1, true);
    TriggerEnable(gt_TrSurrenderOkTeam2, true);
    TriggerEnable(gt_TrSurrenderNoTeam1, true);
    TriggerEnable(gt_TrSurrenderNoTeam2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSurrenderSignOk_Init () {
    gt_TrSurrenderSignOk = TriggerCreate("gt_TrSurrenderSignOk_Func");
    TriggerAddEventTimeElapsed(gt_TrSurrenderSignOk, 1200.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ?????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrSurrenderReTimer_Func (bool testConds, bool runActions) {
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == 12) && (EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(194))) {
        gv_SurrenderPossibleBoolean[0] = true;
    }
    else if ((EventPlayer() == 13) && (EventPlayerEffectUsedPoint(c_effectLocationTargetPoint) == PointFromId(195))) {
        gv_SurrenderPossibleBoolean[1] = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSurrenderReTimer_Init () {
    gt_TrSurrenderReTimer = TriggerCreate("gt_TrSurrenderReTimer_Func");
    TriggerAddEventPlayerEffectUsed(gt_TrSurrenderReTimer, 12, "SurrenderTimerD");
    TriggerAddEventPlayerEffectUsed(gt_TrSurrenderReTimer, 13, "SurrenderTimerD");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrSurrenderSystemStart_Func (bool testConds, bool runActions) {
    int i;
    int countdown = 21;

    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((DialogIsVisible(gv_SurrenderDialog, EventPlayer()) == false))) {
            return false;
        }
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
        if (!((gv_GameStartBoolean == true))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_SurrenderPossibleBoolean[0] == true)) || ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_SurrenderPossibleBoolean[1] == true)))) {
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
            gv_SurrenderPossibleBoolean[0] = false;
            DialogControlSetEnabled(gv_SurrenderDialogBtn[0], GameAttributePlayersForTeam(1), true);
            DialogControlSetEnabled(gv_SurrenderDialogBtn[1], GameAttributePlayersForTeam(1), true);
            DialogControlSetVisible(gv_SurrenderDialogBtn[0], GameAttributePlayersForTeam(1), true);
            DialogControlSetVisible(gv_SurrenderDialogBtn[1], GameAttributePlayersForTeam(1), true);
            libNtve_gf_SetDialogItemCurrentValue(gv_SurrenderDialogBar[0], IntToFixed(countdown), GameAttributePlayersForTeam(1));
            UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/5500CD13") + TextWithColor((StringExternal("Param/Value/0B70DF5D")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/7955829C")));
            DialogSetVisible(gv_SurrenderDialog, GameAttributePlayersForTeam(1), true);
            while ((countdown > 0)) {
                countdown -= 1;
                libNtve_gf_SetDialogItemCurrentValue(gv_SurrenderDialogBar[0], IntToFixed(countdown), GameAttributePlayersForTeam(1));
                if ((gv_SurrenderPlayerNum1 == 0)) {
                    countdown = 0;
                }

                Wait(1.0, c_timeReal);
            }
            DialogSetVisible(gv_SurrenderDialog, GameAttributePlayersForTeam(1), false);
            if ((gv_SurrenderSystemYorN[0] > gv_SurrenderSystemYorN[1]) && (gv_SurrenderPassBoolean == false)) {
                gv_SurrenderPassBoolean = true;
                UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/C0551859") + TextWithColor((StringExternal("Param/Value/96385771") + IntToText(gv_SurrenderSystemYorN[0]) + StringExternal("Param/Value/B9EACF39") + IntToText(gv_SurrenderSystemYorN[1]) + StringExternal("Param/Value/8394C363")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/AB952362")));
                UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/1841795E") + TextWithColor((StringExternal("Param/Value/942B3BA7") + StringExternal("Param/Value/EE9E472C") + IntToText(gv_SurrenderSystemYorN[0]) + StringExternal("Param/Value/5637470D") + IntToText(gv_SurrenderSystemYorN[1]) + StringExternal("Param/Value/493124A4")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/48F4AEDA")));
                Wait(2.0, c_timeReal);
                SoundPlay(SoundLink("SystemSound33", -1), PlayerGroupAll(), 200.0, 0.0);
                Wait(4.0, c_timeReal);
                TriggerExecute(gt_TrSurrenderOkTeam1Win, true, false);
            }
            else if ((gv_SurrenderSystemYorN[0] <= gv_SurrenderSystemYorN[1])) {
                UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/770A3E8D") + TextWithColor((StringExternal("Param/Value/E2F35548") + IntToText(gv_SurrenderSystemYorN[0]) + StringExternal("Param/Value/2BAAE387") + IntToText(gv_SurrenderSystemYorN[1]) + StringExternal("Param/Value/A1EB5F47")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/2F883FFA")));
                UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/00F772C4") + TextWithColor((StringExternal("Param/Value/A9DFD27C") + StringExternal("Param/Value/EDF63074") + IntToText(gv_SurrenderSystemYorN[0]) + StringExternal("Param/Value/E4F1089E") + IntToText(gv_SurrenderSystemYorN[1]) + StringExternal("Param/Value/B95AEB37")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/7F22ABB3")));
            }

            gv_SurrenderSystemYorN[0] = 0;
            gv_SurrenderSystemYorN[1] = 0;
            libNtve_gf_SetDialogItemText(gv_SurrenderDialogLabel[1], (StringExternal("Param/Value/05F78DFB") + TextWithColor(IntToText(gv_SurrenderSystemYorN[0]), Color(50.20, 100.00, 50.20)) + TextWithColor(StringExternal("Param/Value/0FF734A0"), Color(100.00, 100.00, 100.00)) + TextWithColor(IntToText(gv_SurrenderSystemYorN[1]), Color(100.00, 57.65, 57.65)) + StringExternal("Param/Value/405D30AF")), GameAttributePlayersForTeam(1));
            PlayerCreateEffectPoint(12, "SurrenderTimer", PointFromId(194));
        }
        else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true)) {
            gv_SurrenderPossibleBoolean[1] = false;
            DialogControlSetEnabled(gv_SurrenderDialogBtn[0], GameAttributePlayersForTeam(2), true);
            DialogControlSetEnabled(gv_SurrenderDialogBtn[1], GameAttributePlayersForTeam(2), true);
            DialogControlSetVisible(gv_SurrenderDialogBtn[0], GameAttributePlayersForTeam(2), true);
            DialogControlSetVisible(gv_SurrenderDialogBtn[1], GameAttributePlayersForTeam(2), true);
            libNtve_gf_SetDialogItemCurrentValue(gv_SurrenderDialogBar[1], IntToFixed(countdown), GameAttributePlayersForTeam(2));
            UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/19592732") + TextWithColor((StringExternal("Param/Value/DBC7F3A8")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/7850E154")));
            DialogSetVisible(gv_SurrenderDialog, GameAttributePlayersForTeam(2), true);
            while ((countdown > 0)) {
                countdown -= 1;
                libNtve_gf_SetDialogItemCurrentValue(gv_SurrenderDialogBar[1], IntToFixed(countdown), GameAttributePlayersForTeam(2));
                if ((gv_SurrenderPlayerNum2 == 0)) {
                    countdown = 0;
                }

                Wait(1.0, c_timeReal);
            }
            DialogSetVisible(gv_SurrenderDialog, GameAttributePlayersForTeam(2), false);
            if ((gv_SurrenderSystemYorN[2] > gv_SurrenderSystemYorN[3]) && (gv_SurrenderPassBoolean == false)) {
                gv_SurrenderPassBoolean = true;
                UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/14E894A4") + TextWithColor((StringExternal("Param/Value/E47A8158") + IntToText(gv_SurrenderSystemYorN[2]) + StringExternal("Param/Value/E8FB06B5") + IntToText(gv_SurrenderSystemYorN[3]) + StringExternal("Param/Value/6B0B0244")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/9B3D4250")));
                UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/A59B654E") + TextWithColor((StringExternal("Param/Value/47B7C1A8") + StringExternal("Param/Value/9D0423F2") + IntToText(gv_SurrenderSystemYorN[2]) + StringExternal("Param/Value/2E6BD199") + IntToText(gv_SurrenderSystemYorN[3]) + StringExternal("Param/Value/3E4DC648")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/3E1764C7")));
                Wait(2.0, c_timeReal);
                SoundPlay(SoundLink("SystemSound33", -1), PlayerGroupAll(), 200.0, 0.0);
                Wait(4.0, c_timeReal);
                TriggerExecute(gt_TrSurrenderOkTeam2Win, true, false);
            }
            else if ((gv_SurrenderSystemYorN[2] <= gv_SurrenderSystemYorN[3])) {
                UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/0683A4DB") + TextWithColor((StringExternal("Param/Value/059CBA96") + IntToText(gv_SurrenderSystemYorN[2]) + StringExternal("Param/Value/09645C38") + IntToText(gv_SurrenderSystemYorN[3]) + StringExternal("Param/Value/9BFC2D9D")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/EB860776")));
                UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/0985732D") + TextWithColor((StringExternal("Param/Value/C96EA190") + StringExternal("Param/Value/0BF24BF8") + IntToText(gv_SurrenderSystemYorN[2]) + StringExternal("Param/Value/7E843F88") + IntToText(gv_SurrenderSystemYorN[3]) + StringExternal("Param/Value/48F7D6A1")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/94518820")));
            }

            gv_SurrenderSystemYorN[2] = 0;
            gv_SurrenderSystemYorN[3] = 0;
            libNtve_gf_SetDialogItemText(gv_SurrenderDialogLabel[2], (StringExternal("Param/Value/8FCAE68D") + TextWithColor(IntToText(gv_SurrenderSystemYorN[2]), Color(50.20, 100.00, 50.20)) + TextWithColor(StringExternal("Param/Value/CE6815C6"), Color(100.00, 100.00, 100.00)) + TextWithColor(IntToText(gv_SurrenderSystemYorN[3]), Color(100.00, 57.65, 57.65)) + StringExternal("Param/Value/BA1EC018")), GameAttributePlayersForTeam(2));
            PlayerCreateEffectPoint(13, "SurrenderTimer", PointFromId(195));
        }

        for (i = 1; i <= 4; i += 1) {
            if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
                gv_SurrenderPlayerNum1 += 1;
            }
        }

        for (i = 5; i <= 8; i += 1) {
            if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
                gv_SurrenderPlayerNum2 += 1;
            }
        }
    }
    else if ((GameGetMissionTime() <= 1200.0)) {
        SoundPlay(SoundLink("UI_GenericError", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/A1AAE20E"));
    }
    else {
        SoundPlay(SoundLink("UI_GenericError", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/83FA03B4"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSurrenderSystemStart_Init () {
    gt_TrSurrenderSystemStart = TriggerCreate("gt_TrSurrenderSystemStart_Func");
    TriggerAddEventChatMessage(gt_TrSurrenderSystemStart, c_playerAny, "-gg", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ??????(??????)
//--------------------------------------------------------------------------------------------------
bool gt_TrSurrenderSystemStartBtn_Func (bool testConds, bool runActions) {
    int i;
    int countdown = 21;

    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((DialogIsVisible(gv_SurrenderDialog, EventPlayer()) == false))) {
            return false;
        }
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
        if (!((gv_GameStartBoolean == true))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if ((((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (gv_SurrenderPossibleBoolean[0] == true)) || ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (gv_SurrenderPossibleBoolean[1] == true)))) {
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
            gv_SurrenderPossibleBoolean[0] = false;
            DialogControlSetEnabled(gv_SurrenderDialogBtn[0], GameAttributePlayersForTeam(1), true);
            DialogControlSetEnabled(gv_SurrenderDialogBtn[1], GameAttributePlayersForTeam(1), true);
            DialogControlSetVisible(gv_SurrenderDialogBtn[0], GameAttributePlayersForTeam(1), true);
            DialogControlSetVisible(gv_SurrenderDialogBtn[1], GameAttributePlayersForTeam(1), true);
            libNtve_gf_SetDialogItemCurrentValue(gv_SurrenderDialogBar[0], IntToFixed(countdown), GameAttributePlayersForTeam(1));
            UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/FA6E8A44") + TextWithColor((StringExternal("Param/Value/05B30B49")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/F485EF06")));
            DialogSetVisible(gv_SurrenderDialog, GameAttributePlayersForTeam(1), true);
            while ((countdown > 0)) {
                countdown -= 1;
                libNtve_gf_SetDialogItemCurrentValue(gv_SurrenderDialogBar[0], IntToFixed(countdown), GameAttributePlayersForTeam(1));
                if ((gv_SurrenderPlayerNum1 == 0)) {
                    countdown = 0;
                }

                Wait(1.0, c_timeReal);
            }
            DialogSetVisible(gv_SurrenderDialog, GameAttributePlayersForTeam(1), false);
            if ((gv_SurrenderSystemYorN[0] > gv_SurrenderSystemYorN[1]) && (gv_SurrenderPassBoolean == false)) {
                gv_SurrenderPassBoolean = true;
                UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/D71EED0B") + TextWithColor((StringExternal("Param/Value/A2BAAEE5") + IntToText(gv_SurrenderSystemYorN[0]) + StringExternal("Param/Value/7DAE5255") + IntToText(gv_SurrenderSystemYorN[1]) + StringExternal("Param/Value/6C8EDECB")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/AA3501F5")));
                UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/AB13964B") + TextWithColor((StringExternal("Param/Value/AA070024") + StringExternal("Param/Value/70E17570") + IntToText(gv_SurrenderSystemYorN[0]) + StringExternal("Param/Value/99833E4B") + IntToText(gv_SurrenderSystemYorN[1]) + StringExternal("Param/Value/8BE47512")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/FF396FB0")));
                Wait(2.0, c_timeReal);
                SoundPlay(SoundLink("SystemSound33", -1), PlayerGroupAll(), 200.0, 0.0);
                Wait(4.0, c_timeReal);
                TriggerExecute(gt_TrSurrenderOkTeam1Win, true, false);
            }
            else if ((gv_SurrenderSystemYorN[0] <= gv_SurrenderSystemYorN[1])) {
                UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/E7624095") + TextWithColor((StringExternal("Param/Value/AB329B66") + IntToText(gv_SurrenderSystemYorN[0]) + StringExternal("Param/Value/06977E96") + IntToText(gv_SurrenderSystemYorN[1]) + StringExternal("Param/Value/D359E43A")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/DB049DC5")));
                UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/D3D8450D") + TextWithColor((StringExternal("Param/Value/A060DF4F") + StringExternal("Param/Value/75389295") + IntToText(gv_SurrenderSystemYorN[0]) + StringExternal("Param/Value/D8A30960") + IntToText(gv_SurrenderSystemYorN[1]) + StringExternal("Param/Value/E220A797")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/E6A4753D")));
            }

            gv_SurrenderSystemYorN[0] = 0;
            gv_SurrenderSystemYorN[1] = 0;
            libNtve_gf_SetDialogItemText(gv_SurrenderDialogLabel[1], (StringExternal("Param/Value/3D76D2D5") + TextWithColor(IntToText(gv_SurrenderSystemYorN[0]), Color(50.20, 100.00, 50.20)) + TextWithColor(StringExternal("Param/Value/ED1344A7"), Color(100.00, 100.00, 100.00)) + TextWithColor(IntToText(gv_SurrenderSystemYorN[1]), Color(100.00, 57.65, 57.65)) + StringExternal("Param/Value/9C4B6505")), GameAttributePlayersForTeam(1));
            PlayerCreateEffectPoint(12, "SurrenderTimer", PointFromId(194));
        }
        else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true)) {
            gv_SurrenderPossibleBoolean[1] = false;
            DialogControlSetEnabled(gv_SurrenderDialogBtn[0], GameAttributePlayersForTeam(2), true);
            DialogControlSetEnabled(gv_SurrenderDialogBtn[1], GameAttributePlayersForTeam(2), true);
            DialogControlSetVisible(gv_SurrenderDialogBtn[0], GameAttributePlayersForTeam(2), true);
            DialogControlSetVisible(gv_SurrenderDialogBtn[1], GameAttributePlayersForTeam(2), true);
            libNtve_gf_SetDialogItemCurrentValue(gv_SurrenderDialogBar[1], IntToFixed(countdown), GameAttributePlayersForTeam(2));
            UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/F69E1C8C") + TextWithColor((StringExternal("Param/Value/A5B378CC")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/C2612890")));
            DialogSetVisible(gv_SurrenderDialog, GameAttributePlayersForTeam(2), true);
            while ((countdown > 0)) {
                countdown -= 1;
                libNtve_gf_SetDialogItemCurrentValue(gv_SurrenderDialogBar[1], IntToFixed(countdown), GameAttributePlayersForTeam(2));
                if ((gv_SurrenderPlayerNum2 == 0)) {
                    countdown = 0;
                }

                Wait(1.0, c_timeReal);
            }
            DialogSetVisible(gv_SurrenderDialog, GameAttributePlayersForTeam(2), false);
            if ((gv_SurrenderSystemYorN[2] > gv_SurrenderSystemYorN[3]) && (gv_SurrenderPassBoolean == false)) {
                gv_SurrenderPassBoolean = true;
                UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/35E51FE1") + TextWithColor((StringExternal("Param/Value/5129D04D") + IntToText(gv_SurrenderSystemYorN[2]) + StringExternal("Param/Value/8C1EF952") + IntToText(gv_SurrenderSystemYorN[3]) + StringExternal("Param/Value/A61ADDD0")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/56A18217")));
                UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/24C8143B") + TextWithColor((StringExternal("Param/Value/24A1E305") + StringExternal("Param/Value/0DB8EA23") + IntToText(gv_SurrenderSystemYorN[2]) + StringExternal("Param/Value/FFC929AF") + IntToText(gv_SurrenderSystemYorN[3]) + StringExternal("Param/Value/F50FE2FD")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/D64E8C6B")));
                Wait(2.0, c_timeReal);
                SoundPlay(SoundLink("SystemSound33", -1), PlayerGroupAll(), 200.0, 0.0);
                Wait(4.0, c_timeReal);
                TriggerExecute(gt_TrSurrenderOkTeam2Win, true, false);
            }
            else if ((gv_SurrenderSystemYorN[2] <= gv_SurrenderSystemYorN[3])) {
                UIDisplayMessage(GameAttributePlayersForTeam(2), c_messageAreaDebug, (StringExternal("Param/Value/627EECC4") + TextWithColor((StringExternal("Param/Value/1B9E6504") + IntToText(gv_SurrenderSystemYorN[2]) + StringExternal("Param/Value/65D3A86B") + IntToText(gv_SurrenderSystemYorN[3]) + StringExternal("Param/Value/5F7DC7F5")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/976D7538")));
                UIDisplayMessage(GameAttributePlayersForTeam(1), c_messageAreaDebug, (StringExternal("Param/Value/78321FB8") + TextWithColor((StringExternal("Param/Value/5D69451B") + StringExternal("Param/Value/D8687D64") + IntToText(gv_SurrenderSystemYorN[2]) + StringExternal("Param/Value/2BF59278") + IntToText(gv_SurrenderSystemYorN[3]) + StringExternal("Param/Value/41441DBC")), Color(100.00, 90.20, 0.00)) + StringExternal("Param/Value/4DBDAAF3")));
            }

            gv_SurrenderSystemYorN[2] = 0;
            gv_SurrenderSystemYorN[3] = 0;
            libNtve_gf_SetDialogItemText(gv_SurrenderDialogLabel[2], (StringExternal("Param/Value/4988EFD0") + TextWithColor(IntToText(gv_SurrenderSystemYorN[2]), Color(50.20, 100.00, 50.20)) + TextWithColor(StringExternal("Param/Value/61F62479"), Color(100.00, 100.00, 100.00)) + TextWithColor(IntToText(gv_SurrenderSystemYorN[3]), Color(100.00, 57.65, 57.65)) + StringExternal("Param/Value/9FE9A3C5")), GameAttributePlayersForTeam(2));
            PlayerCreateEffectPoint(13, "SurrenderTimer", PointFromId(195));
        }

        for (i = 1; i <= 4; i += 1) {
            if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
                gv_SurrenderPlayerNum1 += 1;
            }

        }
        for (i = 5; i <= 8; i += 1) {
            if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
                gv_SurrenderPlayerNum2 += 1;
            }
        }
    }

    else if ((GameGetMissionTime() <= 1200.0)) {
        SoundPlay(SoundLink("UI_GenericError", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/B7215932"));
    }
    else {
        SoundPlay(SoundLink("UI_GenericError", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/6778B434"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSurrenderSystemStartBtn_Init () {
    gt_TrSurrenderSystemStartBtn = TriggerCreate("gt_TrSurrenderSystemStartBtn_Func");
    TriggerEnable(gt_TrSurrenderSystemStartBtn, false);
    TriggerAddEventGameMenuItemSelected(gt_TrSurrenderSystemStartBtn, c_playerAny, c_gameMenuDialogGenericButton1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ??????(1???)
//--------------------------------------------------------------------------------------------------
bool gt_TrSurrenderOkTeam1_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((DialogIsVisible(gv_SurrenderDialog, EventPlayer()) == true))) {
            return false;
        }
        if (!((EventDialogControl() == gv_SurrenderDialogBtn[0]))) {
            return false;
        }
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true))) {
            return false;
        }
        if (!((gv_GameStartBoolean == true))) {
            return false;
        }
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
        if (!((gv_SurrenderBtnDelay[EventPlayer()] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_SurrenderBtnDelay[EventPlayer()] = true;
    DialogControlSetEnabled(gv_SurrenderDialogBtn[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_SurrenderDialogBtn[1], PlayerGroupSingle(EventPlayer()), false);
    gv_SurrenderSystemYorN[0] += 1;
    libNtve_gf_SetDialogItemText(gv_SurrenderDialogLabel[1], (StringExternal("Param/Value/503D40BF") + TextWithColor(IntToText(gv_SurrenderSystemYorN[0]), Color(50.20, 100.00, 50.20)) + TextWithColor(StringExternal("Param/Value/DF1EE827"), Color(100.00, 100.00, 100.00)) + TextWithColor(IntToText(gv_SurrenderSystemYorN[1]), Color(100.00, 57.65, 57.65)) + StringExternal("Param/Value/47675D72")), GameAttributePlayersForTeam(1));
    gv_SurrenderPlayerNum1 -= 1;
    Wait(3.0, c_timeReal);
    gv_SurrenderBtnDelay[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSurrenderOkTeam1_Init () {
    gt_TrSurrenderOkTeam1 = TriggerCreate("gt_TrSurrenderOkTeam1_Func");
    TriggerEnable(gt_TrSurrenderOkTeam1, false);
    TriggerAddEventDialogControl(gt_TrSurrenderOkTeam1, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ??????(2???)
//--------------------------------------------------------------------------------------------------
bool gt_TrSurrenderOkTeam2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((DialogIsVisible(gv_SurrenderDialog, EventPlayer()) == true))) {
            return false;
        }
        if (!((EventDialogControl() == gv_SurrenderDialogBtn[0]))) {
            return false;
        }
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true))) {
            return false;
        }
        if (!((gv_GameStartBoolean == true))) {
            return false;
        }
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
        if (!((gv_SurrenderBtnDelay[EventPlayer()] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_SurrenderBtnDelay[EventPlayer()] = true;
    DialogControlSetEnabled(gv_SurrenderDialogBtn[0], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_SurrenderDialogBtn[1], PlayerGroupSingle(EventPlayer()), false);
    gv_SurrenderSystemYorN[2] += 1;
    libNtve_gf_SetDialogItemText(gv_SurrenderDialogLabel[2], (StringExternal("Param/Value/63A99AB4") + TextWithColor(IntToText(gv_SurrenderSystemYorN[2]), Color(50.20, 100.00, 50.20)) + TextWithColor(StringExternal("Param/Value/13D6C5A3"), Color(100.00, 100.00, 100.00)) + TextWithColor(IntToText(gv_SurrenderSystemYorN[3]), Color(100.00, 57.65, 57.65)) + StringExternal("Param/Value/BF4F2547")), GameAttributePlayersForTeam(2));
    gv_SurrenderPlayerNum2 -= 1;
    Wait(3.0, c_timeReal);
    gv_SurrenderBtnDelay[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSurrenderOkTeam2_Init () {
    gt_TrSurrenderOkTeam2 = TriggerCreate("gt_TrSurrenderOkTeam2_Func");
    TriggerEnable(gt_TrSurrenderOkTeam2, false);
    TriggerAddEventDialogControl(gt_TrSurrenderOkTeam2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ??????(1???)
//--------------------------------------------------------------------------------------------------
bool gt_TrSurrenderNoTeam1_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((DialogIsVisible(gv_SurrenderDialog, EventPlayer()) == true))) {
            return false;
        }
        if (!((EventDialogControl() == gv_SurrenderDialogBtn[1]))) {
            return false;
        }
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true))) {
            return false;
        }
        if (!((gv_GameStartBoolean == true))) {
            return false;
        }
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
        if (!((gv_SurrenderBtnDelay[EventPlayer()] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_SurrenderBtnDelay[EventPlayer()] = true;
    DialogControlSetEnabled(gv_SurrenderDialogBtn[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_SurrenderDialogBtn[0], PlayerGroupSingle(EventPlayer()), false);
    gv_SurrenderSystemYorN[1] += 1;
    libNtve_gf_SetDialogItemText(gv_SurrenderDialogLabel[1], (StringExternal("Param/Value/91E6B7E6") + TextWithColor(IntToText(gv_SurrenderSystemYorN[0]), Color(50.20, 100.00, 50.20)) + TextWithColor(StringExternal("Param/Value/A509C46D"), Color(100.00, 100.00, 100.00)) + TextWithColor(IntToText(gv_SurrenderSystemYorN[1]), Color(100.00, 57.65, 57.65)) + StringExternal("Param/Value/AAAA0F60")), GameAttributePlayersForTeam(1));
    gv_SurrenderPlayerNum1 -= 1;
    Wait(3.0, c_timeReal);
    gv_SurrenderBtnDelay[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSurrenderNoTeam1_Init () {
    gt_TrSurrenderNoTeam1 = TriggerCreate("gt_TrSurrenderNoTeam1_Func");
    TriggerEnable(gt_TrSurrenderNoTeam1, false);
    TriggerAddEventDialogControl(gt_TrSurrenderNoTeam1, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ????????? ??????(2???)
//--------------------------------------------------------------------------------------------------
bool gt_TrSurrenderNoTeam2_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((DialogIsVisible(gv_SurrenderDialog, EventPlayer()) == true))) {
            return false;
        }
        if (!((EventDialogControl() == gv_SurrenderDialogBtn[1]))) {
            return false;
        }
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true))) {
            return false;
        }
        if (!((gv_GameStartBoolean == true))) {
            return false;
        }
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
        if (!((gv_SurrenderBtnDelay[EventPlayer()] == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_SurrenderBtnDelay[EventPlayer()] = true;
    DialogControlSetEnabled(gv_SurrenderDialogBtn[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_SurrenderDialogBtn[0], PlayerGroupSingle(EventPlayer()), false);
    gv_SurrenderSystemYorN[3] += 1;
    libNtve_gf_SetDialogItemText(gv_SurrenderDialogLabel[2], (StringExternal("Param/Value/1A5C04D4") + TextWithColor(IntToText(gv_SurrenderSystemYorN[2]), Color(50.20, 100.00, 50.20)) + TextWithColor(StringExternal("Param/Value/8D6693DC"), Color(100.00, 100.00, 100.00)) + TextWithColor(IntToText(gv_SurrenderSystemYorN[3]), Color(100.00, 57.65, 57.65)) + StringExternal("Param/Value/563083E6")), GameAttributePlayersForTeam(2));
    gv_SurrenderPlayerNum2 -= 1;
    Wait(3.0, c_timeReal);
    gv_SurrenderBtnDelay[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSurrenderNoTeam2_Init () {
    gt_TrSurrenderNoTeam2 = TriggerCreate("gt_TrSurrenderNoTeam2_Func");
    TriggerEnable(gt_TrSurrenderNoTeam2, false);
    TriggerAddEventDialogControl(gt_TrSurrenderNoTeam2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??????(1??? ??????)
//--------------------------------------------------------------------------------------------------
bool gt_TrSurrenderOkTeam1Win_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_GameEndBoolean = true;
    TriggerEnable(gt_TrNexusDestroyTeam2, false);
    TriggerStop(gt_TrMinionMake);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetDragSelectEnabled(PlayerGroupAll(), false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton1, false);
    DialogSetVisible(gv_ScoreDialog[0], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ScoreWindowToggleButton, PlayerGroupAll(), false);
    DialogSetVisible(gv_ScoreDialog[1], PlayerGroupAll(), false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationDefault);
    DialogControlSetVisible(gv_StatShopDialog, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_SelectionLockButton, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_RemoveObjectivesButton, PlayerGroupAll(), false);
    DialogSetVisible(gv_HeroReviveWindow, PlayerGroupAll(), false);

    for (i = 1; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            CameraLockInput(gv_PlayerBayul[i], true);
            CameraPan(gv_PlayerBayul[i], PointFromId(293), 0.0, -1, 10, false);
            CameraShakeStart(gv_PlayerBayul[i], c_cameraPositionTarget, c_cameraDirectionXYZ, 1.0, 1.5, 100.0, 2.5);
            DialogControlSetVisible(gv_HeroReviveWindowTime[gv_PlayerBayul[i]], PlayerGroupSingle(gv_PlayerBayul[i]), false);
            gv_AvailableSkillPoints[gv_PlayerBayul[i]] = 0;
            libNtve_gf_MakeUnitUncommandable(gv_PlayerHero[gv_PlayerBayul[i]], true);
            VisRevealArea(gv_PlayerBayul[i], RegionCircle(PointFromId(293), 20.0), 20.0, false);
            gf_ShowPlayerStatistics(i);
        }
    }

    Wait(0.25, c_timeReal);
    UnitKill(UnitFromId(109));
    DialogControlSetVisible(gv_SkillLearnWindow, PlayerGroupAll(), false);
    Wait(6.0, c_timeReal);
    SoundPlay(SoundLink("SystemSound332", -1), GameAttributePlayersForTeam(2), 200.0, 0.0);
    SoundPlay(SoundLink("SystemSound3322", -1), GameAttributePlayersForTeam(1), 200.0, 0.0);
    Wait(2.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDebug);

    for (i = 5; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser)) {
            GameOver(gv_PlayerBayul[i], c_gameOverVictory, true, true);
        }
    }
    for (i = 1; i <= 4; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser)) {
            GameOver(gv_PlayerBayul[i], c_gameOverDefeat, true, true);
        }
    }
    for (i = 9; i <= 10; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser)) {
            GameOver(gv_PlayerBayul[i], c_gameOverTie, true, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSurrenderOkTeam1Win_Init () {
    gt_TrSurrenderOkTeam1Win = TriggerCreate("gt_TrSurrenderOkTeam1Win_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ?????? ??????(2??? ??????)
//--------------------------------------------------------------------------------------------------
bool gt_TrSurrenderOkTeam2Win_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_GameEndBoolean = true;
    TriggerEnable(gt_TrNexusDestroyTeam1, false);
    TriggerStop(gt_TrMinionMake);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetDragSelectEnabled(PlayerGroupAll(), false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogGenericButton1, false);
    DialogSetVisible(gv_ScoreDialog[0], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_ScoreWindowToggleButton, PlayerGroupAll(), false);
    DialogSetVisible(gv_ScoreDialog[1], PlayerGroupAll(), false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationDefault);
    DialogControlSetVisible(gv_StatShopDialog, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_SelectionLockButton, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_RemoveObjectivesButton, PlayerGroupAll(), false);
    DialogSetVisible(gv_HeroReviveWindow, PlayerGroupAll(), false);

    for (i = 1; i <= 8; i += 1) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive)) {
            CameraLockInput(gv_PlayerBayul[i], true);
            CameraPan(gv_PlayerBayul[i], PointFromId(266), 0.0, -1, 10, false);
            CameraShakeStart(gv_PlayerBayul[i], c_cameraPositionTarget, c_cameraDirectionXYZ, 1.0, 1.5, 100.0, 2.5);
            DialogControlSetVisible(gv_HeroReviveWindowTime[gv_PlayerBayul[i]], PlayerGroupSingle(gv_PlayerBayul[i]), false);
            gv_AvailableSkillPoints[gv_PlayerBayul[i]] = 0;
            libNtve_gf_MakeUnitUncommandable(gv_PlayerHero[gv_PlayerBayul[i]], true);
            VisRevealArea(gv_PlayerBayul[i], RegionCircle(PointFromId(266), 20.0), 20.0, false);
            gf_ShowPlayerStatistics(i);
        }
    }

    Wait(0.25, c_timeReal);
    UnitKill(UnitFromId(112));
    DialogControlSetVisible(gv_SkillLearnWindow, PlayerGroupAll(), false);
    Wait(6.0, c_timeReal);
    SoundPlay(SoundLink("SystemSound332", -1), GameAttributePlayersForTeam(1), 200.0, 0.0);
    SoundPlay(SoundLink("SystemSound3322", -1), GameAttributePlayersForTeam(2), 200.0, 0.0);
    Wait(2.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDebug);

    for (i = 1; i <= 4; i += 1 ) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser)) {
            GameOver(gv_PlayerBayul[i], c_gameOverVictory, true, true);
        }
    }
    for (i = 5; i <= 8; i += 1 ) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser)) {
            GameOver(gv_PlayerBayul[i], c_gameOverDefeat, true, true);
        }
    }
    for (i = 9; i <= 10; i += 1 ) {
        if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser)) {
            GameOver(gv_PlayerBayul[i], c_gameOverTie, true, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrSurrenderOkTeam2Win_Init () {
    gt_TrSurrenderOkTeam2Win = TriggerCreate("gt_TrSurrenderOkTeam2Win_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ???????????? ??????
//--------------------------------------------------------------------------------------------------
bool gt_TrPlayerOut_Func (bool testConds, bool runActions) {
    int i;

    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), EventPlayer()) == false))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_HeroDeathBoolean[EventPlayer()] = true;
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
        gv_SurrenderPlayerNum1 -= 1;
        PlayerGroupRemove(gv_TeamPlayerGroup[0], EventPlayer());
        for (i = 1 ; i <= 4; i += 1) {
            if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive) && (gv_PlayerBayul[i] != EventPlayer())) {
                PlayerModifyPropertyInt(gv_PlayerBayul[i], c_playerPropMinerals, c_playerPropOperAdd, gv_AllyGiveMoney[EventPlayer()]);
                PlayerModifyPropertyInt(gv_PlayerBayul[i], c_playerPropVespene, c_playerPropOperAdd, 10);
            }

        }
        if ((gv_PlayerOutSurrenderPossible[0] == false)) {
            gv_PlayerOutSurrenderPossible[0] = true;
            gv_SurrenderPossibleBoolean[0] = true;
            UISetGameMenuItemVisible(GameAttributePlayersForTeam(1), c_gameMenuDialogGenericButton1, true);
            if ((gv_PlayerOutSurrenderPossible[2] == false)) {
                gv_PlayerOutSurrenderPossible[2] = true;
                TriggerEnable(gt_TrSurrenderSystemStartBtn, true);
                TriggerEnable(gt_TrSurrenderOkTeam1, true);
                TriggerEnable(gt_TrSurrenderOkTeam2, true);
                TriggerEnable(gt_TrSurrenderNoTeam1, true);
                TriggerEnable(gt_TrSurrenderNoTeam2, true);
            }

        }

    }
    else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true)) {
        gv_SurrenderPlayerNum2 -= 1;
        PlayerGroupRemove(gv_TeamPlayerGroup[1], EventPlayer());
        for (i = 5; i <= 8; i += 1) {
            if ((PlayerType(gv_PlayerBayul[i]) == c_playerTypeUser) && (PlayerStatus(gv_PlayerBayul[i]) == c_playerStatusActive) && (gv_PlayerBayul[i] != EventPlayer())) {
                PlayerModifyPropertyInt(gv_PlayerBayul[i], c_playerPropMinerals, c_playerPropOperAdd, gv_AllyGiveMoney[EventPlayer()]);
                PlayerModifyPropertyInt(gv_PlayerBayul[i], c_playerPropVespene, c_playerPropOperAdd, 10);
            }

        }
        if ((gv_PlayerOutSurrenderPossible[1] == false)) {
            gv_PlayerOutSurrenderPossible[1] = true;
            gv_SurrenderPossibleBoolean[1] = true;
            UISetGameMenuItemVisible(GameAttributePlayersForTeam(2), c_gameMenuDialogGenericButton1, true);
            if ((gv_PlayerOutSurrenderPossible[2] == false)) {
                gv_PlayerOutSurrenderPossible[2] = true;
                TriggerEnable(gt_TrSurrenderSystemStartBtn, true);
                TriggerEnable(gt_TrSurrenderOkTeam1, true);
                TriggerEnable(gt_TrSurrenderOkTeam2, true);
                TriggerEnable(gt_TrSurrenderNoTeam1, true);
                TriggerEnable(gt_TrSurrenderNoTeam2, true);
            }
        }
    }

    if ((gv_BeforeStartCounterDialogNum > 0)) {
        DialogControlSetVisible(gv_TeamSelectDialogPlayerHeroImage[EventPlayer()], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_TeamSelectDialogPlayerBorder[EventPlayer()], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_TeamSelectDialogPlayerSpellImage1[EventPlayer()], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_TeamSelectDialogPlayerSpellImage2[EventPlayer()], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_TeamSelectDialogPlayerName[EventPlayer()], PlayerGroupAll(), false);
        gv_SelectedCharNum[EventPlayer()] = 0;
        if ((gv_ReadyBoolean > 0)) {
            gv_ReadyBoolean -= 1;
        }

        gf_HrHeroTeamSelectSave2();
    }
    else if ((gv_BeforeStartCounterDialogNum == 0)) {
        DialogControlSetVisible(gv_ScoreDialogName[EventPlayer()], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_ScoreDialogHeroImage[EventPlayer()], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_ScoreDialogLevel[EventPlayer()], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_ScoreDialogSpell[EventPlayer()][0], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_ScoreDialogSpell[EventPlayer()][1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_ScoreDialogTotalScore[EventPlayer()], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_ScoreDialogFarming[EventPlayer()], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_ScoreDialogReviveTime[EventPlayer()], PlayerGroupAll(), false);
        UnitRemove(gv_PlayerHero[EventPlayer()]);
    }

    if (((PlayerStatus(gv_PlayerBayul[1]) != c_playerStatusActive) && (PlayerStatus(gv_PlayerBayul[2]) != c_playerStatusActive) && (PlayerStatus(gv_PlayerBayul[3]) != c_playerStatusActive) && (PlayerStatus(gv_PlayerBayul[4]) != c_playerStatusActive)) && (gv_GameEndBoolean == false)) {
        if ((gv_GameStartBoolean == true)) {
            TriggerExecute(gt_TrSurrenderOkTeam1Win, true, false);
            gv_SurrenderPossibleBoolean[0] = false;
            gv_SurrenderPossibleBoolean[1] = false;
        }
        else if ((gv_GameStartBoolean == false)) {
            gf_HrDrawGame();
            gv_SurrenderPossibleBoolean[0] = false;
            gv_SurrenderPossibleBoolean[1] = false;
        }
    }

    else if (((PlayerStatus(gv_PlayerBayul[5]) != c_playerStatusActive) && (PlayerStatus(gv_PlayerBayul[6]) != c_playerStatusActive) && (PlayerStatus(gv_PlayerBayul[7]) != c_playerStatusActive) && (PlayerStatus(gv_PlayerBayul[8]) != c_playerStatusActive)) && (gv_GameEndBoolean == false)) {
        if ((gv_GameStartBoolean == true)) {
            TriggerExecute(gt_TrSurrenderOkTeam2Win, true, false);
            gv_SurrenderPossibleBoolean[0] = false;
            gv_SurrenderPossibleBoolean[1] = false;
        }
        else if ((gv_GameStartBoolean == false)) {
            gf_HrDrawGame();
            gv_SurrenderPossibleBoolean[0] = false;
            gv_SurrenderPossibleBoolean[1] = false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrPlayerOut_Init () {
    gt_TrPlayerOut = TriggerCreate("gt_TrPlayerOut_Func");
    TriggerAddEventPlayerLeft(gt_TrPlayerOut, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion objective is completed
//--------------------------------------------------------------------------------------------------
bool gt_MinionObjectiveCompleted_Func (bool testConds, bool runActions) {
    bool completed = true;
    if (testConds) {
        if (!((gv_GameStartBoolean == true))) {
            return false;
        }

        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if (UnitGetPropertyInt(EventUnit(), c_unitPropKills, true) >= 1) {
        ObjectiveSetState(gv_PlayerObjectives[UnitGetOwner(EventUnit())][c_secondaryObjectiveMinions], c_objectiveStateCompleted);
        gf_RemoveCompletedSecondaryObjectives();
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    for (; !PlayerGroupLoopDone(); PlayerGroupLoopStep()) {
        if (!(PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
            continue;
        }
        if (PlayerGroupHasPlayer(GameAttributePlayersForTeam(3), PlayerGroupLoopCurrent())) {
            continue;
        }
        if (ObjectiveGetState(gv_PlayerObjectives[PlayerGroupLoopCurrent()][c_secondaryObjectiveMinions]) == c_objectiveStateActive) {
            continue;
        }
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinionObjectiveCompleted_Init () {
    gt_MinionObjectiveCompleted = TriggerCreate("gt_MinionObjectiveCompleted_Func");
    TriggerEnable(gt_MinionObjectiveCompleted, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero damage tracking for statistics
//--------------------------------------------------------------------------------------------------
bool gt_TrackHeroDamage_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerType(EventUnitDamageSourcePlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((gv_GameStartBoolean == true))) {
            return false;
        }
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if (EventPlayer() == EventUnitDamageSourcePlayer()) {
        return false;
    }

    gv_PlayerStatistics[EventUnitDamageSourcePlayer()].damage_dealt += FixedToInt(EventUnitDamageAmount());
    gv_PlayerStatistics[EventPlayer()].damage_absorbed += FixedToInt(EventUnitDamageAbsorbed());

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackHeroDamage_Init () {
    gt_TrackHeroDamage = TriggerCreate("gt_TrackHeroDamage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Healing tracking for statistics
//--------------------------------------------------------------------------------------------------
bool gt_TrackHeroHealing_Func (bool testConds, bool runActions) {
    if (testConds) {
        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((PlayerType(EventUnitHealLaunchPlayer()) == c_playerTypeUser))) {
            return false;
        }
        if (!((gv_GameStartBoolean == true))) {
            return false;
        }
        if (!((gv_GameEndBoolean == false))) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    if (EventPlayer() == EventUnitHealLaunchPlayer()) {
        gv_PlayerStatistics[EventUnitHealLaunchPlayer()].self_healing += FixedToInt(EventUnitHealAmount());
    } else {
        gv_PlayerStatistics[EventUnitHealLaunchPlayer()].healing_done += FixedToInt(EventUnitHealAmount());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackHeroHealing_Init () {
    gt_TrackHeroHealing = TriggerCreate("gt_TrackHeroHealing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_TrStartGame_Init();
    gt_Tr1FullscreenSetting_Init();
    gt_Tr2GameSetting_Init();
    gt_Tr3PlayerSetting_Init();
    gt_Tr5AllDialogInit_Init();
    gt_Tr6PlayerDialogAddorView_Init();
    gt_Tr8VoteScreenView_Init();
    gt_TrCharSelectDraft_Init();
    gt_TrCharSelectBlind_Init();
    gt_TrCharSelectPageNext_Init();
    gt_TrCharSelect_Init();
    gt_TrCharSelectRandom_Init();
    gt_TrDraftSelectRandomRefreash1_Init();
    gt_TrTeamSelectDialogHeroSwap1_Init();
    gt_TrTeamSelectDialogHeroSwap2_Init();
    gt_TrTeamSelectDialogHeroSwap3_Init();
    gt_TrTeamSelectDialogHeroSwap4_Init();
    gt_TrTeamSelectDialogHeroSwap5_Init();
    gt_TrTeamSelectDialogHeroSwap6_Init();
    gt_TrTeamSelectDialogHeroSwap7_Init();
    gt_TrTeamSelectDialogHeroSwap8_Init();
    gt_TrTeamSelectDialogHeroSwapSuggestOkTeam1_Init();
    gt_TrTeamSelectDialogHeroSwapSuggestNoTeam1_Init();
    gt_TrTeamSelectDialogHeroSwapSuggestOkTeam2_Init();
    gt_TrTeamSelectDialogHeroSwapSuggestNoTeam2_Init();
    gt_TrSpellSelect1_Init();
    gt_TrSpellSelect2_Init();
    gt_TrGameModeSelect_Init();
    gt_TrReadyOkSelect_Init();
    gt_TrBeforeSpellRandomSelect_Init();
    gt_TrPlayersAllCreate_Init();
    gt_TrRankDialogView_Init();
    gt_TrGameStartCounter_Init();
    gt_CenterCameraOnHero_Init();
    gt_HeroSelectionLockToggle_Init();
    gt_HeroSelectionLockAction_Init();
    gt_Trgametipbtn_Init();
    gt_TrMinionMake_Init();
    gt_TrHeroLevelUp_Init();
    gt_SkillPointAllocation_Init();
    gt_ChangeShopPage_Init();
    gt_TrStatDialogStatIncrease_Init();
    gt_TrHealingPosionUseComplete_Init();
    gt_TrManaPosionUseComplete_Init();
    gt_TrWardUseComplete_Init();
    gt_TrWardUseComplete2_Init();
    gt_TrUnitBoodeSet_Init();
    gt_TrTextTailUseCritical_Init();
    gt_TrTextTailUseHyepi_Init();
    gt_TrSpellTeleportUse_Init();
    gt_TrPortalUse_Init();
    gt_TrMissileOutDestroy_Init();
    gt_TrTextTailUseHero5Skill4_Init();
    gt_TrTextTailUseHero9AttackImpact_Init();
    gt_TrHero10Skill4On_Init();
    gt_TrHero10Skill4Off_Init();
    gt_TrHero15Skill4Use_Init();
    gt_TrHero19Death_Init();
    gt_TrHero36Skill4RPDown_Init();
    gt_TrHero32Skill2Up_Init();
    gt_TrHero32Skill4On_Init();
    gt_TrHero32Skill4Off_Init();
    gt_TrHero39Skill4On_Init();
    gt_TrHero59Skill1Use_Init();
    gt_TrHero62Skill3Start_Init();
    gt_TrHero62Skill3On_Init();
    gt_TrHero62Skill3End_Init();
    gt_TrHero66PassiveOn_Init();
    gt_TrHero66PassiveOn2_Init();
    gt_ScoreWindowToggle_Init();
    gt_TrMinionNotStop_Init();
    gt_TrMonsterMake1_Init();
    gt_TrMonsterMake2_Init();
    gt_TrMonsterMake3_Init();
    gt_TrMonsterMake4_Init();
    gt_TrMonsterMake5_Init();
    gt_TrMonsterBuffPickUp_Init();
    gt_TrMonsterBuffEnd1_Init();
    gt_TrMonsterBuffEnd2_Init();
    gt_TrMonsterBuffEnd3_Init();
    gt_TrMonsterAttackBird1_Init();
    gt_TrMonsterAttackBird2_Init();
    gt_TrMonsterBackBird1_Init();
    gt_TrMonsterBackBird2_Init();
    gt_TrMonsterAttackDog1_Init();
    gt_TrMonsterAttackDog2_Init();
    gt_TrMonsterBackDog1_Init();
    gt_TrMonsterBackDog2_Init();
    gt_TrMonsterAttackCow1_Init();
    gt_TrMonsterAttackCow2_Init();
    gt_TrMonsterBackCow1_Init();
    gt_TrMonsterBackCow2_Init();
    gt_TrMonsterAttackGalic1_Init();
    gt_TrMonsterAttackGalic2_Init();
    gt_TrMonsterBackGalic1_Init();
    gt_TrMonsterBackGalic2_Init();
    gt_TrMonsterAttackScorpion1_Init();
    gt_TrMonsterAttackScorpion2_Init();
    gt_TrMonsterBackScorpion1_Init();
    gt_TrMonsterBackScorpion2_Init();
    gt_TrMonsterAttackIceBug1_Init();
    gt_TrMonsterAttackIceBug2_Init();
    gt_TrMonsterAttackIceBug3_Init();
    gt_TrMonsterAttackIceBug4_Init();
    gt_TrMonsterBackIceBug1_Init();
    gt_TrMonsterBackIceBug2_Init();
    gt_TrMonsterBackIceBug3_Init();
    gt_TrMonsterBackIceBug4_Init();
    gt_TrMonsterAttackBoss1_Init();
    gt_TrMonsterAttackBoss2_Init();
    gt_TrMonsterBackBoss1_Init();
    gt_TrMonsterBackBoss2_Init();
    gt_TrMonsterRegenTimerStart_Init();
    gt_TrMonsterBirdRegen_Init();
    gt_TrMonsterDogRegen_Init();
    gt_TrMonsterCowRegen_Init();
    gt_TrMonsterGalicRegen_Init();
    gt_TrMonsterScorpionRegen_Init();
    gt_TrMonsterIceBugRegen_Init();
    gt_TrMonsterIceBossRegen_Init();
    gt_TrBuildingDestroyMoojuck_Init();
    gt_TrSinhoBuildingReviveTimerStart_Init();
    gt_TrSinhoBuildingRevive_Init();
    gt_TrHeroDeath_Init();
    gt_TrHeroReviveStand_Init();
    gt_TrNexusDestroyTeam1_Init();
    gt_TrNexusDestroyTeam2_Init();
    gt_TrSurrenderSignOk_Init();
    gt_TrSurrenderReTimer_Init();
    gt_TrSurrenderSystemStart_Init();
    gt_TrSurrenderSystemStartBtn_Init();
    gt_TrSurrenderOkTeam1_Init();
    gt_TrSurrenderOkTeam2_Init();
    gt_TrSurrenderNoTeam1_Init();
    gt_TrSurrenderNoTeam2_Init();
    gt_TrSurrenderOkTeam1Win_Init();
    gt_TrSurrenderOkTeam2Win_Init();
    gt_TrPlayerOut_Init();
    gt_TrChatCommandHandler_Init();
    gt_MinionObjectiveCompleted_Init();
    gt_TrackHeroDamage_Init();
    gt_TrackHeroHealing_Init();
    gt_RemoveObjectivesButton_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
    InitGameParameters();
}
